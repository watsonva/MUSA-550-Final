[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "On this about page, you might want to add more information about yourself, the project, or course. Any helpful context could go here!\nMy name is Nick Hand, the instructor for the course. You can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2023.\nAdipisicing proident minim non non dolor quis. Pariatur in ipsum aliquip magna. Qui ad aliqua nulla excepteur dolor nostrud quis nisi. Occaecat proident eiusmod in cupidatat. Elit qui laboris sit aliquip proident dolore. Officia commodo commodo in eiusmod aliqua sint cupidatat consectetur aliqua sint reprehenderit.\nOccaecat incididunt esse et elit adipisicing sit est cupidatat consequat. Incididunt exercitation amet dolor non sit anim veniam veniam sint velit. Labore irure reprehenderit ut esse. Minim quis commodo nisi voluptate."
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Interactive Maps with Folium",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive maps produced using Folium."
  },
  {
    "objectID": "analysis/4-folium.html#finding-the-shortest-route",
    "href": "analysis/4-folium.html#finding-the-shortest-route",
    "title": "Interactive Maps with Folium",
    "section": "Finding the shortest route",
    "text": "Finding the shortest route\nThis example finds the shortest route between the Art Musuem and the Liberty Bell using osmnx.\n\nimport osmnx as ox\n\nFirst, identify the lat/lng coordinates for our places of interest. Use osmnx to download the geometries for the Libery Bell and Art Museum.\n\nphilly_tourism = ox.features_from_place(\"Philadelphia, PA\", tags={\"tourism\": True})\n\n\nart_museum = philly_tourism.query(\"name == 'Philadelphia Museum of Art'\").squeeze()\n\nart_museum.geometry\n\n\n\n\n\nliberty_bell = philly_tourism.query(\"name == 'Liberty Bell'\").squeeze()\n\nliberty_bell.geometry\n\n\n\n\nNow, extract the lat and lng coordinates\nFor the Art Museum geometry, we can use the .geometry.centroid attribute to calculate the centroid of the building footprint.\n\nliberty_bell_x = liberty_bell.geometry.x\nliberty_bell_y = liberty_bell.geometry.y\n\n\nart_museum_x = art_museum.geometry.centroid.x\nart_museum_y = art_museum.geometry.centroid.y\n\nNext, use osmnx to download the street graph around Center City.\n\nG_cc = ox.graph_from_address(\n    \"City Hall, Philadelphia, USA\", dist=1500, network_type=\"drive\"\n)\n\nNext, identify the nodes in the graph closest to our points of interest.\n\n# Get the origin node (Liberty Bell)\norig_node = ox.nearest_nodes(G_cc, liberty_bell_x, liberty_bell_y)\n\n# Get the destination node (Art Musuem)\ndest_node = ox.nearest_nodes(G_cc, art_museum_x, art_museum_y)\n\nFind the shortest path, based on the distance of the edges:\n\n# Get the shortest path --&gt; just a list of node IDs\nroute = ox.shortest_path(G_cc, orig_node, dest_node, weight=\"length\")\n\nHow about an interactive version?\nosmnx has a helper function ox.utils_graph.route_to_gdf() to convert a route to a GeoDataFrame of edges.\n\nox.utils_graph.route_to_gdf(G_cc, route, weight=\"length\").explore(\n    tiles=\"cartodb positron\",\n    color=\"red\",\n)\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/4-folium.html#examining-trash-related-311-requests",
    "href": "analysis/4-folium.html#examining-trash-related-311-requests",
    "title": "Interactive Maps with Folium",
    "section": "Examining Trash-Related 311 Requests",
    "text": "Examining Trash-Related 311 Requests\nFirst, let’s load the dataset from a CSV file and convert to a GeoDataFrame:\n\n\nCode\n# Load the data from a CSV file into a pandas DataFrame\ntrash_requests_df = pd.read_csv(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/trash_311_requests_2020.csv\"\n)\n\n# Remove rows with missing geometry\ntrash_requests_df = trash_requests_df.dropna(subset=[\"lat\", \"lon\"])\n\n\n# Create our GeoDataFrame with geometry column created from lon/lat\ntrash_requests = gpd.GeoDataFrame(\n    trash_requests_df,\n    geometry=gpd.points_from_xy(trash_requests_df[\"lon\"], trash_requests_df[\"lat\"]),\n    crs=\"EPSG:4326\",\n)\n\n\nLoad neighborhoods and do the spatial join to associate a neighborhood with each ticket:\n\n\nCode\n# Load the neighborhoods\nneighborhoods = gpd.read_file(\n    \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-4/main/data/zillow_neighborhoods.geojson\"\n)\n\n# Do the spatial join to add the \"ZillowName\" column\nrequests_with_hood = gpd.sjoin(\n    trash_requests,\n    neighborhoods.to_crs(trash_requests.crs),\n    predicate=\"within\",\n)\n\n\nLet’s explore the 311 requests in the Greenwich neighborhood of the city:\n\n# Extract out the point tickets for Greenwich\ngreenwich_tickets = requests_with_hood.query(\"ZillowName == 'Greenwich'\")\n\n\n# Get the neighborhood boundary for Greenwich\ngreenwich_geo = neighborhoods.query(\"ZillowName == 'Greenwich'\")\n\ngreenwich_geo.squeeze().geometry\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nQuarto has callout blocks that you can use to emphasize content in different ways. This is a “Note” callout block. More info is available on the Quarto documentation.\n\n\nImport the packages we need:\n\nimport folium\nimport xyzservices\n\nCombine the tickets as markers and the neighborhood boundary on the same Folium map:\n\n# Plot the neighborhood boundary\nm = greenwich_geo.explore(\n    style_kwds={\"weight\": 4, \"color\": \"black\", \"fillColor\": \"none\"},\n    name=\"Neighborhood boundary\",\n    tiles=xyzservices.providers.CartoDB.Voyager,\n)\n\n\n# Add the individual tickets as circle markers and style them\ngreenwich_tickets.explore(\n    m=m,  # Add to the existing map!\n    marker_kwds={\"radius\": 7, \"fill\": True, \"color\": \"crimson\"},\n    marker_type=\"circle_marker\", # or 'marker' or 'circle'\n    name=\"Tickets\",\n)\n\n# Hse folium to add layer control\nfolium.LayerControl().add_to(m)\n\nm  # show map\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "analysis/1-python-code-blocks.html",
    "href": "analysis/1-python-code-blocks.html",
    "title": "Python code blocks",
    "section": "",
    "text": "This is an example from the Quarto documentation that shows how to mix executable Python code blocks into a markdown file in a “Quarto markdown” .qmd file.\nFor a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Altair and Hvplot Charts",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and shows examples of embedding interactive charts produced using Altair and hvPlot."
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-altair",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in Altair",
    "text": "Example: Measles Incidence in Altair\nFirst, let’s load the data for measles incidence in wide format:\n\n\nCode\nurl = \"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/measles_incidence.csv\"\ndata = pd.read_csv(url, skiprows=2, na_values=\"-\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nWEEK\nALABAMA\nALASKA\nARIZONA\nARKANSAS\nCALIFORNIA\nCOLORADO\nCONNECTICUT\nDELAWARE\n...\nSOUTH DAKOTA\nTENNESSEE\nTEXAS\nUTAH\nVERMONT\nVIRGINIA\nWASHINGTON\nWEST VIRGINIA\nWISCONSIN\nWYOMING\n\n\n\n\n0\n1928\n1\n3.67\nNaN\n1.90\n4.11\n1.38\n8.38\n4.50\n8.58\n...\n5.69\n22.03\n1.18\n0.4\n0.28\nNaN\n14.83\n3.36\n1.54\n0.91\n\n\n1\n1928\n2\n6.25\nNaN\n6.40\n9.91\n1.80\n6.02\n9.00\n7.30\n...\n6.57\n16.96\n0.63\nNaN\n0.56\nNaN\n17.34\n4.19\n0.96\nNaN\n\n\n2\n1928\n3\n7.95\nNaN\n4.50\n11.15\n1.31\n2.86\n8.81\n15.88\n...\n2.04\n24.66\n0.62\n0.2\n1.12\nNaN\n15.67\n4.19\n4.79\n1.36\n\n\n3\n1928\n4\n12.58\nNaN\n1.90\n13.75\n1.87\n13.71\n10.40\n4.29\n...\n2.19\n18.86\n0.37\n0.2\n6.70\nNaN\n12.77\n4.66\n1.64\n3.64\n\n\n4\n1928\n5\n8.03\nNaN\n0.47\n20.79\n2.38\n5.13\n16.80\n5.58\n...\n3.94\n20.05\n1.57\n0.4\n6.70\nNaN\n18.83\n7.37\n2.91\n0.91\n\n\n\n\n5 rows × 53 columns\n\n\n\nThen, use the pandas.melt() function to convert it to tidy format:\n\n\nCode\nannual = data.drop(\"WEEK\", axis=1)\nmeasles = annual.groupby(\"YEAR\").sum().reset_index()\nmeasles = measles.melt(id_vars=\"YEAR\", var_name=\"state\", value_name=\"incidence\")\n\n\n\n\n\n\n\n\n\n\n\nYEAR\nstate\nincidence\n\n\n\n\n0\n1928\nALABAMA\n334.99\n\n\n1\n1929\nALABAMA\n111.93\n\n\n2\n1930\nALABAMA\n157.00\n\n\n3\n1931\nALABAMA\n337.29\n\n\n4\n1932\nALABAMA\n10.21\n\n\n\n\n\n\n\nFinally, load altair:\n\nimport altair as alt\n\nAnd generate our final data viz:\n\n# use a custom color map\ncolormap = alt.Scale(\n    domain=[0, 100, 200, 300, 1000, 3000],\n    range=[\n        \"#F0F8FF\",\n        \"cornflowerblue\",\n        \"mediumseagreen\",\n        \"#FFEE00\",\n        \"darkorange\",\n        \"firebrick\",\n    ],\n    type=\"sqrt\",\n)\n\n# Vertical line for vaccination year\nthreshold = pd.DataFrame([{\"threshold\": 1963}])\n\n# plot YEAR vs state, colored by incidence\nchart = (\n    alt.Chart(measles)\n    .mark_rect()\n    .encode(\n        x=alt.X(\"YEAR:O\", axis=alt.Axis(title=None, ticks=False)),\n        y=alt.Y(\"state:N\", axis=alt.Axis(title=None, ticks=False)),\n        color=alt.Color(\"incidence:Q\", sort=\"ascending\", scale=colormap, legend=None),\n        tooltip=[\"state\", \"YEAR\", \"incidence\"],\n    )\n    .properties(width=650, height=500)\n)\n\nrule = alt.Chart(threshold).mark_rule(strokeWidth=4).encode(x=\"threshold:O\")\n\nout = chart + rule\nout"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "href": "analysis/3-altair-hvplot.html#example-measles-incidence-in-hvplot",
    "title": "Altair and Hvplot Charts",
    "section": "Example: Measles Incidence in hvplot",
    "text": "Example: Measles Incidence in hvplot\n\n\n\n\n\n\n\n\n\n\n\n\nGenerate the same data viz in hvplot:\n\n# Make the heatmap with hvplot\nheatmap = measles.hvplot.heatmap(\n    x=\"YEAR\",\n    y=\"state\",\n    C=\"incidence\", # color each square by the incidence\n    reduce_function=np.sum, # sum the incidence for each state/year\n    frame_height=450,\n    frame_width=600,\n    flip_yaxis=True,\n    rot=90,\n    colorbar=False,\n    cmap=\"viridis\",\n    xlabel=\"\",\n    ylabel=\"\",\n)\n\n# Some additional formatting using holoviews \n# For more info: http://holoviews.org/user_guide/Customizing_Plots.html\nheatmap = heatmap.redim(state=\"State\", YEAR=\"Year\")\nheatmap = heatmap.opts(fontsize={\"xticks\": 0, \"yticks\": 6}, toolbar=\"above\")\nheatmap"
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Trrendy Introduction",
    "section": "",
    "text": "Trrendy Introduction\n\n\n\npersona of a young-student traveler\n\n\nAirbnb, a revolutionary platform in the hospitality industry, was founded by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk in 2008. It has redefined the way people travel by allowing homeowners to rent out their spaces to travelers, providing a unique and personalized lodging experience. Airbnb’s service extends beyond just providing accommodation; it offers a gateway for people to explore new locations with a local’s perspective.\nDespite its success, Airbnb faces certain challenges that impact both hosts and users. Many hosts struggle with understanding detailed feedback from guests. While they receive reviews, these often lack depth in terms of common themes or specific indicators that could guide service improvement.On the other side, users face a lack of transparency in pricing. While they can see the current price set by hosts, they have no reference point to understand if this price is reasonable based on historical data and market trends.\nThis project aims to address these challenges by leveraging the power of data analysis. By analyzing historical Airbnb records, this project will uncover both tabular and spatial distributions of Airbnb activities. This insight will empower hosts with a deeper understanding of how their service is being utilized and guide their business strategies for future expansion.A key component of this project is to develop a predictive pricing model. This will offer users a reference price, helping them make more informed decisions when choosing accommodations. The model will consider various factors, including historical pricing trends, to provide a realistic price estimate.\nIn this project, we delve into the world of Airbnb in San Francisco, using comprehensive datasets from two key sources: InsideAirbnb and San Francisco Open Data. These datasets provide a rich foundation for the analysis, offering in-depth insights into the local Airbnb market. The project is structured into Three main parts, each focusing on a different aspect of Airbnb’s presence in San Francisco.\n\nExplore distribution of Airbnb data in San Francisco: The first part is dedicated to exploring the distribution of Airbnb listings across the city. This involves examining various factors such as geographical spread, type of listings, and occupancy trends, offering a detailed overview of the Airbnb landscape in San Francisco.\nPredict Airbnb Price in San Francisco: The second part of the project is centered around predicting Airbnb prices in the city. By employing advanced data analysis and predictive modeling techniques, we aim to provide both hosts and guests with valuable insights into pricing trends. This not only helps guests in making informed booking decisions but also assists hosts in setting competitive and fair prices for their listings. Together, these parts form a comprehensive study, aiming to enhance the understanding of the Airbnb market in San Francisco and contribute to a more informed and efficient marketplace.\nFuture UI design: The final and equally crucial part of the project revolves around future user interface (UI) design. We plan to develop a user-friendly and intuitive tool that simplifies access to our findings and insights. This tool will not only visually represent data distributions and price predictions but will also be designed with the end-user in mind, ensuring ease of navigation and interaction."
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Showing static visualizations",
    "section": "",
    "text": "This page is generated from a Jupyter notebook and demonstrates how to generate static visualizations with matplotlib, pandas, and seaborn.\nStart by importing the packages we need:\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nLoad the “Palmer penguins” dataset from week 2:\n# Load data on Palmer penguins\npenguins = pd.read_csv(\"https://raw.githubusercontent.com/MUSA-550-Fall-2023/week-2/main/data/penguins.csv\")\n# Show the first ten rows\npenguins.head(n=10)    \n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nmale\n2007\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nfemale\n2007\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nmale\n2007\n\n\n8\nAdelie\nTorgersen\n34.1\n18.1\n193.0\n3475.0\nNaN\n2007\n\n\n9\nAdelie\nTorgersen\n42.0\n20.2\n190.0\n4250.0\nNaN\n2007"
  },
  {
    "objectID": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "href": "analysis/2-static-images.html#a-simple-visualization-3-different-ways",
    "title": "Showing static visualizations",
    "section": "A simple visualization, 3 different ways",
    "text": "A simple visualization, 3 different ways\n\nI want to scatter flipper length vs. bill length, colored by the penguin species\n\n\nUsing matplotlib\n\n# Setup a dict to hold colors for each species\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Initialize the figure \"fig\" and axes \"ax\"\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Group the data frame by species and loop over each group\n# NOTE: \"group\" will be the dataframe holding the data for \"species\"\nfor species, group_df in penguins.groupby(\"species\"):\n\n    # Plot flipper length vs bill length for this group\n    # Note: we are adding this plot to the existing \"ax\" object\n    ax.scatter(\n        group_df[\"flipper_length_mm\"],\n        group_df[\"bill_length_mm\"],\n        marker=\"o\",\n        label=species,\n        color=color_map[species],\n        alpha=0.75,\n        zorder=10\n    )\n\n# Plotting is done...format the axes!\n\n## Add a legend to the axes\nax.legend(loc=\"best\")\n\n## Add x-axis and y-axis labels\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\n\n## Add the grid of lines\nax.grid(True);\n\n\n\n\n\n\nHow about in pandas?\nDataFrames have a built-in “plot” function that can make all of the basic type of matplotlib plots!\nFirst, we need to add a new “color” column specifying the color to use for each species type.\nUse the pd.replace() function: it use a dict to replace values in a DataFrame column.\n\n# Calculate a list of colors\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\n\n# Map species name to color \npenguins[\"color\"] = penguins[\"species\"].replace(color_map)\n\npenguins.head()\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\ncolor\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n#1f77b4\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n#1f77b4\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007\n#1f77b4\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n2007\n#1f77b4\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nfemale\n2007\n#1f77b4\n\n\n\n\n\n\n\nNow plot!\n\n# Same as before: Start by initializing the figure and axes\nfig, myAxes = plt.subplots(figsize=(10, 6))\n\n# Scatter plot two columns, colored by third\n# Use the built-in pandas plot.scatter function\npenguins.plot.scatter(\n    x=\"flipper_length_mm\",\n    y=\"bill_length_mm\",\n    c=\"color\",\n    alpha=0.75,\n    ax=myAxes, # IMPORTANT: Make sure to plot on the axes object we created already!\n    zorder=10\n)\n\n# Format the axes finally\nmyAxes.set_xlabel(\"Flipper Length (mm)\")\nmyAxes.set_ylabel(\"Bill Length (mm)\")\nmyAxes.grid(True);\n\n\n\n\nNote: no easy way to get legend added to the plot in this case…\n\n\nSeaborn: statistical data visualization\nSeaborn is designed to plot two columns colored by a third column…\n\n# Initialize the figure and axes\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# style keywords as dict\ncolor_map = {\"Adelie\": \"#1f77b4\", \"Gentoo\": \"#ff7f0e\", \"Chinstrap\": \"#D62728\"}\nstyle = dict(palette=color_map, s=60, edgecolor=\"none\", alpha=0.75, zorder=10)\n\n# use the scatterplot() function\nsns.scatterplot(\n    x=\"flipper_length_mm\",  # the x column\n    y=\"bill_length_mm\",  # the y column\n    hue=\"species\",  # the third dimension (color)\n    data=penguins,  # pass in the data\n    ax=ax,  # plot on the axes object we made\n    **style  # add our style keywords\n)\n\n# Format with matplotlib commands\nax.set_xlabel(\"Flipper Length (mm)\")\nax.set_ylabel(\"Bill Length (mm)\")\nax.grid(True)\nax.legend(loc=\"best\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Trrendy | Airbnb Price Predicter",
    "section": "",
    "text": "I’m Watson Van Archer, a dedicated student currently enrolled in the Master of Urban Spatial Analytics (MUSA) program at the University of Pennsylvania.\nOver the past four months, my journey in the world of geospatial has been nothing short of exhilarating. I’ve delved deep into various topics like API integration, web scraping, and the fascinating realm of machine learning. Each of these areas has not only piqued my interest but also significantly enhanced my skill set.\nThis website marks a personal milestone for me—it’s the first I’ve built independently. It serves as a testament to the knowledge and experience I’ve gained and a canvas where I bring my learning to life.\nI owe a tremendous amount of gratitude to Professor Nick Hand, who teaches MUSA 5500. His rigorous Python study materials are unparalleled, and they’ve played a crucial role in shaping my understanding, especially in the geospatial field. Professor Hand’s guidance has been a beacon, illuminating the path in my educational journey.\nThrough this website, I aim to showcase my projects, share insights, and connect with others who share a passion for technology and urban spatial analysis. Whether you’re a fellow student, a professional in the field, or just curious about the intersection of technology and urban studies, I hope you find something here that inspires you."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Trrendy | MUSA 5500 Final Project",
    "section": "",
    "text": "We can create beautiful websites that describe complex technical analyses in Python using Quarto and deploy them online using GitHub Pages. This combination of tools is a really powerful way to create and share your work. This website is a demo that is meant to be used to create your own Quarto website for the final project in MUSA 550.\nQuarto is a relatively new tool, but is becoming popular quickly. It’s a successor to the Rmarkdown ecosystem that combines functionality into a single tool and also extends its computation power to other languages. Most importantly for us, Quarto supports executing Python code, allowing us to convert Jupyter notebooks to HTML and share them online.\n\n\n\n\n\n\nImportant\n\n\n\nThis template site, including the layout it uses, is just a suggested place to start! For your final project, you’re welcome (and encouraged) to make as many changes as you like to best fit your project."
  },
  {
    "objectID": "index.html#find-out-more",
    "href": "index.html#find-out-more",
    "title": "Trrendy | Airbnb Price Predicter",
    "section": "Find out more",
    "text": "Find out more\nThe code for this Project is hosted on this GitHub page: https://github.com/watsonva/MUSA-550-Final.\nHave an interest in diving deeper on the course I am taking? Take a look at PENN MUSA 550: Fall 2023 to find out more."
  },
  {
    "objectID": "analysis/5-test.html",
    "href": "analysis/5-test.html",
    "title": "MUSA 550 Quarto Template",
    "section": "",
    "text": "xxx\n\n\n111"
  },
  {
    "objectID": "analysis/Fairbnb.html#data-exploratory",
    "href": "analysis/Fairbnb.html#data-exploratory",
    "title": "Fairbnb",
    "section": "2.1 Data Exploratory",
    "text": "2.1 Data Exploratory\n\n# ==&gt; 1.0 Convert the airbnb data into geodataframe\nfrom shapely.geometry import Point\n\nairbnb[\"coordinate\"]=list(zip(airbnb[\"longitude\"],airbnb[\"latitude\"]))\nairbnb[\"coordinate\"]=airbnb[\"coordinate\"].apply(Point)\nairbnb_gpd=gpd.GeoDataFrame(airbnb,geometry=\"coordinate\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\nairbnb_gpd.head()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n\n\n\n\n\n\n\n\n# ==&gt; Clean the airbnb_gpd data\nimport seaborn as sns\nimport statsmodels\nimport statsmodels.api as sm\nimport scipy.stats as stats\n\nfig, axes = plt.subplots(1,3, figsize=(21,6))\n# \nchart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#990000\")\nchart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#990000\")\naxes[1].set_xlabel('log(1+price)')\nsm.qqplot(np.log1p(airbnb_gpd['price']), stats.norm, fit=True, line='45',color=\"#990000\",alpha=0.5,ax=axes[2])\n\nfigure = chart.get_figure() \nfigure.savefig(\"./diagram/price_histogram.png\",bbox_inches='tight')\n\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_1960/2470584149.py:9: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  chart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#990000\")\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_1960/2470584149.py:10: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  chart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#990000\")\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/statsmodels/graphics/gofplots.py:1045: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"b\" (-&gt; color=(0.0, 0.0, 1.0, 1)). The keyword argument will take precedence.\n  ax.plot(x, y, fmt, **plot_style)\n\n\n\n\n\n\nairbnb_gpd = airbnb_gpd [(np.log1p(airbnb_gpd ['price']) &lt; 8) & (np.log1p(airbnb_gpd ['price']) &gt;3)]\nairbnb_gpd=airbnb_gpd.dropna()\n\n\nlen(airbnb_gpd)\n\n5054\n\n\n\nimport contextily as ctx\n\n# create the axes\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# plot a random sample of potholes\nairbnb_gpd.plot(ax=ax, \n                marker='.', \n                column=\"price\" ,\n                cmap=\"GnBu\",\n                alpha=0.5,\n                legend=True,\n                legend_kwds=dict(loc='upper left'),\n                scheme=\"Quantiles\",\n                k=5) \n\n# add the Neighbor boundary\nnhood.plot(ax=ax, edgecolor='white', linewidth=0.5, facecolor='none')\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\n\n#CartoDB.Positron\n# remove axis lines\nax.set_title(\"Price Distribution of Airbnb in SF (Quantiles: k = 5)\",fontsize=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_points',bbox_inches='tight')\n\n\n\n\n\n# spatial join\nairbnb_nhood=gpd.sjoin(airbnb_gpd,nhood,op=\"within\",how=\"right\")\nairbnb_nhood.reset_index().head()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/IPython/core/interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nindex\nindex_left\nid\nnhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\nneighbourhood\ngeometry\n\n\n\n\n0\n0\n518.0\n2.254431e+06\nSeacliff\n100.0\n98.0\nt\n37.77641\n-122.50991\n535.0\n8.0\nf\nEntire home/apt\n4.0\n51.0\n0.0\n4.90\n0.45\n2.0\n1.0\n1125.0\n2014.0\n211.0\n66.875000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n1\n0\n1048.0\n8.352275e+06\nSeacliff\n100.0\n98.0\nt\n37.78006\n-122.50905\n134.0\n2.0\nt\nPrivate room\n1.0\n718.0\n5.0\n4.94\n7.41\n2.0\n1.0\n1125.0\n2014.0\n112.0\n67.000000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n2\n0\n6146.0\n7.689811e+17\nSeacliff\n100.0\n100.0\nt\n37.78247\n-122.49269\n107.0\n3.0\nf\nEntire home/apt\n2.0\n45.0\n5.0\n4.93\n5.23\n1.0\n1.0\n28.0\n2022.0\n122.0\n35.666667\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n3\n0\n1844.0\n1.958800e+07\nSeacliff\n100.0\n100.0\nt\n37.78449\n-122.48855\n429.0\n5.0\nf\nEntire home/apt\n3.0\n24.0\n0.0\n4.96\n0.34\n18.0\n3.0\n21.0\n2011.0\n138.0\n85.800000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n4\n0\n1610.0\n1.657052e+07\nSeacliff\n100.0\n100.0\nt\n37.78732\n-122.49336\n154.0\n2.0\nf\nPrivate room\n1.0\n148.0\n3.0\n4.88\n1.86\n1.0\n2.0\n14.0\n2014.0\n108.0\n77.000000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n\n\n\n\n\n\n# calculate the airbnb count by neighborhood\ngroup=airbnb.groupby([\"neighbourhood\"])[\"price\"].mean()\ngroup=pd.DataFrame(group).reset_index()\n\ngroup=nhood.merge(group,on=\"neighbourhood\")\ngroup=group.rename(columns={0:\"count\"})\n\n\n# Needed to line up the colorbar properly\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Create the figure\nfig, ax = plt.subplots(figsize=(10, 10),facecolor=\"white\")\n\n# Plot\ngroup.plot( ax=ax,\n    column=\"price\",\n    edgecolor=\"white\",\n    legend=True,\n    legend_kwds=dict(loc='upper left'),\n    cmap=\"GnBu\",\n    scheme=\"Quantiles\",\n    k=5)\n\n# Get the limits of the GeoDataFrame\nxmin, ymin, xmax, ymax = group.total_bounds\n\n# plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, SF (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_average_nhood',bbox_inches='tight')\n\n\n\n\n\n# Plot two columns\nfig, axs = plt.subplots(ncols=2, figsize=(20,10), facecolor=\"white\")\n\n# Predicted values\nairbnb_gpd.plot(ax=axs[0], \n                column='price', \n                marker='.',\n                cmap=\"GnBu\",\n                alpha=0.5,\n                legend=True,\n                legend_kwds=dict(loc='upper left'),\n                scheme=\"Quantiles\",\n                k=5)\nnhood.plot(ax=axs[0], edgecolor='white', linewidth=0.5, facecolor='none')\nctx.add_basemap(ax=axs[0], crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[0].set_title(\"Airbnb Price Distribution by Points in SF \",size=12)\n\n\n# Actual values\ngroup.plot(ax=axs[1],\n           column=\"price\",\n           edgecolor=\"white\",\n           alpha=0.8,\n           legend=True,\n           legend_kwds=dict(loc='upper left'),\n           cmap=\"GnBu\",\n           scheme=\"Quantiles\",\n           k=5)\nnhood.plot(ax=axs[1], edgecolor='white', linewidth=0.5, facecolor='none')\nctx.add_basemap(ax=axs[1], crs=group.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[1].set_title(\"Airbnb Average Price Distribution by Neighborhood in SF\",size=12)\n\n\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, SF (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_average_nhood',bbox_inches='tight')\n\n\n\n\n\nairbnb_gpd\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.770280\n-122.433170\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n370.25\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.744740\n-122.420890\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n104.75\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.765550\n-122.452130\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n79.75\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.775640\n-122.436420\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n222.00\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.760300\n-122.421970\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n167.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n7316\n954536562110561560\nOuter Richmond\n100.0\n100.0\nt\n37.775050\n-122.504760\n156\n2\nt\nEntire home/apt\n1.0\n1\n1\n5.00\n1.00\n2\n2\n365\n2022\n126\n78.000000\n1\nPOINT (-13637167.503 4547696.480)\n2.752892\n2.585617\n2.806563\n2.993813\n2.780875\n2.818899\n179.75\n\n\n7325\n956723436929813205\nWest of Twin Peaks\n100.0\n100.0\nt\n37.739010\n-122.459720\n85\n2\nf\nPrivate room\n1.0\n2\n2\n5.00\n2.00\n1\n1\n365\n2013\n121\n42.500000\n1\nPOINT (-13632153.673 4542622.003)\n3.034106\n2.961032\n2.807492\n2.937599\n2.885993\n2.931688\n217.50\n\n\n7335\n958209683596711862\nWestern Addition\n96.0\n100.0\nt\n37.775320\n-122.426232\n349\n8\nf\nEntire home/apt\n4.0\n1\n1\n5.00\n1.00\n1\n2\n29\n2023\n123\n43.625000\n1\nPOINT (-13628425.786 4547734.488)\n2.325797\n2.315855\n2.334511\n2.415255\n2.192144\n2.163095\n277.00\n\n\n7361\n963333324421869755\nParkside\n100.0\n96.0\nt\n37.744915\n-122.470770\n292\n6\nf\nEntire home/apt\n3.0\n1\n1\n5.00\n1.00\n2\n2\n29\n2014\n113\n48.666667\n1\nPOINT (-13633383.793 4543453.325)\n2.934890\n2.919877\n2.865255\n2.899035\n2.871728\n2.872753\n195.25\n\n\n7366\n964458312280841640\nFinancial District\n100.0\n97.0\nt\n37.788338\n-122.393760\n315\n4\nf\nEntire home/apt\n1.0\n1\n1\n5.00\n1.00\n1\n2\n365\n2023\n112\n78.750000\n1\nPOINT (-13624811.028 4549568.113)\n2.644253\n1.843581\n2.715202\n2.947282\n2.466224\n2.395720\n182.00\n\n\n\n\n5153 rows × 31 columns"
  },
  {
    "objectID": "analysis/Fairbnb.html#feature-engineering",
    "href": "analysis/Fairbnb.html#feature-engineering",
    "title": "Fairbnb",
    "section": "2.2 Feature Engineering",
    "text": "2.2 Feature Engineering\n\n2.2.1 Current Feature Investigation\n\n# ==&gt; Firstly, we investigate distribution of each feature\n\nimport missingno as msno\nmsno.bar(airbnb_gpd[airbnb.columns])\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n2.2.2 Feature Collect\nData Source: https://www.sf.gov/departments/city-administrator/datasf\nAdd the following XX datasets: - Crime - 311 - Civic Art Collection - Recreation and Parks Properties - Bicycle Parking - Restaurant\n\nimport requests\n\n\n# ==&gt; 1.0 Add Crime data\n# Get data during URL\nurl_crime = \"https://data.sfgov.org/resource/tmnf-yvry.json?$query=SELECT%20pdid%2C%20incidntnum%2C%20incident_code%2C%20category%2C%20descript%2C%20dayofweek%2C%20date%2C%20time%2C%20pddistrict%2C%20resolution%2C%20address%2C%20x%2C%20y%2C%20location%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_crime)\ndata = response.json()\ncrime = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['y', 'x']\nnew_cols = ['Latitude', 'Longitude']\ncrime = crime[old_cols].copy()\ncrime.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\ncrime[[\"Latitude\",\"Longitude\"]] = crime[[\"Latitude\",\"Longitude\"]].astype(float)\ncrime[\"geometry\"]=list(zip(crime[\"Longitude\"],crime[\"Latitude\"]))\ncrime[\"geometry\"]=crime[\"geometry\"].apply(Point)\ncrime=gpd.GeoDataFrame(crime,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 2.0 Add 311 data\n# Get data during URL\nurl_311 = \"https://data.sfgov.org/resource/vw6y-z8j6.json?$query=SELECT%20service_request_id%2C%20requested_datetime%2C%20closed_date%2C%20updated_datetime%2C%20status_description%2C%20status_notes%2C%20agency_responsible%2C%20service_name%2C%20service_subtype%2C%20service_details%2C%20address%2C%20street%2C%20supervisor_district%2C%20neighborhoods_sffind_boundaries%2C%20police_district%2C%20lat%2C%20long%2C%20point%2C%20source%2C%20media_url%2C%20bos_2012%20ORDER%20BY%20service_request_id%20DESC\"\nresponse = requests.get(url_311)\ndata = response.json()\ndata_311 = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['lat', 'long']\nnew_cols = ['Latitude', 'Longitude']\ndata_311 = data_311[old_cols].copy()\ndata_311.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\ndata_311[[\"Latitude\",\"Longitude\"]] = data_311[[\"Latitude\",\"Longitude\"]].astype(float)\ndata_311[\"geometry\"]=list(zip(data_311[\"Longitude\"],data_311[\"Latitude\"]))\ndata_311[\"geometry\"]=data_311[\"geometry\"].apply(Point)\ndata_311=gpd.GeoDataFrame(data_311,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 3.0 Add Civic Art Collection data\n# Get data during URL\nurl_art = \"https://data.sfgov.org/resource/r7bn-7v9c.json?$query=SELECT%20creation_date%2C%20accession_number%2C%20artist%2C%20credit_line%2C%20display_title%2C%20display_dimensions%2C%20medium%2C%20media_support%2C%20facility%2C%20current_location%2C%20location_description%2C%20street_address_or_intersection%2C%20zip_code%2C%20latitude%2C%20longitude%2C%20number_of_districts%2C%20cultural_districts%2C%20supervisor_district%2C%20the_geom%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_art)\ndata = response.json()\nart = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['latitude', 'longitude']\nnew_cols = ['Latitude', 'Longitude']\nart = art[old_cols].copy()\nart.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nart[[\"Latitude\",\"Longitude\"]] = art[[\"Latitude\",\"Longitude\"]].astype(float)\nart[\"geometry\"]=list(zip(art[\"Longitude\"],art[\"Latitude\"]))\nart[\"geometry\"]=art[\"geometry\"].apply(Point)\nart=gpd.GeoDataFrame(art,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 4.0 Add Recreation and Parks Properties data\n# Get data during URL\nurl_park = \"https://data.sfgov.org/resource/gtr9-ntp6.json\"\nresponse = requests.get(url_park)\ndata = response.json()\npark = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['latitude', 'longitude']\nnew_cols = ['Latitude', 'Longitude']\npark = park[old_cols].copy()\npark.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\npark[[\"Latitude\",\"Longitude\"]] = park[[\"Latitude\",\"Longitude\"]].astype(float)\npark[\"geometry\"]=list(zip(park[\"Longitude\"],park[\"Latitude\"]))\npark[\"geometry\"]=park[\"geometry\"].apply(Point)\npark=gpd.GeoDataFrame(park,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 5.0 Add Bicycle Parking data\n# Get data during URL\nurl_bike = \"https://data.sfgov.org/resource/hn4j-6fx5.json?$query=SELECT%20objectid%2C%20address%2C%20location%2C%20street%2C%20placement%2C%20racks%2C%20spaces%2C%20globalid%2C%20install_yr%2C%20install_mo%2C%20lat%2C%20lon%2C%20shape%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_bike)\ndata = response.json()\nbike = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['lat', 'lon']\nnew_cols = ['Latitude', 'Longitude']\nbike = bike[old_cols].copy()\nbike.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nbike[[\"Latitude\",\"Longitude\"]] = bike[[\"Latitude\",\"Longitude\"]].astype(float)\nbike[\"geometry\"]=list(zip(bike[\"Longitude\"],bike[\"Latitude\"]))\nbike[\"geometry\"]=bike[\"geometry\"].apply(Point)\nbike=gpd.GeoDataFrame(bike,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 6.0 Add Restaurant data\n# Get data during URL\nurl_school = \"https://data.sfgov.org/resource/pyih-qa8i.json\"\nresponse = requests.get(url_school)\ndata = response.json()\nresta = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['business_latitude', 'business_longitude']\nnew_cols = ['Latitude', 'Longitude']\nresta = resta[old_cols].copy()\nresta.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nresta[[\"Latitude\",\"Longitude\"]] = resta[[\"Latitude\",\"Longitude\"]].astype(float)\nresta[\"geometry\"]=list(zip(resta[\"Longitude\"],resta[\"Latitude\"]))\nresta[\"geometry\"]=resta[\"geometry\"].apply(Point)\nresta=gpd.GeoDataFrame(resta,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\n90.000000\n-120.500000\nPOINT (-13413998.641 242528680.944)\n\n\n1\n37.770767\n-122.421595\nPOINT (-13627909.564 4547093.357)\n\n\n2\n37.769868\n-122.422367\nPOINT (-13627995.602 4546966.729)\n\n\n3\n37.745745\n-122.452717\nPOINT (-13631374.069 4543570.132)\n\n\n4\n37.712164\n-122.448127\nPOINT (-13630863.178 4538843.604)\n\n\n\n\n\n\n\n\n\n2.2.3 Feature Add\n\nfrom sklearn.neighbors import NearestNeighbors\n\n# define a function to extract x/y from dataset\ndef get_xy_from_geometry(df):\n    \"\"\"\n    Return a numpy array with two columns, where the \n    first holds the `x` geometry coordinate and the second \n    column holds the `y` geometry coordinate\n    \"\"\"\n    x = df.geometry.x\n    y = df.geometry.y\n    \n    return np.column_stack((x, y)) \n\n# Extract x/y from airbnb\nairbnbXY=get_xy_from_geometry(airbnb_gpd)\n\n\n# ==&gt; 1.0 KNN method of six features via the following 6 steps\n# Step1: Extract x/y from crime\n# Step2: Initialize the algorithm\n# Step3: Fit the algorithm on the \"neighbors\" dataset\n# Step4: Get distances for airbnb to \n# Step5: Average distance to neighbors\n# Step6: Set zero distances to be small, but nonzero\n\n# 1.1 KNN of crime\ncrimeXY=get_xy_from_geometry(crime) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(crimeXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_crime = criDists.mean(axis=1)\navgCriDist_crime[avgCriDist_crime==0] = 1e-5 \n\n# 1.2 KNN of 311\ndata_311XY=get_xy_from_geometry(data_311) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(data_311XY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_311 = criDists.mean(axis=1)\navgCriDist_311[avgCriDist_311==0] = 1e-5 \n\n# 1.3 KNN of art\nartXY=get_xy_from_geometry(art) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(artXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_art = criDists.mean(axis=1)\navgCriDist_art[avgCriDist_art==0] = 1e-5 \n\n# 1.4 KNN of park\nparkXY=get_xy_from_geometry(park) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(parkXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_park = criDists.mean(axis=1)\navgCriDist_park[avgCriDist_park==0] = 1e-5\n\n# 1.5 KNN of bike\nbikeXY=get_xy_from_geometry(bike) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(bikeXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_bike = criDists.mean(axis=1)\navgCriDist_bike[avgCriDist_bike==0] = 1e-5\n\n# 1.6 KNN of resta\nrestaXY=get_xy_from_geometry(resta) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(restaXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_resta = criDists.mean(axis=1)\navgCriDist_resta[avgCriDist_resta==0] = 1e-5\n\n\n# ==&gt; 2.0 Calculate log of distances of six features\nairbnb_gpd['log_crime'] = np.log10(avgCriDist_crime)\nairbnb_gpd['log_311'] = np.log10(avgCriDist_311)\nairbnb_gpd['log_art'] = np.log10(avgCriDist_art)\nairbnb_gpd['log_park'] = np.log10(avgCriDist_park)\nairbnb_gpd['log_bike'] = np.log10(avgCriDist_bike)\nairbnb_gpd['log_resta'] = np.log10(avgCriDist_resta)\n\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n\n\n\n\n\n\n\n\n# ==&gt; 3.0 Plot all six features in the same figure\nfig, axs = plt.subplots(ncols=2,nrows=3, figsize=(20,25))\nimport matplotlib.colors as mcolors\ncolors = [(0.0, \"red\"), (0.5, \"blue\"), (1.0, \"yellow\")]\ncustom_cmap = mcolors.LinearSegmentedColormap.from_list(\"custom_colormap\", colors, N=256)\n\n\n# 3.1 log_crime\nax=axs[0][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_crime'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_crime',size=18)\nax.set_axis_off()\n\n# 3.2 log_311\nax=axs[0][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_311'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_311',size=18)\nax.set_axis_off()\n\n# 3.3 log_art\nax=axs[1][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_art'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_art',size=18)\nax.set_axis_off()\n\n# 3.4 log_park\nax=axs[1][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_park'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_park',size=18)\nax.set_axis_off()\n\n# 3.5 log_bike\nax=axs[2][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_bike'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_bike',size=18)\nax.set_axis_off()\n\n# 3.6 log_resta\nax=axs[2][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_resta'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_resta',size=18)\nax.set_axis_off()\n\nplt.savefig('./diagram/features_collected',bbox_inches='tight')\n\n\n\n\n\n# ==&gt; 4.0 Add the lagged sales variable\n\nnbrs = NearestNeighbors(n_neighbors=5)\nnbrs.fit(airbnbXY)\npriceDists, priceIndices = nbrs.kneighbors(airbnbXY)\n\n# the sales for the stations from original data frame\nprice = airbnb_gpd['price'].values\n\n# get the trips for the 5 nearest neighbors (ignoring first match)\nneighboring_price =  price[priceIndices[:,1:]]\n\n# add to features\nairbnb_gpd['LaggedPrice'] = neighboring_price.mean(axis=1)\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n370.25\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n104.75\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n79.75\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n222.00\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n167.00"
  },
  {
    "objectID": "analysis/Fairbnb.html#correlation-analysis",
    "href": "analysis/Fairbnb.html#correlation-analysis",
    "title": "Fairbnb",
    "section": "2.3 Correlation Analysis",
    "text": "2.3 Correlation Analysis\n\nimport seaborn as sns\nvalue = bool(True)\n\nfeature_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'price_per_person'\n     ]\n\n# Initialize the figure and axes\nfx, ax = plt.subplots(figsize=(15, 8))\n\n# Compute the correlation matrix\ncorr = airbnb_gpd[feature_cols].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=bool)  # Use bool directly instead of np.bool\nmask[np.triu_indices_from(mask)] = True\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(10, 230, as_cmap=True)\n\nheatmap = sns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, linewidths=.5, cbar_kws={\"shrink\": .5})\nfigure = heatmap.get_figure() \nfigure.savefig(\"./diagram/correlation.png\", bbox_inches='tight')"
  },
  {
    "objectID": "analysis/Fairbnb.html#model-building",
    "href": "analysis/Fairbnb.html#model-building",
    "title": "Fairbnb",
    "section": "2.4 Model Building",
    "text": "2.4 Model Building\n\ncols_price=[\n     'host_year',  \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'host_identity_verified',\n     'instant_bookable',\n     'neighbourhood',\n     'room_type',\n     'coordinate'\n     ]\n\nprice=airbnb_gpd[cols_price].dropna()\n\n\n# Use a 70/30% training/test split\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\ntrain_set, test_set = train_test_split(price, test_size=0.3, random_state=42)\n\n# the target labels\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Set up a pipeline that includes both numerical columns and categorical columns\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# Numerical columns\nnum_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice'\n]\n# Categorical columns\ncat_cols = [ 'host_identity_verified',\n             'instant_bookable',\n             'neighbourhood',\n             'room_type'\n           ]\n\n\n# Set up the column transformer with two transformers\n# Scale the numerical columns and one-hot \npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n#Initialize the pipeline\nregressor = make_pipeline(\n    preprocessor, RandomForestRegressor(n_estimators=10, random_state=42)\n)\n\n\n# Evaluate the score on the test set using the best_params_ \nregressor = make_pipeline(preprocessor, RandomForestRegressor(n_estimators=100,max_depth=13,random_state=42))\n\n# Fit the training set\nregressor.fit(train_set, y_train);\n\n#  the test score\nprint(f\"Testing Score = {regressor.score(test_set, y_test)}\")\n\nTesting Score = 0.34280431620306995"
  },
  {
    "objectID": "analysis/Fairbnb.html#predict",
    "href": "analysis/Fairbnb.html#predict",
    "title": "Fairbnb",
    "section": "2.6 Predict",
    "text": "2.6 Predict\n\nimport hvplot.pandas\n\ndef plot_feature_importances(regr, num_cols, preprocessor, top=20, **kwargs):\n    \"\"\"\n    Utility function to plot the feature importances from the input\n    random forest regressor\n    \"\"\"\n    # The one-hot step\n    ohe = preprocessor.named_transformers_[\"cat\"]\n\n    # One column for each category type!\n    ohe_cols = ohe.get_feature_names_out()\n\n    # Full list of columns is numerical + one-hot\n    features = num_cols + list(ohe_cols)\n\n    # The regressor\n    regressor = regr[\"randomforestregressor\"]\n\n    # Create the dataframe with importances\n    importance = pd.DataFrame(\n        {\"Feature\": features, \"Importance\": regressor.feature_importances_}\n    )\n\n    # Sort importance in descending order and get the top\n    importance = importance.sort_values(\"Importance\", ascending=False).iloc[:top]\n\n    # Plot\n    return importance.hvplot.barh(x=\"Feature\", y=\"Importance\",line_color=\"white\",color=\"#71c9ce\", flip_yaxis=True, **kwargs)\n\nimp=plot_feature_importances(regressor, num_cols, preprocessor, top=30, height=500)\nhvplot.save(imp, './diagram/importance_bar.html')\nimp\n\n\n\n\n\n  \n\n\n\n\n\n# Predictions for log of total trip counts\nlog_predictions = regressor.predict(test_set)\n\n# Convert the predicted test values from log\ntest_set['prediction'] = np.exp(log_predictions)\ntest_set['percent_error']=(test_set['prediction']-test_set['price'])/test_set['prediction']\ntest_set['abs_percent_error']=abs(test_set['percent_error'])\n\n\n# calculate the airbnb count by neighborhood\nabs_nei=test_set.groupby([\"neighbourhood\"])[\"abs_percent_error\"].mean()\nabs_nei=pd.DataFrame(abs_nei).reset_index()\n\nabs_nei=nhood.merge(abs_nei,on=\"neighbourhood\")\n\n\ntest_set\n\n\n\n\n\n\n\n\nhost_year\nhost_response_rate\naccommodates\nbeds\nnumber_of_reviews\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nlast_review_days\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\nprice\nhost_identity_verified\ninstant_bookable\nneighbourhood\nroom_type\ncoordinate\nprediction\npercent_error\nabs_percent_error\n\n\n\n\n5972\n2020\n100.0\n4\n2.0\n2\n5.00\n0.19\n14\n2\n340\n2.270763\n2.064503\n2.231732\n2.565864\n2.460853\n2.479059\n150.75\n131\nt\nf\nDowntown/Civic Center\nEntire home/apt\nPOINT (-13627872.325 4548347.160)\n215.618750\n0.392446\n0.392446\n\n\n620\n2014\n100.0\n6\n3.0\n39\n4.89\n0.35\n1\n2\n340\n2.829116\n2.932763\n2.940149\n2.848138\n3.032383\n3.220961\n353.50\n621\nt\nf\nTwin Peaks\nEntire home/apt\nPOINT (-13630795.575 4543836.893)\n72.403538\n-7.576929\n7.576929\n\n\n4261\n2020\n100.0\n2\n1.0\n13\n5.00\n0.43\n4\n30\n201\n2.572000\n2.459310\n2.951267\n2.838103\n2.635427\n2.576596\n231.50\n200\nt\nf\nPacific Heights\nEntire home/apt\nPOINT (-13629672.362 4549835.991)\n132.159749\n-0.513320\n0.513320\n\n\n3719\n2020\n100.0\n6\n3.0\n8\n5.00\n1.83\n2\n3\n121\n2.313734\n2.781310\n2.458128\n2.729949\n2.369446\n2.568670\n298.00\n675\nf\nf\nMission\nEntire home/apt\nPOINT (-13626655.603 4545177.236)\n343.257873\n-0.966452\n0.966452\n\n\n5336\n2017\n100.0\n6\n3.0\n1\n5.00\n0.06\n8\n30\n588\n2.772270\n3.272024\n3.248074\n3.079585\n3.237465\n3.353485\n100.00\n194\nt\nt\nBayview\nEntire home/apt\nPOINT (-13622344.200 4541276.358)\n63.277373\n-2.065867\n2.065867\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3944\n2012\n100.0\n1\n1.0\n7\n4.71\n0.24\n23\n30\n202\n2.472840\n2.399109\n2.745379\n2.608093\n2.462304\n2.346706\n136.50\n74\nt\nt\nWestern Addition\nPrivate room\nPOINT (-13628797.390 4547535.928)\n65.688293\n-0.126533\n0.126533\n\n\n1316\n2013\n100.0\n5\n5.0\n121\n4.88\n1.35\n7\n30\n256\n2.115881\n2.584117\n2.403650\n2.645915\n2.202797\n2.473800\n97.00\n500\nt\nf\nMission\nEntire home/apt\nPOINT (-13627127.598 4545440.539)\n219.570470\n-1.277173\n1.277173\n\n\n6262\n2022\n100.0\n8\n4.0\n2\n5.00\n0.28\n2\n30\n246\n2.668124\n2.671466\n2.704201\n2.753143\n2.675993\n2.598566\n258.75\n169\nt\nf\nCastro/Upper Market\nEntire home/apt\nPOINT (-13629693.780 4545162.509)\n224.136678\n0.245996\n0.245996\n\n\n3351\n2016\n100.0\n2\n1.0\n4\n4.75\n0.09\n48\n2\n234\n2.274353\n1.881382\n2.490948\n2.568636\n2.560734\n2.114605\n120.00\n95\nt\nt\nChinatown\nEntire home/apt\nPOINT (-13626337.230 4550081.099)\n96.565609\n0.016213\n0.016213\n\n\n2438\n2018\n100.0\n4\n2.0\n116\n4.81\n1.83\n3\n1\n114\n2.737564\n2.743015\n3.124985\n3.067772\n2.918207\n2.698198\n88.75\n139\nt\nt\nParkside\nEntire home/apt\nPOINT (-13635497.711 4543339.939)\n139.328114\n0.002355\n0.002355\n\n\n\n\n1546 rows × 26 columns\n\n\n\n\n# Plot two columns\nimport contextily as ctx\nfig, axs = plt.subplots(ncols=2, figsize=(20,10), facecolor=\"white\")\n\n\n# Predicted values\ntest_set.plot(ax=axs[0], column='percent_error', marker='.',cmap=\"GnBu\",alpha=0.5,\n            legend=True,legend_kwds=dict(loc='upper left'),scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[0], crs=test_set.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[0].set_title(\"Distribution of Percent Error\",size=25)\n\n\n# Actual values\nabs_nei.plot(ax=axs[1],column=\"abs_percent_error\",edgecolor=\"white\",alpha=0.8,\n              legend=True,legend_kwds=dict(loc='upper left'),cmap=\"YlGnBu\",scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[1], crs=test_set.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[1].set_title(\"Mean Absolute Percent Error by Neighbourhood\",size=25)\n\n\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\nplt.savefig('./diagram/model_validation.png',bbox_inches='tight')"
  },
  {
    "objectID": "analysis/MUSA620_final project code.html#part-1.-explorary-analysis-of-new-york-airbnb",
    "href": "analysis/MUSA620_final project code.html#part-1.-explorary-analysis-of-new-york-airbnb",
    "title": "Hospitality in Era of Airbnb",
    "section": "Part 1. Explorary Analysis of New York Airbnb",
    "text": "Part 1. Explorary Analysis of New York Airbnb\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\n\n\n1.1 Data Collection\n\n# load the airbnb data\npd.set_option('display.max_columns', None)\nairbnb_ori=pd.read_csv(\"./data/listings_detail.csv\",low_memory=False)\nairbnb_ori.head()\n\n\n\n\n\n\n\n\nid\nlisting_url\nscrape_id\nlast_scraped\nname\nsummary\nspace\ndescription\nexperiences_offered\nneighborhood_overview\nnotes\ntransit\naccess\ninteraction\nhouse_rules\nthumbnail_url\nmedium_url\npicture_url\nxl_picture_url\nhost_id\nhost_url\nhost_name\nhost_since\nhost_location\nhost_about\nhost_response_time\nhost_response_rate\nhost_acceptance_rate\nhost_is_superhost\nhost_thumbnail_url\nhost_picture_url\nhost_neighbourhood\nhost_listings_count\nhost_total_listings_count\nhost_verifications\nhost_has_profile_pic\nhost_identity_verified\nstreet\nneighbourhood\nneighbourhood_cleansed\nneighbourhood_group_cleansed\ncity\nstate\nzipcode\nmarket\nsmart_location\ncountry_code\ncountry\nlatitude\nlongitude\nis_location_exact\nproperty_type\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nbed_type\namenities\nsquare_feet\nprice\nweekly_price\nmonthly_price\nsecurity_deposit\ncleaning_fee\nguests_included\nextra_people\nminimum_nights\nmaximum_nights\nminimum_minimum_nights\nmaximum_minimum_nights\nminimum_maximum_nights\nmaximum_maximum_nights\nminimum_nights_avg_ntm\nmaximum_nights_avg_ntm\ncalendar_updated\nhas_availability\navailability_30\navailability_60\navailability_90\navailability_365\ncalendar_last_scraped\nnumber_of_reviews\nnumber_of_reviews_ltm\nfirst_review\nlast_review\nreview_scores_rating\nreview_scores_accuracy\nreview_scores_cleanliness\nreview_scores_checkin\nreview_scores_communication\nreview_scores_location\nreview_scores_value\nrequires_license\nlicense\njurisdiction_names\ninstant_bookable\nis_business_travel_ready\ncancellation_policy\nrequire_guest_profile_picture\nrequire_guest_phone_verification\ncalculated_host_listings_count\ncalculated_host_listings_count_entire_homes\ncalculated_host_listings_count_private_rooms\ncalculated_host_listings_count_shared_rooms\nreviews_per_month\n\n\n\n\n0\n3647\nhttps://www.airbnb.com/rooms/3647\n20190912153101\n2019-09-13\nTHE VILLAGE OF HARLEM....NEW YORK !\nNaN\nWELCOME TO OUR INTERNATIONAL URBAN COMMUNITY T...\nWELCOME TO OUR INTERNATIONAL URBAN COMMUNITY T...\nnone\nNaN\nNaN\nNaN\nNaN\nNaN\nUpon arrival please have a legibile copy of yo...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/838341/9b3...\nNaN\n4632\nhttps://www.airbnb.com/users/show/4632\nElisabeth\n2008-11-25\nNew York, New York, United States\nMake Up Artist National/ (Website hidden by Ai...\na few days or more\n0%\nNaN\nf\nhttps://a0.muscache.com/im/users/4632/profile_...\nhttps://a0.muscache.com/im/users/4632/profile_...\nHarlem\n1.0\n1.0\n['email', 'phone', 'google', 'reviews', 'jumio...\nt\nt\nNew York, NY, United States\nHarlem\nHarlem\nManhattan\nNew York\nNY\n10027\nNew York\nNew York, NY\nUS\nUnited States\n40.80902\n-73.94190\nt\nApartment\nPrivate room\n2\n1.0\n1.0\n1.0\nPull-out Sofa\n{\"Cable TV\",Internet,Wifi,\"Air conditioning\",K...\nNaN\n$150.00\nNaN\nNaN\n$200.00\n$75.00\n2\n$20.00\n3\n7\n3\n3\n7\n7\n3.0\n7.0\n37 months ago\nt\n30\n60\n90\n365\n2019-09-13\n0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nf\nNaN\nNaN\nf\nf\nstrict_14_with_grace_period\nt\nt\n1\n0\n1\n0\nNaN\n\n\n1\n3831\nhttps://www.airbnb.com/rooms/3831\n20190912153101\n2019-09-13\nCozy Entire Floor of Brownstone\nUrban retreat: enjoy 500 s.f. floor in 1899 br...\nGreetings! We own a double-duplex brownst...\nUrban retreat: enjoy 500 s.f. floor in 1899 br...\nnone\nJust the right mix of urban center and local n...\nNaN\nB52 bus for a 10-minute ride to downtown Brook...\nYou will have exclusive use of and access to: ...\nWe'll be around, but since you have the top fl...\nSmoking - outside please; pets allowed but ple...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/e49999c2-9...\nNaN\n4869\nhttps://www.airbnb.com/users/show/4869\nLisaRoxanne\n2008-12-07\nNew York, New York, United States\nLaid-back bi-coastal actor/professor/attorney.\nwithin an hour\n92%\nNaN\nf\nhttps://a0.muscache.com/im/users/4869/profile_...\nhttps://a0.muscache.com/im/users/4869/profile_...\nClinton Hill\n1.0\n1.0\n['email', 'phone', 'reviews', 'kba']\nt\nt\nBrooklyn, NY, United States\nBrooklyn\nClinton Hill\nBrooklyn\nBrooklyn\nNY\n11238\nNew York\nBrooklyn, NY\nUS\nUnited States\n40.68514\n-73.95976\nt\nGuest suite\nEntire home/apt\n3\n1.0\n1.0\n4.0\nReal Bed\n{TV,\"Cable TV\",Internet,Wifi,\"Air conditioning...\n500.0\n$89.00\n$575.00\n$2,100.00\n$500.00\nNaN\n1\n$0.00\n1\n730\n1\n1\n730\n730\n1.0\n730.0\n3 days ago\nt\n1\n3\n8\n192\n2019-09-13\n279\n67\n2014-09-30\n2019-08-29\n90.0\n9.0\n9.0\n10.0\n9.0\n10.0\n9.0\nf\nNaN\nNaN\nf\nf\nmoderate\nf\nf\n1\n1\n0\n0\n4.62\n\n\n2\n5022\nhttps://www.airbnb.com/rooms/5022\n20190912153101\n2019-09-13\nEntire Apt: Spacious Studio/Loft by central park\nNaN\nLoft apartment with high ceiling and wood floo...\nLoft apartment with high ceiling and wood floo...\nnone\nNaN\nNaN\nNaN\nNaN\nNaN\nPlease be considerate when staying in the apar...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/feb453bd-f...\nNaN\n7192\nhttps://www.airbnb.com/users/show/7192\nLaura\n2009-01-29\nMiami, Florida, United States\nI have been a NYer for almost 10 years. I came...\nNaN\nNaN\nNaN\nf\nhttps://a0.muscache.com/im/users/7192/profile_...\nhttps://a0.muscache.com/im/users/7192/profile_...\nEast Harlem\n1.0\n1.0\n['email', 'phone', 'facebook', 'reviews', 'kba']\nt\nt\nNew York, NY, United States\nEast Harlem\nEast Harlem\nManhattan\nNew York\nNY\n10029\nNew York\nNew York, NY\nUS\nUnited States\n40.79851\n-73.94399\nt\nApartment\nEntire home/apt\n1\n1.0\nNaN\n1.0\nReal Bed\n{Internet,Wifi,\"Air conditioning\",Kitchen,Elev...\nNaN\n$80.00\n$600.00\n$1,600.00\n$100.00\n$80.00\n1\n$20.00\n10\n120\n10\n10\n120\n120\n10.0\n120.0\n6 months ago\nt\n0\n0\n0\n0\n2019-09-13\n9\n2\n2012-03-20\n2018-11-19\n93.0\n10.0\n9.0\n10.0\n10.0\n9.0\n10.0\nf\nNaN\nNaN\nf\nf\nstrict_14_with_grace_period\nt\nt\n1\n1\n0\n0\n0.10\n\n\n3\n5099\nhttps://www.airbnb.com/rooms/5099\n20190912153101\n2019-09-13\nLarge Cozy 1 BR Apartment In Midtown East\nMy large 1 bedroom apartment has a true New Yo...\nI have a large 1 bedroom apartment centrally l...\nMy large 1 bedroom apartment has a true New Yo...\nnone\nMy neighborhood in Midtown East is called Murr...\nRead My Full Listing For All Information. New ...\nFrom the apartment is a 10 minute walk to Gran...\nI will meet you upon arrival.\nI usually check in with guests via text or ema...\n• Check-in time is 2PM. • Check-out time is 12...\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/6b9804f2-1...\nNaN\n7322\nhttps://www.airbnb.com/users/show/7322\nChris\n2009-02-02\nNew York, New York, United States\nI'm an artist, writer, traveler, and a native ...\nwithin a day\n78%\nNaN\nf\nhttps://a0.muscache.com/im/pictures/user/26745...\nhttps://a0.muscache.com/im/pictures/user/26745...\nFlatiron District\n1.0\n1.0\n['email', 'phone', 'reviews', 'jumio', 'govern...\nt\nf\nNew York, NY, United States\nMidtown East\nMurray Hill\nManhattan\nNew York\nNY\n10016\nNew York\nNew York, NY\nUS\nUnited States\n40.74767\n-73.97500\nf\nApartment\nEntire home/apt\n2\n1.0\n1.0\n1.0\nReal Bed\n{TV,\"Cable TV\",Internet,Wifi,Kitchen,\"Buzzer/w...\nNaN\n$200.00\nNaN\nNaN\n$300.00\n$125.00\n2\n$100.00\n3\n21\n3\n3\n21\n21\n3.0\n21.0\ntoday\nt\n3\n3\n13\n13\n2019-09-13\n75\n10\n2009-04-20\n2019-07-21\n89.0\n10.0\n9.0\n10.0\n10.0\n9.0\n9.0\nf\nNaN\nNaN\nf\nf\nmoderate\nt\nt\n1\n1\n0\n0\n0.59\n\n\n4\n5121\nhttps://www.airbnb.com/rooms/5121\n20190912153101\n2019-09-13\nBlissArtsSpace!\nNaN\nHELLO EVERYONE AND THANKS FOR VISITING BLISS A...\nHELLO EVERYONE AND THANKS FOR VISITING BLISS A...\nnone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nhttps://a0.muscache.com/im/pictures/2090980c-b...\nNaN\n7356\nhttps://www.airbnb.com/users/show/7356\nGaron\n2009-02-03\nNew York, New York, United States\nI am an artist(painter, filmmaker) and curato...\na few days or more\n0%\nNaN\nf\nhttps://a0.muscache.com/im/pictures/72a61bea-c...\nhttps://a0.muscache.com/im/pictures/72a61bea-c...\nBedford-Stuyvesant\n1.0\n1.0\n['email', 'phone', 'facebook', 'reviews', 'off...\nt\nf\nBrooklyn, NY, United States\nBedford-Stuyvesant\nBedford-Stuyvesant\nBrooklyn\nBrooklyn\nNY\n11216\nNew York\nBrooklyn, NY\nUS\nUnited States\n40.68688\n-73.95596\nf\nApartment\nPrivate room\n2\nNaN\n1.0\n1.0\nFuton\n{Wifi,\"Air conditioning\",Kitchen,\"Pets live on...\nNaN\n$60.00\nNaN\nNaN\n$450.00\n$0.00\n1\n$30.00\n45\n730\n45\n45\n730\n730\n45.0\n730.0\n20 months ago\nt\n0\n0\n0\n0\n2019-09-13\n49\n0\n2009-05-28\n2017-10-05\n90.0\n8.0\n8.0\n10.0\n10.0\n9.0\n9.0\nf\nNaN\nNaN\nf\nf\nstrict_14_with_grace_period\nf\nf\n1\n0\n1\n0\n0.39\n\n\n\n\n\n\n\n\n# load the neighbourhood data\nimport json\nimport requests\n\nurl = 'http://data.insideairbnb.com/united-states/ny/new-york-city/2019-09-12/visualisations/neighbourhoods.geojson'\nneighbor = gpd.read_file(url).to_crs(epsg=3857)\nneighbor.head()\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\n\n\n\n\n0\nBayswater\nQueens\n(POLYGON ((-8211672.372056099 4955705.98588607...\n\n\n1\nAllerton\nBronx\n(POLYGON ((-8220788.21383767 4993431.405621486...\n\n\n2\nCity Island\nBronx\n(POLYGON ((-8213466.174330741 4989346.93912581...\n\n\n3\nDitmars Steinway\nQueens\n(POLYGON ((-8226688.814766658 4978147.90171474...\n\n\n4\nOzone Park\nQueens\n(POLYGON ((-8219557.799505931 4966923.95857947...\n\n\n\n\n\n\n\n\n\n1.2 Data Cleaning\n\n# filter the airbnb data\ncolumns=['id',\n 'name',\n 'description',\n 'host_id',\n 'host_since',\n 'host_response_rate',\n 'host_identity_verified',\n 'host_response_time',\n 'instant_bookable',\n 'neighbourhood_group_cleansed',\n 'neighbourhood_cleansed',\n 'latitude',\n 'longitude',\n 'room_type',\n 'accommodates',\n 'bathrooms',\n 'bedrooms',\n 'beds',\n 'price',\n 'guests_included',\n 'minimum_nights',\n 'availability_30',\n 'number_of_reviews',\n 'review_scores_rating',\n 'last_review',\n 'reviews_per_month',\n 'cancellation_policy']\n\nairbnb=pd.DataFrame(airbnb_ori, columns=columns)\nairbnb=airbnb.rename(columns={\"neighbourhood_group_cleansed\":\"neighbourhood_group\",\"neighbourhood_cleansed\":\"neighbourhood\"})\n\n# extract the year from host_since\nairbnb['host_year'] = pd.DatetimeIndex(airbnb['host_since']).year\n# extract the price from price\nairbnb['price'] = airbnb['price'].str.extract('(\\d+)', expand=False)\nairbnb['price'] = airbnb['price'].astype(int)\n# extract the host response rate from host_response_rate\nairbnb['host_response_rate']= airbnb['host_response_rate'].str.extract('(\\d+)', expand=False)\nairbnb['host_response_rate'] = airbnb['host_response_rate'].astype(float)\n# calculate price per person \nairbnb['price_per_person']=airbnb[\"price\"]/airbnb[\"accommodates\"]\n# add the count field\nairbnb[\"count\"]=1\n\n# delete the outlier\nairbnb=airbnb.dropna(subset=[\"latitude\",\"longitude\",\"price\",\"accommodates\",\"reviews_per_month\",\"host_year\"])\nairbnb=airbnb[(airbnb[\"reviews_per_month\"]&lt;30)&(airbnb[\"reviews_per_month\"]&gt;=0)]\n\n# convert the data type\nairbnb['reviews_per_month'] = airbnb['reviews_per_month'].astype(float)\nairbnb['accommodates'] = airbnb['accommodates'].astype(int)\nairbnb['host_year'] = airbnb['host_year'].astype(int)\n\nairbnb.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\n\n\n\n\n1\n3831\nCozy Entire Floor of Brownstone\nUrban retreat: enjoy 500 s.f. floor in 1899 br...\n4869\n2008-12-07\n92.0\nt\nwithin an hour\nf\nBrooklyn\nClinton Hill\n40.68514\n-73.95976\nEntire home/apt\n3\n1.0\n1.0\n4.0\n89\n1\n1\n1\n279\n90.0\n2019-08-29\n4.62\nmoderate\n2008\n29.666667\n1\n\n\n2\n5022\nEntire Apt: Spacious Studio/Loft by central park\nLoft apartment with high ceiling and wood floo...\n7192\n2009-01-29\nNaN\nt\nNaN\nf\nManhattan\nEast Harlem\n40.79851\n-73.94399\nEntire home/apt\n1\n1.0\nNaN\n1.0\n80\n1\n10\n0\n9\n93.0\n2018-11-19\n0.10\nstrict_14_with_grace_period\n2009\n80.000000\n1\n\n\n3\n5099\nLarge Cozy 1 BR Apartment In Midtown East\nMy large 1 bedroom apartment has a true New Yo...\n7322\n2009-02-02\n78.0\nf\nwithin a day\nf\nManhattan\nMurray Hill\n40.74767\n-73.97500\nEntire home/apt\n2\n1.0\n1.0\n1.0\n200\n2\n3\n3\n75\n89.0\n2019-07-21\n0.59\nmoderate\n2009\n100.000000\n1\n\n\n4\n5121\nBlissArtsSpace!\nHELLO EVERYONE AND THANKS FOR VISITING BLISS A...\n7356\n2009-02-03\n0.0\nf\na few days or more\nf\nBrooklyn\nBedford-Stuyvesant\n40.68688\n-73.95596\nPrivate room\n2\nNaN\n1.0\n1.0\n60\n1\n45\n0\n49\n90.0\n2017-10-05\n0.39\nstrict_14_with_grace_period\n2009\n30.000000\n1\n\n\n5\n5178\nLarge Furnished Room Near B'way\nPlease don’t expect the luxury here just a bas...\n8967\n2009-03-03\n90.0\nf\nwithin a few hours\nf\nManhattan\nHell's Kitchen\n40.76489\n-73.98493\nPrivate room\n2\n1.0\n1.0\n1.0\n79\n1\n2\n1\n443\n83.0\n2019-08-27\n3.51\nstrict_14_with_grace_period\n2009\n39.500000\n1\n\n\n\n\n\n\n\n\n\n1.3 Spatial distribution of New York Airbnb (visualize by folium)\n\n# define basemap in folium\nimport folium\nfrom folium.plugins import HeatMap\n\ndef generateBaseMap_black(default_location=[40.693943, -73.985880], default_zoom_start=10):\n    base_map = folium.Map(location=default_location, control_scale=True, zoom_start=default_zoom_start,tiles='Stamen TonerLite',attr=\"default\")\n    return base_map\n#cartodbpositron\n\n\n# plot the locations of Airbnb\nbase_map=generateBaseMap_black()\n\nair_point = folium.map.FeatureGroup()\nfor lat, lng, in zip(airbnb.latitude, airbnb.longitude):\n    air_point.add_child(\n        folium.CircleMarker(\n            [lat, lng],\n            radius=1, # define how big the circle markers to be\n            color=\"none\",\n            fill=True,\n            fill_color='#339999',\n            fill_opacity=0.4\n        )\n    )\n    \nfolium_overview=base_map.add_child(air_point)\nfolium_overview.save(\"./diagram/folium_overview.html\")\n\n\n# calculate the airbnb count by neighborhood\ncount_neighbor=airbnb.groupby([\"neighbourhood_group\",\"neighbourhood\"])[\"count\"].sum()\ncount_neighbor=pd.DataFrame(count_neighbor).reset_index()\ncount_neighbor.head()\n\n\n\n\n\n\n\n\nneighbourhood_group\nneighbourhood\ncount\n\n\n\n\n0\nBronx\nAllerton\n42\n\n\n1\nBronx\nBaychester\n7\n\n\n2\nBronx\nBelmont\n21\n\n\n3\nBronx\nBronxdale\n16\n\n\n4\nBronx\nCastle Hill\n2\n\n\n\n\n\n\n\n\n# visualize the airbnb count by neighbourhood\nbase_map=generateBaseMap_black()\n\nnei_geo=f'{url}'\nfolium.Choropleth(\n    geo_data=nei_geo,\n    data=count_neighbor,\n    columns=['neighbourhood','count'],\n    key_on='feature.properties.neighbourhood',\n    fill_color='GnBu',\n    fill_opacity=0.8,\n    line_color=\"#339999\",\n    line_opacity=1,\n    highlight=True,\n    legend_name='Airbnb Count by neighbourhood'\n).add_to(base_map)\n\nbase_map.save(\"./diagram/folium_countbyneighbor.html\")\n\n\n\n1.4 Exploratory analysis of New York airbnb dataset (visualize by seaborn)\n\nimport seaborn as sns\n\n\ngroup_year=airbnb.groupby([\"host_year\",\"room_type\"]).size()\ngroupyear=pd.DataFrame(group_year)\ngroupyear=groupyear.rename(columns={0:\"count\"})\ngroupyear=groupyear.reset_index()\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,6))\n\n# Set the gtid style and font size\nsns.set(style='whitegrid',font_scale=1.2)\n\n# Set the color map\ncolor_map = {\"Entire home/apt\": \"#abedd8\", \"Private room\": \"#3d84a8\", \"Shared room\":\"#61c0bf\", \"Hotel room\":\"#e0f9b5\"}\ncolors = [color_map[room_type] for room_type in airbnb[\"room_type\"]]\nstyle = dict(palette=color_map)\n\n# Plot the line\nax = sns.lineplot(x='host_year',y='count',hue=\"room_type\",markers=True,data=groupyear,**style)\n\n# Add a legend and informative axis label\nax.legend(ncol=1, loc=\"upper right\", frameon=True)\nax.set(ylabel=\"count\",xlabel=\"host_year\")\n# Add a title\nax.set_title(\"Airbnb Count in New York by host_year \")\nsns.despine(left=False, bottom=False)\n\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/line_count.png\",bbox_inches='tight')\n\n\n\n\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,6))\n# Set the gtid style and font size\nsns.set(style='whitegrid',font_scale=1.2)\n# Plot the histogram\nsns.distplot(airbnb[\"price\"],color=\"#11999E\")\n# Set the axis label\nax.set(ylabel=\"count\",xlabel=\"price\")\n# Add a title\nax.set_title(\"Distribution of airbnb price in New York \")\nsns.despine(left=False, bottom=False)\n\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/hist.png\",bbox_inches='tight')\n\n\n\n\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,6))\n# Set the gtid style and font sizeurl\nsns.set(style='whitegrid',font_scale=1.2)\n\nsns.boxplot(airbnb[\"neighbourhood_group\"],airbnb[\"price\"],data=airbnb,color=\"#71c9ce\",fliersize=1,linewidth=1,ax=ax)\n\nax.set(ylabel=\"price\",xlabel=\"neighbourhood group\")\n# Add a title\nax.set_title(\"Airbnb price in New York by neighbourhood group \")\nsns.despine(left=False, bottom=False)\n\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/box.png\",bbox_inches='tight')\n\n\n\n\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,6))\n\n# Set the gtid style and font size\nsns.set(style='whitegrid',font_scale=1.2)\n\n# Set the color map\ncolor_map = {\"Entire home/apt\": \"#abedd8\", \"Private room\": \"#3d84a8\", \"Shared room\":\"#61c0bf\", \"Hotel room\":\"#e0f9b5\"}\ncolors = [color_map[room_type] for room_type in airbnb[\"room_type\"]]\nstyle = dict(palette=color_map,edgecolor=\"none\", alpha=0.1)\n\n# plot the point\nsns.scatterplot(airbnb[\"reviews_per_month\"], airbnb[\"price\"], hue=\"room_type\",data=airbnb, ax=ax,**style)\n\n# Add a legend and informative axis label\nax.legend(ncol=1, loc=\"upper right\", frameon=True)\nax.set(ylabel=\"price\",xlabel=\"reviews_per_month\")\n# Add a title\nax.set_title(\"Relationship between Airbnb price and reviews_per_month\")\nsns.despine(left=False, bottom=False)\n\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/scatter_price_reviews.png\",bbox_inches='tight')"
  },
  {
    "objectID": "analysis/MUSA620_final project code.html#part-2-find-the-neighbourhood-with-cost-effective-airbnb-for-guests-in-new-york",
    "href": "analysis/MUSA620_final project code.html#part-2-find-the-neighbourhood-with-cost-effective-airbnb-for-guests-in-new-york",
    "title": "Hospitality in Era of Airbnb",
    "section": "Part 2 Find the Neighbourhood with Cost-Effective Airbnb for Guests in New York",
    "text": "Part 2 Find the Neighbourhood with Cost-Effective Airbnb for Guests in New York\nIn this part, we clustered neiborhoods by Airbnb stats, trying to find the most cost-effective neighbourhood for the Airbnb guests.\n\n# filter the clustering field\ncolumns=[\n 'neighbourhood_group',\n 'neighbourhood',\n 'price_per_person',\n 'reviews_per_month',\n 'review_scores_rating',\n 'count']\n\nairbnb_cluster=pd.DataFrame(airbnb,columns=columns)\nairbnb_cluster.head()\n\n\n\n\n\n\n\n\nneighbourhood_group\nneighbourhood\nprice_per_person\nreviews_per_month\nreview_scores_rating\ncount\n\n\n\n\n1\nBrooklyn\nClinton Hill\n29.666667\n4.62\n90.0\n1\n\n\n2\nManhattan\nEast Harlem\n80.000000\n0.10\n93.0\n1\n\n\n3\nManhattan\nMurray Hill\n100.000000\n0.59\n89.0\n1\n\n\n4\nBrooklyn\nBedford-Stuyvesant\n30.000000\n0.39\n90.0\n1\n\n\n5\nManhattan\nHell's Kitchen\n39.500000\n3.51\n83.0\n1\n\n\n\n\n\n\n\n\n# group by neighbourhood\ngroup_cluster1=airbnb_cluster.groupby([\"neighbourhood\"])[\"price_per_person\",\"review_scores_rating\",\"reviews_per_month\"].mean()\ngroup_cluster2=airbnb_cluster.groupby([\"neighbourhood\"])[\"count\"].sum()\ngroup_cluster2=pd.DataFrame(group_cluster2)\ngroup_cluster=pd.merge(group_cluster1,group_cluster2, on=\"neighbourhood\")\ngroup_cluster=group_cluster.dropna()\ngroup_cluster\n\n\n\n\n\n\n\n\nprice_per_person\nreview_scores_rating\nreviews_per_month\ncount\n\n\nneighbourhood\n\n\n\n\n\n\n\n\nAllerton\n31.197208\n93.707317\n1.817143\n42\n\n\nArden Heights\n22.712500\n90.250000\n1.065000\n4\n\n\nArrochar\n32.172588\n96.157895\n1.262105\n19\n\n\nArverne\n38.695532\n94.520548\n2.219315\n73\n\n\nAstoria\n43.092831\n94.777778\n1.334890\n724\n\n\n...\n...\n...\n...\n...\n\n\nWillowbrook\n37.375000\n97.000000\n0.890000\n1\n\n\nWindsor Terrace\n39.818564\n95.591667\n1.201707\n123\n\n\nWoodhaven\n31.095446\n94.611765\n2.695349\n86\n\n\nWoodlawn\n23.583333\n94.750000\n3.068750\n8\n\n\nWoodside\n38.786782\n93.659341\n1.509130\n184\n\n\n\n\n218 rows × 4 columns\n\n\n\n\n# perform the K-Means fit\nfrom sklearn.cluster import KMeans\nkmeans=KMeans(n_clusters=5)\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\n\nairbnb_scaled=scaler.fit_transform(group_cluster[\n    [\"price_per_person\",\"review_scores_rating\",\"reviews_per_month\",'count']\n])\nairbnb_scaled.mean(axis=0)\nairbnb_scaled.std(axis=0)\n\narray([1., 1., 1., 1.])\n\n\n\nkmeans.fit(airbnb_scaled)\ngroup_cluster['label']=kmeans.labels_\n\n\n# calculate average features per cluster\ngroup_cluster.groupby('label')['price_per_person'].mean().sort_values()\n\nlabel\n4    30.718451\n0    33.181286\n2    38.225637\n1    53.109358\n3    81.135594\nName: price_per_person, dtype: float64\n\n\n\ngroup_cluster.groupby('label')['review_scores_rating'].mean().sort_values()\n\nlabel\n0    91.994396\n1    93.701058\n3    94.059772\n4    95.415325\n2    96.068730\nName: review_scores_rating, dtype: float64\n\n\n\ngroup_cluster.groupby('label')['reviews_per_month'].mean().sort_values()\n\nlabel\n3    1.125008\n2    1.244198\n1    1.274230\n0    1.768757\n4    3.108950\nName: reviews_per_month, dtype: float64\n\n\n\ngroup_cluster.groupby('label')['count'].mean().sort_values()\n\nlabel\n4      31.617647\n0      75.611111\n2     107.455696\n3     260.708333\n1    1938.222222\nName: count, dtype: float64\n\n\n\ncluster=neighbor.merge(group_cluster,on=\"neighbourhood\")\ncluster.head()\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\nprice_per_person\nreview_scores_rating\nreviews_per_month\ncount\nlabel\n\n\n\n\n0\nBayswater\nQueens\n(POLYGON ((-8211672.372056099 4955705.98588607...\n35.336310\n94.785714\n2.867857\n14\n4\n\n\n1\nBayswater\nQueens\n(POLYGON ((-8211489.474132727 4955509.04187944...\n35.336310\n94.785714\n2.867857\n14\n4\n\n\n2\nAllerton\nBronx\n(POLYGON ((-8220788.21383767 4993431.405621486...\n31.197208\n93.707317\n1.817143\n42\n0\n\n\n3\nCity Island\nBronx\n(POLYGON ((-8213466.174330741 4989346.93912581...\n40.160256\n97.230769\n2.067692\n13\n2\n\n\n4\nCity Island\nBronx\n(POLYGON ((-8213660.983439631 4991671.62690924...\n40.160256\n97.230769\n2.067692\n13\n2\n\n\n\n\n\n\n\n\nimport altair as alt\nalt.renderers.enable('notebook')\nalt.data_transformers.disable_max_rows()\nalt.data_transformers.enable('json')\n\ncluster_data = alt.InlineData(\n    values=cluster.to_crs(epsg=4326).to_json(),\n    format=alt.DataFormat(property=\"features\", type=\"json\"),\n)\n\ncluster=alt.Chart(cluster_data).mark_geoshape().properties(\n    width=600, height=500,title=\"Cluster Analysis of Airbnb in NY\",\n).encode(\n    tooltip=[\"properties.neighbourhood:N\",\"properties.label:Q\",\"properties.count:Q\",\"properties.price_per_person:Q\",\"properties.review_scores_rating:Q\"],\n    color=alt.Color(\"properties.label:Q\", scale=alt.Scale(scheme='lighttealblue'))\n)\n\ncluster.save('./diagram/altair_cluster.json')\ncluster"
  },
  {
    "objectID": "analysis/MUSA620_final project code.html#part-3-find-the-top-earned-airbnb-for-hosts-in-new-york",
    "href": "analysis/MUSA620_final project code.html#part-3-find-the-top-earned-airbnb-for-hosts-in-new-york",
    "title": "Hospitality in Era of Airbnb",
    "section": "Part 3 Find the Top-Earned Airbnb for Hosts in New York",
    "text": "Part 3 Find the Top-Earned Airbnb for Hosts in New York\n\n3.1 Calculate the potential monthly yield of Airbnb\nAccording to a official data from Airbnb company (https://blog.atairbnb.com/economic-impact-airbnb/), In New York, the Airbnb visitors stay on average 6.4 nights. Besides, a review rate of 50% was chosen to convert reviews to estimated bookings based on the past experience of Airbnb company (http://insideairbnb.com/about.html).\nyield_per_month = Average length of stay  price * (number of reviews per mouth /review rate)*\n\n# calculate the average monthly yield\nairbnb[\"yield\"]=airbnb[\"price\"]*airbnb[\"reviews_per_month\"]*6.4*2\n\n\n# sort by yield\nairbnb=airbnb.sort_values(by=\"yield\" , ascending=False)\nairbnb.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\n\n\n\n\n\n\n\n\nlen(airbnb)\n\n38709\n\n\n\n\n3.2 Reasons behind the yield differences (visualize by hvplot)\nwe classify the monthly yield into 3 categories: high-yield (Top 30%), median-yield (30%-70%), low-yield (70%-100%)\n\nairbnb[\"yield\"].quantile(0.3) \n\n339.20000000000005\n\n\n\nairbnb[\"yield\"].quantile(0.7) \n\n2316.5951999999993\n\n\n\nairbnb.loc[airbnb[\"yield\"]&lt;=340,'yield_type'] = \"low\"\nairbnb.loc[(airbnb[\"yield\"]&gt;340)&(airbnb[\"yield\"]&lt;=2316),'yield_type'] = \"median\"\nairbnb.loc[(airbnb[\"yield\"]&gt;2316),'yield_type'] = \"high\"\n\n\nairbnb.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\n\n\n\n\n\n\n\n\n#BBDED6  #61C0BF #11999E\nimport hvplot.pandas\n\nby_yieldtype=airbnb.groupby([\"yield_type\",\"host_year\"])[\"count\"].sum()\nby_yield_chart=by_yieldtype.hvplot(x='host_year',groupby='yield_type',color=\"#71c9ce\",line_color=\"white\",width=190,height=200,rot=45,fontsize=1,kind='bar')\n\nhigh = by_yield_chart['high'].relabel('high yield')\nmedian = by_yield_chart['median'].relabel('median yield')\nlow = by_yield_chart['low'].relabel('low yield')\ncombined=high+median+low\nhvplot.save(combined, './diagram/hvplot_host_year.html')\n\ncombined\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nby_yieldtype=airbnb.groupby([\"yield_type\",\"host_response_time\"])[\"count\"].sum()\nby_yield_chart=by_yieldtype.hvplot.bar(x=\"host_response_time\",groupby='yield_type',line_color=\"white\",color=\"#71c9ce\",\n                width=190,height=200,rot=30,legend='top_left')\n\nhigh = by_yield_chart['high'].relabel('high yield')\nmedian = by_yield_chart['median'].relabel('median yield')\nlow = by_yield_chart['low'].relabel('low yield')\ncombined=high+median+low\nhvplot.save(combined, './diagram/hvplot_response_time.html')\n\ncombined\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nby_yieldtype=airbnb.groupby([\"yield_type\",\"host_identity_verified\"])[\"count\"].sum()\nby_yield_chart=by_yieldtype.hvplot.bar(x=\"host_identity_verified\",groupby='yield_type',line_color=\"white\",color=\"#71c9ce\",\n                                       width=190,height=200,rot=45,legend='top_left')\n\nhigh = by_yield_chart['high'].relabel('high yield')\nmedian = by_yield_chart['median'].relabel('median yield')\nlow = by_yield_chart['low'].relabel('low yield')\ncombined=high+median+low\nhvplot.save(combined, './diagram/hvplot_host_identity.html')\n\ncombined\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nby_yieldtype=airbnb.groupby([\"yield_type\",\"instant_bookable\"])[\"count\"].sum()\nby_yield_chart=by_yieldtype.hvplot.bar(x=\"instant_bookable\",groupby='yield_type',line_color=\"white\",color=\"#71c9ce\",\n                 stacked=True,width=190,height=200,rot=45,legend='top_left')\n\nhigh = by_yield_chart['high'].relabel('high yield')\nmedian = by_yield_chart['median'].relabel('median yield')\nlow = by_yield_chart['low'].relabel('low yield')\ncombined=high+median+low\nhvplot.save(combined, './diagram/hvplot_instant_bookable.html')\n\ncombined\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n3.3 Characterictics of the high-yield airbnb in NY (visualize by altair)\n\nSpatial distribution of top 5000 high-yield airbnb in NY\n\n# instantiate a mark cluster object for the airbnb with top 15% yield in NY\nfrom folium import plugins\nbase_map=generateBaseMap_black()\n\n# create the mark cluster\ndata_5000 = airbnb.iloc[0:5000, :]\nair_cluster = plugins.MarkerCluster().add_to(base_map)\n# loop through the dataframe and add each data point to the mark cluster\nfor lat,lng,label in zip(data_5000.latitude,data_5000.longitude,data_5000.name):\n    folium.Marker(\n        location=[lat, lng],\n        icon=None,\n        popup=label\n    ).add_to(air_cluster)\n\nfolium_cluster=base_map.add_child(air_cluster)\nfolium_cluster.save(\"./diagram/folium_cluster.html\")\n\n\n#data = airbnb[airbnb[\"yield_type\"]==\"high\"]\ncolumns=['id','name', 'description', 'host_id', 'host_since', 'host_response_rate', 'host_identity_verified', 'host_response_time',\n 'instant_bookable', 'neighbourhood_group', 'neighbourhood','latitude', 'longitude', 'room_type', 'accommodates', 'bathrooms', 'bedrooms',\n 'beds', 'price', 'guests_included', 'minimum_nights', 'availability_30', 'number_of_reviews',\n 'review_scores_rating', 'last_review', 'reviews_per_month', 'cancellation_policy',\"host_year\",\"count\",\"price_per_person\",\"yield\"]\n\ndata=pd.DataFrame(data_5000, columns=columns)\ndata.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\ncount\nprice_per_person\nyield\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n1\n300.000000\n63129.600\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n1\n59.375000\n52774.400\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n1\n59.888889\n51744.000\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n1\n133.000000\n49948.416\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n1\n65.000000\n47756.800\n\n\n\n\n\n\n\n\nimport altair as alt\n\n\n# calculate the high-yield airbnb count & mean price by neighborhood\ngroup_data1=data.groupby([\"neighbourhood\"])[\"price\"].mean()\ngroup_data1=pd.DataFrame(group_data1).reset_index()\ngroup_data2=data.groupby([\"neighbourhood\"])[\"count\"].count()\ngroup_data2=pd.DataFrame(group_data2).reset_index()\n\ngroup_data=pd.merge(group_data1,group_data2,on=\"neighbourhood\")\ngroup_data=neighbor.merge(group_data,on=\"neighbourhood\")\ngroup_data=group_data.rename(columns={0:\"count\"})\n\ngroup_data = alt.InlineData(\n    values=group_data.to_crs(epsg=4326).to_json(),\n    format=alt.DataFormat(property=\"features\", type=\"json\"),\n)\n\n# plot map, where variables ares nested within `properties`,\nchart=alt.Chart(group_data).mark_geoshape(stroke=\"white\").encode(\n    tooltip=[\"properties.count:Q\", \"properties.neighbourhood:N\",\"properties.price:Q\"],\n    color=alt.Color(\"properties.count:Q\", scale=alt.Scale(scheme='lighttealblue'))\n).properties(\n    title=\"Count of Top 5000 High-yield Airbnb by neighborhood, NY\",\n    projection={\"type\": \"mercator\"},\n    width=600,\n    height=500\n)\n\nchart.save('./diagram/altair_count_neibor.json')\nchart\n\n\n\n\n\n\n\n\n\n\n\n\nalt.data_transformers.disable_max_rows()\nalt.data_transformers.enable('json')\n\nDataTransformerRegistry.enable('json')\n\n\n\nchart=alt.Chart(data).mark_bar().encode(\n    x=alt.X('*:Q', aggregate='count', sort='descending',stack='normalize'),\n    y='room_type',\n    color=alt.Color('cancellation_policy',scale=alt.Scale(scheme=\"yellowgreenblue\"))).properties( \n    title=\" the cancellation policy of high-yield airbnb by room type\",\n    width=500, \n    height=100)#.interactive()\n\nchart\n\n\n\n\n\n\n\n\n\n\n\n\nwith alt.data_transformers.enable('default'):\n    chart.save('./diagram/altair_cancellation.json')\n\n\nchart=alt.Chart(data).mark_bar().encode(\n    x=alt.X('price', bin=alt.Bin(maxbins=40)),\n    y='count()',\n    color=alt.Color('room_type', scale=alt.Scale(scheme=\"tealblues\")),\n).properties( \n    title=\"Price distribution of high-yield airbnb in NY\",\n    width=500, \n    height=250)\n\nchart\n\n\n\n\n\n\n\n\n\n\n\n\nwith alt.data_transformers.enable('default'):\n    chart.save('./diagram/altair_price_distribution.json')\n\n\nbrush = alt.selection(type='interval')\npoint=alt.Chart(data).mark_circle(size=10).encode(\n     x=\"review_scores_rating\",\n     y=\"yield\",\n     color=alt.condition(brush,\"neighbourhood_group\",alt.value('lightgray'),scale=alt.Scale(scheme=\"yellowgreenblue\")),\n     tooltip=[\"yield\",\"price\",\"reviews_per_month\",\"host_year\",\"host_response_rate\",\"count()\"]\n).properties(\n    title=\"Relationship between review_scores_rating and yield for high-yield airbnb\",\n    width=500, \n    height=300,\n    selection=brush,\n)\n\nbars=alt.Chart().mark_bar().encode(\n    y=\"neighbourhood_group\",\n    color=alt.condition(brush,\"neighbourhood_group\",alt.value('lightgray'),scale=alt.Scale(scheme=\"yellowgreenblue\")),\n    x=\"count(neighbourhood_group)\",\n).transform_filter(\n        brush.ref()\n).properties(\nwidth=500,\nheight=100\n)\n\nchart=alt.vconcat(point,bars,data=data)\nchart\n\n\n\n\n\n\n\n\n\n\n\n\nwith alt.data_transformers.enable('default'):\n    chart.save('./diagram/altair_relationship.json')\n\n\ndata[\"name\"] = data[\"name\"].astype(str)\nlist_name=data[\"name\"].tolist()\n\n\nwords_in_list=[word.lower().split()\n              for word in list_name]\n\n\n# get the list of commmon stop words\nimport nltk\nnltk.download('stopwords');\nstop_words = list(set(nltk.corpus.stopwords.words('english')))\n\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\HP\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n\n\n\n# get the list of commmon punctuation\nimport string\npunctuation = list(string.punctuation)\n\n\n# Remove ignored words from each list of words\nignored=stop_words+punctuation\nname_nsw = [[word for word in name_words if word not in ignored]\n              for name_words in words_in_list]\nname_nsw[0]\n\n['luxury', 'house', 'safe', 'area,', '30', 'min', 'time', 'square']\n\n\n\n# Remove number and several common words from each list of words\nsearch_terms = [\"1\",\"2\",\"3\",\"4\",\"5\",\"east\",\"west\",\"noth\",\"south\",\"min\",\"hour\",\"apartment\",\"bedroom\",\"room\"]\nname_nsw = [[w for w in word if w not in search_terms]\n                 for word in name_nsw]\n\n\ndef count_word_frequencies(words_in_name, top=60):\n    \"\"\"\n    Given a list of all words for every tweet, count\n    word frequencies across all tweets.\n    \n    By default, this returns the top 15 words, but you \n    can specify a different value for `top`.\n    \"\"\"\n    import itertools, collections\n\n    # List of all words across tweets\n    all_words = list(itertools.chain(*words_in_name))\n\n    # Create counter\n    counter = collections.Counter(all_words)\n    \n    return pd.DataFrame(counter.most_common(top),\n                        columns=['words', 'count'])\n\n\ncounts_nsw = count_word_frequencies(name_nsw)\nlen(counts_nsw)\n\n60\n\n\n\n# plot the Top 15 most common words in hish-yield Airbnb Name\nfx,ax=plt.subplots(figsize=(15,6))\n\nsns.set(style='whitegrid',font_scale=1.2)\n\nsns.barplot(\n    y=\"words\",\n    x=\"count\",\n    data=counts_nsw.sort_values(by=\"count\", ascending=False).iloc[0:15, :],\n    ax=ax,\n    color=\"#71c9ce\",\n    saturation=1.0,\n)\n\nax.set_title(\"Common Words Found in high-yield Airbnb(Top 15)\", fontsize=16);\nplt.savefig('./diagram/word_frequency',bbox_inches='tight')\n\n\n\n\n\nwords=counts_nsw[\"words\"].tolist()\nword_txt=\" \".join(words)\n\nfrom wordcloud import WordCloud\nwordcloud=WordCloud(scale=4,background_color=\"white\",font_path=\"C:\\Windows\\Fonts\\Arial.ttf\",\n           max_words=60,max_font_size=60,random_state=20).generate(word_txt)\n\n\n# plot the windcloud of high-yield Airbnb\nfig, ax = plt.subplots(figsize=(12, 10))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/wordcloud',bbox_inches='tight')"
  },
  {
    "objectID": "analysis/MUSA620_final project code.html#part-4-pricing-tip-prediction-for-new-hosts-in-new-york",
    "href": "analysis/MUSA620_final project code.html#part-4-pricing-tip-prediction-for-new-hosts-in-new-york",
    "title": "Hospitality in Era of Airbnb",
    "section": "Part 4 Pricing Tip Prediction for New Hosts in New York",
    "text": "Part 4 Pricing Tip Prediction for New Hosts in New York\n\n4.1 Price spatial distribution of New York airbnb (visualized by matplotlib)\n\n# Convert the airbnb data into geodataframe\nfrom shapely.geometry import Point\nairbnb[\"coor\"]=list(zip(airbnb[\"longitude\"],airbnb[\"latitude\"]))\nairbnb[\"coor\"]=airbnb[\"coor\"].apply(Point)\nairbnb_gpd=gpd.GeoDataFrame(airbnb,geometry=\"coor\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n\n\n\n\n\n\n\n\n# Clean the airbnb_gpd data\nimport seaborn as sns\nimport statsmodels\nimport statsmodels.api as sm\nimport scipy.stats as stats\n\n\nfig, axes = plt.subplots(1,3, figsize=(21,6))\nchart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#11999E\")\nchart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#11999E\")\naxes[1].set_xlabel('log(1+price)')\nsm.qqplot(np.log1p(airbnb_gpd['price']), stats.norm, fit=True, line='45',color=\"#11999E\",alpha=0.5,ax=axes[2])\n\nfigure = chart.get_figure() \nfigure.savefig(\"./diagram/hist_price.png\",bbox_inches='tight')\n\n\n\n\n\nairbnb_gpd = airbnb_gpd [(np.log1p(airbnb_gpd ['price']) &lt; 8) & (np.log1p(airbnb_gpd ['price']) &gt;3)]\nairbnb_gpd=airbnb_gpd.dropna()\n\n\nlen(airbnb_gpd)\n\n26624\n\n\n\nimport contextily as ctx\n\n# create the axes\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# plot a random sample of potholes\nairbnb_gpd.plot(ax=ax, marker='.', column=\"price\" ,cmap=\"GnBu\",alpha=0.5,\n            legend=True,legend_kwds=dict(loc='upper left'),scheme=\"Quantiles\",k=5) \n\n# add the Neighbor boundary\nneighbor.plot(ax=ax, edgecolor='white', linewidth=0.5, facecolor='none')\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\n#CartoDB.Positron\n# remove axis lines\nax.set_title(\"Price Distribution of Airbnb in NY (Quantiles: k = 5)\",fontsize=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/airbnb_price',bbox_inches='tight')\n\n\n\n\n\n# spatial join\nair_nei=gpd.sjoin(airbnb_gpd,neighbor,op=\"within\",how=\"right\")\nair_nei.reset_index().head()\n\n# calculate the airbnb count by neighborhood\ngroup=airbnb.groupby([\"neighbourhood\"])[\"price\"].mean()\ngroup=pd.DataFrame(group).reset_index()\n\ngroup=neighbor.merge(group,on=\"neighbourhood\")\ngroup=group.rename(columns={0:\"count\"})\ngroup.head()\n\n\n\n\n\n\n\n\nneighbourhood\nneighbourhood_group\ngeometry\nprice\n\n\n\n\n0\nBayswater\nQueens\n(POLYGON ((-8211672.372056099 4955705.98588607...\n85.142857\n\n\n1\nBayswater\nQueens\n(POLYGON ((-8211489.474132727 4955509.04187944...\n85.142857\n\n\n2\nAllerton\nBronx\n(POLYGON ((-8220788.21383767 4993431.405621486...\n90.214286\n\n\n3\nCity Island\nBronx\n(POLYGON ((-8213466.174330741 4989346.93912581...\n98.461538\n\n\n4\nCity Island\nBronx\n(POLYGON ((-8213660.983439631 4991671.62690924...\n98.461538\n\n\n\n\n\n\n\n\n# Needed to line up the colorbar properly\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Create the figure\nfig, ax = plt.subplots(figsize=(10, 10),facecolor=\"white\")\n\n# Plot\ngroup.plot( ax=ax,\n    column=\"price\",\n    edgecolor=\"white\",\n    legend=True,\n    legend_kwds=dict(loc='upper left'),\n    cmap=\"GnBu\",\n    scheme=\"Quantiles\",\n    k=5)\n\n# NEW: Get the limits of the GeoDataFrame\nxmin, ymin, xmax, ymax = group.total_bounds\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\n# NEW: Set the xlims and ylims\n#ax.set_xlim(xmin, xmax)\n#ax.set_ylim(ymin, ymax)\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, NY (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/average_price_neighbor',bbox_inches='tight')\n\n\n\n\n\n# Plot two columns\nfig, axs = plt.subplots(ncols=2, figsize=(20,10))\n\n# Predicted values\ntest_set.plot(ax=axs[0], column='price', marker='.',cmap=\"GnBu\",alpha=0.5,\n            legend=True,legend_kwds=dict(loc='upper left'),scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[0], crs=test_set.crs, url=ctx.providers.Stamen.TonerLite)\naxs[0].set_title(\"Price Distribution of Airbnb in NY \",size=25)\n\n# Actual values\ngroup.plot(ax=axs[1],column=\"price\",edgecolor=\"white\",alpha=0.8,\n              legend=True,legend_kwds=dict(loc='upper left'),cmap=\"YlGnBu\",scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[1], crs=test_set.crs, url=ctx.providers.Stamen.TonerLite)\naxs[1].set_title(\"Average Airbnb Price by neighborhood\",size=25)\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\nplt.savefig('./diagram/combine.png',bbox_inches='tight')\n\n\n\n\n\n\n4.2 Feature Engineering\n\nimport missingno as msno\n\n\n# visualize the first half of columns and then the second half\nncol =len(airbnb_gpd.columns)\nfields1=airbnb.columns\n\n\nmsno.bar(airbnb_gpd[fields1])\n\n&lt;matplotlib.axes._subplots.AxesSubplot at 0x29d04258b70&gt;\n\n\n\n\n\n\nlen(airbnb_gpd)\n\n26624\n\n\n\nAdd the logDistCrime variable (NYPD Complaint data)\nThis dataset includes all valid felony, misdemeanor, and violation crimes reported to the New York City Police Department (NYPD) for all complete quarters so far this year (2019).\n\n# KNN method\nfrom sklearn.neighbors import NearestNeighbors\nimport numpy as np\n\ndef get_xy_from_geometry(df):\n    \"\"\"\n    Return a numpy array with two columns, where the \n    first holds the `x` geometry coordinate and the second \n    column holds the `y` geometry coordinate\n    \"\"\"\n    x = df.geometry.x\n    y = df.geometry.y\n    \n    return np.column_stack((x, y)) \n\n\nfrom sodapy import Socrata\nclient = Socrata(\"data.cityofnewyork.us\",\n                 \"hpqFYZsalD4giiukGuLjAa4jt\",\n                 username=\"lzq.hust@gmail.com\",\n                 password=\"Lzq8685963!\",\n                 timeout=1000000)\n\n\n# load the crime data\nwhere=\"cmplnt_to_dt &gt;= '2018-01-01' and cmplnt_to_dt &lt;= '2019-01-01'\"\nresults = client.get(\"qgea-i56i\",where=where,select=\"latitude,longitude\",limit=1000000)\ncrime = pd.DataFrame.from_records(results).dropna()\n\n\n# convert the complaint dataframe into geodataframe\ncrime[[\"latitude\",\"longitude\"]] = crime[[\"latitude\",\"longitude\"]].astype(float)\ncrime[\"geometry\"]=list(zip(crime[\"longitude\"],crime[\"latitude\"]))\ncrime[\"geometry\"]=crime[\"geometry\"].apply(Point)\ncrime=gpd.GeoDataFrame(crime,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\ncrime.head()\n\n\n\n\n\n\n\n\nlatitude\nlongitude\ngeometry\n\n\n\n\n0\n40.683702\n-73.875598\nPOINT (-8223793.993376024 4965799.134445083)\n\n\n1\n40.805705\n-73.912735\nPOINT (-8227927.9989592 4983725.251784862)\n\n\n2\n40.750936\n-74.004044\nPOINT (-8238092.468562926 4975673.934954111)\n\n\n3\n40.712655\n-73.989974\nPOINT (-8236526.185516353 4970050.249267844)\n\n\n4\n40.638881\n-73.943940\nPOINT (-8231401.751944553 4959221.757633395)\n\n\n\n\n\n\n\n\n# Extract x/y for airbnb_gpd and complaint\nairbnbXY=get_xy_from_geometry(airbnb_gpd)\ncrimeXY=get_xy_from_geometry(crime)\n\n\n# KNN method\n# STEP 1: Initialize the algorithm\nnbrs = NearestNeighbors(n_neighbors=5)\n# STEP 2: Fit the algorithm on the \"neighbors\" dataset\nnbrs.fit(crimeXY)\n# STEP 3: Get distances for airbnb to \ncriDists, criIndices = nbrs.kneighbors(airbnbXY)\n# Average distance to neighbors\navgCriDist = criDists.mean(axis=1)\n# Set zero distances to be small, but nonzero\n# IMPORTANT: THIS WILL AVOID INF DISTANCES WHEN DOING THE LOG\navgCriDist[avgCriDist==0] = 1e-5\n# Calculate log of distances\nairbnb_gpd['logDistCrime'] = np.log10(avgCriDist)\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10),facecolor=\"white\")\n\n# Plot the log of the Graffiti distance\nx = airbnbXY[:,0]\ny = airbnbXY[:,1]\nhex=plt.hexbin(x, y, C=airbnb_gpd['logDistCrime'].values,cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nplt.colorbar(hex,fraction=0.03,pad=0.04).set_label('logDistCrime',size=13)\n\n# Plot the city limits\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1,alpha=0.5)\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\nxmin, ymin, xmax, ymax = neighbor.total_bounds\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/crime',bbox_inches='tight')\n\n\n\n\n\n\nAdd the logDistDirty variable ( 311 requests Noise)\n\n# load the requests data\nwhere = \"created_date &gt;= '2018-01-01' and created_date &lt; '2019-01-01' and complaint_type = 'Dirty Conditions'\"\nresults = client.get(\"erm2-nwe9\",where=where,select=\"Latitude, Longitude\",limit=1000000)\ndirty = pd.DataFrame.from_records(results).dropna()\ndirty.head()\n\n\n\n\n\n\n\n\nLatitude\nLongitude\n\n\n\n\n0\n40.71741105389313\n-73.76110363528335\n\n\n1\n40.581830570219736\n-73.95637793933014\n\n\n2\n40.7585192921029\n-73.84442527636939\n\n\n3\n40.742946866747495\n-73.92536687866857\n\n\n5\n40.69611234569536\n-73.99368186450546\n\n\n\n\n\n\n\n\n# convert the streetlight dataframe into geodataframe\ndirty[[\"Latitude\",\"Longitude\"]] = dirty[[\"Latitude\",\"Longitude\"]].astype(float)\ndirty[\"geometry\"]=list(zip(dirty[\"Longitude\"],dirty[\"Latitude\"]))\ndirty[\"geometry\"]=dirty[\"geometry\"].apply(Point)\ndirty=gpd.GeoDataFrame(dirty,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\ndirty.head()\n\n\n\n\n\n\n\n\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\n40.717411\n-73.761104\nPOINT (-8211048.497029622 4970748.789751573)\n\n\n1\n40.581831\n-73.956378\nPOINT (-8232786.333121122 4950856.063409917)\n\n\n2\n40.758519\n-73.844425\nPOINT (-8220323.81968738 4976788.298578027)\n\n\n3\n40.742947\n-73.925367\nPOINT (-8229334.197639317 4974500.001703715)\n\n\n5\n40.696112\n-73.993682\nPOINT (-8236938.987076229 4967621.109096254)\n\n\n\n\n\n\n\n\n# KNN method\n\ndirtyXY=get_xy_from_geometry(dirty)\n\n# STEP 1: Initialize the algorithm\nnbrs = NearestNeighbors(n_neighbors=3)\n# STEP 2: Fit the algorithm on the \"neighbors\" dataset\nnbrs.fit(dirtyXY)\n# STEP 3: Get distances for airbnb to \ndirtyDists, dirtyIndices = nbrs.kneighbors(airbnbXY)\n# Average distance to neighbors\navgdirtyDist = dirtyDists.mean(axis=1)\n# Set zero distances to be small, but nonzero\n# IMPORTANT: THIS WILL AVOID INF DISTANCES WHEN DOING THE LOG\navgdirtyDist[avgdirtyDist==0] = 1e-5\n# Calculate log of distances\nairbnb_gpd['logDistDirty'] = np.log10(avgdirtyDist)\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\nlogDistDirty\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n2.222232\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n1.876374\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n2.446754\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n2.133499\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n1.754282\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10),facecolor=\"white\")\n\n# Plot the log of the crime distance\nx = airbnbXY[:,0]\ny = airbnbXY[:,1]\nhex=plt.hexbin(x, y, C=airbnb_gpd['logDistDirty'].values,cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nplt.colorbar(hex,fraction=0.03,pad=0.04).set_label('logDistDirty',size=13)\n\n# Plot the city limits\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1,alpha=0.5)\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\nxmin, ymin, xmax, ymax = neighbor.total_bounds\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/dirty',bbox_inches='tight')\n\n\n\n\n\n\nAdd the logDistNoise variable ( 311 requests Noise)\n\n# load the requests data\nwhere = \"created_date &gt;= '2018-01-01' and created_date &lt; '2019-01-01' and complaint_type = 'Noise'\"\nresults = client.get(\"erm2-nwe9\",where=where,select=\"Latitude, Longitude\",limit=1000000)\nNoise = pd.DataFrame.from_records(results).dropna()\nNoise.head()\n\n\n\n\n\n\n\n\nLatitude\nLongitude\n\n\n\n\n0\n40.74883748706737\n-73.87260248011808\n\n\n1\n40.79455899221026\n-73.96627150428745\n\n\n2\n40.77300782211434\n-73.98014998881543\n\n\n3\n40.79931377582617\n-73.9531762007941\n\n\n4\n40.72943182997348\n-73.97802700657319\n\n\n\n\n\n\n\n\n# convert the streetlight dataframe into geodataframe\nNoise[[\"Latitude\",\"Longitude\"]] = Noise[[\"Latitude\",\"Longitude\"]].astype(float)\nNoise[\"geometry\"]=list(zip(Noise[\"Longitude\"],Noise[\"Latitude\"]))\nNoise[\"geometry\"]=Noise[\"geometry\"].apply(Point)\nNoise=gpd.GeoDataFrame(Noise,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\nNoise.head()\n\n\n\n\n\n\n\n\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\n40.748837\n-73.872602\nPOINT (-8223460.491660663 4975365.538474261)\n\n\n1\n40.794559\n-73.966272\nPOINT (-8233887.679734299 4982086.22495832)\n\n\n2\n40.773008\n-73.980150\nPOINT (-8235432.625564937 4978917.803410556)\n\n\n3\n40.799314\n-73.953176\nPOINT (-8232429.917217638 4982785.404774399)\n\n\n4\n40.729432\n-73.978027\nPOINT (-8235196.296262768 4972514.462923164)\n\n\n\n\n\n\n\n\n# KNN method\nNoiseXY=get_xy_from_geometry(Noise)\n\n# STEP 1: Initialize the algorithm\nnbrs = NearestNeighbors(n_neighbors=1)\n# STEP 2: Fit the algorithm on the \"neighbors\" dataset\nnbrs.fit(NoiseXY)\n# STEP 3: Get distances for airbnb to \nNoiseDists, NoiseIndices = nbrs.kneighbors(airbnbXY)\n# Average distance to neighbors\navgNoiseDist = NoiseDists.mean(axis=1)\n# Set zero distances to be small, but nonzero\n# IMPORTANT: THIS WILL AVOID INF DISTANCES WHEN DOING THE LOG\navgNoiseDist[avgNoiseDist==0] = 1e-5\n# Calculate log of distances\nairbnb_gpd['logDistNoise'] = np.log10(avgNoiseDist)\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\nlogDistDirty\nlogDistNoise\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n2.222232\n2.049483\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n1.876374\n0.977596\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n2.446754\n1.832042\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n2.133499\n0.783409\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n1.754282\n1.852523\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10),facecolor=\"white\")\n\n# Plot the log of the Graffiti distance\nx = airbnbXY[:,0]\ny = airbnbXY[:,1]\nhex=plt.hexbin(x, y, C=airbnb_gpd['logDistNoise'].values,cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nplt.colorbar(hex,fraction=0.03,pad=0.04).set_label('logDistNoise',size=13)\n\n# Plot the city limits\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1,alpha=0.5)\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\nxmin, ymin, xmax, ymax = neighbor.total_bounds\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/noise',bbox_inches='tight')\n\n\n\n\n\n\nAdd the logDisUni variable ( University data)\n\nurl=\"https://data.cityofnewyork.us/api/geospatial/4kym-4xw5?method=export&format=GeoJSON\"\nuni=gpd.read_file(url).to_crs(epsg=3857)\nuni.head()\n\n\n\n\n\n\n\n\ncity\nname\nzip\nurl\nbbl\nstreetname\nhousenum\nbin\ngeometry\n\n\n\n\n0\nNew York\nNew School University / Parsons School Of Design\n10011\nhttp://www.parsons.edu/html/splash.html\n1005760042\nFIFTH AVENUE\n66\n1009619\nPOINT (-8237046.999272317 4973361.270931754)\n\n\n1\nNew York\nNew School University / The New School\n10011\nhttp://www.newschool.edu/\n1005750017\nWEST 12 STREET\n66\n1083136\nPOINT (-8237316.115168569 4973400.444303175)\n\n\n2\nNew York\nMetropolitan College\n10013\nhttp://www.metropolitan.edu/\n1002260001\nVARICK STREET\n75\n1002934\nPOINT (-8238401.455683141 4971634.58544787)\n\n\n3\nFresh Meadows\nSchool Of Nursing Of St. Vincents Catholic Med...\n11365\nhttp://www.svcmc.org/portal/training/allied_he...\n4068890037\nHORACE HARDING EXPRESSWAY\n175-05\n4148794\nPOINT (-8214754.252247361 4973985.179216026)\n\n\n4\nForest Hills\nBramson Ort College\n11375\nhttp://www.bramsonort.org/\n4032347501\nAUSTIN STREET\n69-30\n4077468\nPOINT (-8220801.966259549 4971330.541977497)\n\n\n\n\n\n\n\n\n# KNN method\n\nuniXY=get_xy_from_geometry(uni)\n\n# STEP 1: Initialize the algorithm\nnbrs = NearestNeighbors(n_neighbors=1)\n# STEP 2: Fit the algorithm on the \"neighbors\" dataset\nnbrs.fit(uniXY)\n# STEP 3: Get distances for airbnb to \nuniDists, uniIndices = nbrs.kneighbors(airbnbXY)\n# Average distance to neighbors\navguniDist =uniDists.mean(axis=1)\n# Set zero distances to be small, but nonzero\n# IMPORTANT: THIS WILL AVOID INF DISTANCES WHEN DOING THE LOG\navguniDist[avguniDist==0] = 1e-5\n# Calculate log of distances\nairbnb_gpd['logDistUni'] = np.log10(avguniDist)\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\nlogDistDirty\nlogDistNoise\nlogDistUni\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n2.222232\n2.049483\n3.118921\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n1.876374\n0.977596\n2.396151\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n2.446754\n1.832042\n3.032535\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n2.133499\n0.783409\n2.935673\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n1.754282\n1.852523\n2.913817\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10),facecolor=\"white\")\n\n# Plot the log of the Graffiti distance\nx = airbnbXY[:,0]\ny = airbnbXY[:,1]\nhex=plt.hexbin(x, y, C=airbnb_gpd['logDistUni'].values,cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nplt.colorbar(hex,fraction=0.03,pad=0.04).set_label('logDistUniversity',size=13)\n\n# Plot the city limits\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1,alpha=0.5)\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\nxmin, ymin, xmax, ymax = neighbor.total_bounds\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/university',bbox_inches='tight')\n\n\n\n\n\n\nAdd the logDistAttr variable ( attraction data)\n\nimport osm2gpd\nlng_min, lat_min, lng_max, lat_max = neighbor.to_crs(epsg=4326).total_bounds\nwhere=\"tourism=attraction\"\nattraction = osm2gpd.get(lng_min, lat_min, lng_max, lat_max, where=where).to_crs(epsg=3857)\nattraction = gpd.sjoin(attraction, neighbor, op=\"within\")\nattraction.head()\n\n\n\n\n\n\n\n\nlat\nlon\nele\ngnis:Class\ngnis:County\ngnis:County_num\ngnis:ST_alpha\ngnis:ST_num\ngnis:id\nimport_uuid\nis_in\nname\nname:ru\nname:zh\nplace\ntourism\nwikidata\nwikipedia\nwheelchair\naddr:city\naddr:country\naddr:housenumber\naddr:postcode\naddr:state\naddr:street\namenity\ngnis:county_name\ngnis:feature_id\ngnis:import_uuid\ngnis:reviewed\nlgbtq\nwebsite\nfixme\nnote\nsource:position\nsource:tourism\nattraction\nname:en\nhistoric\nname:ko\nopening_hours\nphone\nbarrier\nstart_date\nemail\nheritage\nheritage:operator\nref:nrhp\ncraft\ndistillery\nname:it\nname:es\nname:fr\ntourism_1\nref:njrhp\nname:de\ndescription\nleisure\noperator\nnatural\nspecies\nspecies:en\ntree:diameter\ntype\nhighway\nartwork_type\nalt_name:en\ngeometry\nindex_right\nneighbourhood\nneighbourhood_group\n\n\n\n\n158809984\n40.722880\n-73.998750\n9\nPopulated Place\nNew York\n061\nNY\n36\n2045148\nbb7269ee-502a-5391-8056-e3ce0e66489c\nNew York,New York,N.Y.,NY,USA\nSoHo\nСохо\n纽约苏活（Soho）区\nneighbourhood\nattraction\nQ461572\nen:SoHo, Manhattan\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8237503.224998497 4971552.057034572)\n179\nSoHo\nManhattan\n\n\n5017059024\n40.718987\n-74.000862\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nCanal street market\nNaN\nNaN\nNaN\nattraction\nNaN\nNaN\nNaN\nNaN\nNaN\n261\n10013\nNaN\nCanal Street\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8237738.287235258 4970980.239939673)\n179\nSoHo\nManhattan\n\n\n5449742521\n40.722690\n-74.003303\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPaul Nicklen Gallery\nNaN\nNaN\nNaN\nattraction\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n10013\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nhttp://www.paulnicklengallery.com\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMo-Su 12:00-19:00\n+16468910042\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8238009.995848385 4971524.178504917)\n179\nSoHo\nManhattan\n\n\n6052834699\n40.725844\n-74.006223\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nColor Factory\nNaN\nNaN\nNaN\nattraction\nNaN\nNaN\nNaN\nNaN\nNaN\n251\nNaN\nNaN\nSpring Street\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nhttp://colorfactory.co\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nTh-Tu 10:00-23:00\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8238335.015365655 4971987.489445647)\n179\nSoHo\nManhattan\n\n\n6949654787\n40.721829\n-73.999589\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nHaughwout Building\nNaN\nNaN\nNaN\nattraction\nNaN\nNaN\nNaN\nNaN\nNaN\n488\nNaN\nNaN\nBroadway\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8237596.610919326 4971397.75668658)\n179\nSoHo\nManhattan\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10))\n\n# Plot the subway locations\nattraction.plot(ax=ax, markersize=5, color='#336699')\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\n# City limits, too\nneighbor.plot(ax=ax, facecolor='none', edgecolor='black', linewidth=0.1)\n\nax.set_axis_off()\nplt.savefig('./diagram/detail/attraction',bbox_inches='tight')\n\n\n\n\n\n# STEP 1: x/y coordinates of subway stops (in EPGS=3857)\nattractionXY = get_xy_from_geometry(attraction)\n\n# STEP 2: Initialize the algorithm\nnbrs = NearestNeighbors(n_neighbors=3)\n\n# STEP 3: Fit the algorithm on the \"neighbors\" dataset\nnbrs.fit(attractionXY)\n\n# STEP 4: Get distances for sale to neighbors\nattractionDists, attractionIndices = nbrs.kneighbors(airbnbXY)\n\n# STEP 5: add back to the original dataset\nairbnb_gpd['logDistAttr'] = np.log10(attractionDists[:,0])\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\nlogDistDirty\nlogDistNoise\nlogDistUni\nlogDistAttr\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n2.222232\n2.049483\n3.118921\n3.904160\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n1.876374\n0.977596\n2.396151\n3.073523\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n2.446754\n1.832042\n3.032535\n2.973833\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n2.133499\n0.783409\n2.935673\n2.551740\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n1.754282\n1.852523\n2.913817\n3.426471\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10),facecolor=\"white\")\n\n# Plot the log of the Graffiti distance\nx = airbnbXY[:,0]\ny = airbnbXY[:,1]\nhex=plt.hexbin(x, y, C=airbnb_gpd['logDistAttr'].values,cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nplt.colorbar(hex,fraction=0.03,pad=0.04).set_label('logDistAttr',size=13)\n\n# Plot the city limits\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1,alpha=0.5)\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\nxmin, ymin, xmax, ymax = neighbor.total_bounds\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/attraction',bbox_inches='tight')\n\n\n\n\n\n\nAdd the logDistSubway variable ( Subway station data)\n\nimport osm2gpd\nlng_min, lat_min, lng_max, lat_max = neighbor.to_crs(epsg=4326).total_bounds\nwhere=\"station=subway\"\nsubway = osm2gpd.get(lng_min, lat_min, lng_max, lat_max, where=where).to_crs(epsg=3857)\nsubway = gpd.sjoin(subway, neighbor, op=\"within\")\nsubway.head()\n\n\n\n\n\n\n\n\nlat\nlon\nname\nnetwork\npublic_transport\nrailway\nstation\nsubway\nwheelchair\nwikidata\nopening_hours\noperator\ntrain\nwikipedia\ninternet_access\ninternet_access:fee\nname:en\nname:ru\nlayer\nname:es\nname:nl\nname:pl\nalt_name\nimage\nstart_date\nplatforms\nowner\ntoilets:wheelchair\nname:pronunciation\nname:he\nname:lt\naddr:city\naddr:postcode\naddr:state\nnote\nlocation\niata\nrailway:ref\ndisused\ndisused:railway\ncheck_date\nopening_date\nwifi\naddr:housenumber\naddr:street\nfixme\nwebsite\ndescription\ngeometry\nindex_right\nneighbourhood\nneighbourhood_group\n\n\n\n\n42969559\n40.643963\n-74.073442\nSt. George\nStaten Island Railway\nstation\nstation\nsubway\nyes\nyes\nQ5927015\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8245817.800217287 4959967.222330222)\n201\nSt. George\nStaten Island\n\n\n42969919\n40.551335\n-74.151201\nGreat Kills\nStaten Island Railway\nstation\nstation\nsubway\nyes\nyes\nQ5599393\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8254473.937029677 4946387.275455167)\n114\nGreat Kills\nStaten Island\n\n\n42969938\n40.544446\n-74.164901\nEltingville\nStaten Island Railway\nstation\nstation\nsubway\nyes\nno\nQ5367819\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8255999.036317444 4945377.923548225)\n82\nEltingville\nStaten Island\n\n\n42969951\n40.540534\n-74.177904\nAnnadale\nStaten Island Railway\nstation\nstation\nsubway\nyes\nno\nQ4767761\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8257446.512524281 4944804.937156003)\n180\nWoodrow\nStaten Island\n\n\n42969964\n40.533545\n-74.191940\nHuguenot\nStaten Island Railway\nstation\nstation\nsubway\nyes\nno\nQ5934692\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nPOINT (-8259008.992897054 4943781.174410961)\n180\nWoodrow\nStaten Island\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10))\n\n# Plot the subway locations\nsubway.plot(ax=ax, markersize=5, color='#336699')\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\n# City limits, too\nneighbor.plot(ax=ax, facecolor='none', edgecolor='black', linewidth=0.1)\n\nax.set_axis_off()\nplt.savefig('./diagram/detail/subway_ori',bbox_inches='tight')\n\n\n\n\n\n# STEP 1: x/y coordinates of subway stops (in EPGS=3857)\nsubwayXY = get_xy_from_geometry(subway)\n\n# STEP 2: Initialize the algorithm\nnbrs = NearestNeighbors(n_neighbors=1)\n\n# STEP 3: Fit the algorithm on the \"neighbors\" dataset\nnbrs.fit(subwayXY)\n\n# STEP 4: Get distances for sale to neighbors\nsubwayDists, subwayIndices = nbrs.kneighbors(airbnbXY)\n\n# STEP 5: add back to the original dataset\nairbnb_gpd['logDistSubway'] = np.log10(subwayDists[:,0])\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\nlogDistDirty\nlogDistNoise\nlogDistUni\nlogDistAttr\nlogDistSubway\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n2.222232\n2.049483\n3.118921\n3.904160\n3.174705\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n1.876374\n0.977596\n2.396151\n3.073523\n2.363442\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n2.446754\n1.832042\n3.032535\n2.973833\n3.030360\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n2.133499\n0.783409\n2.935673\n2.551740\n2.078842\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n1.754282\n1.852523\n2.913817\n3.426471\n2.856677\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(figsize=(10,10),facecolor=\"white\")\n\n# Plot the log of the Graffiti distance\nx = airbnbXY[:,0]\ny = airbnbXY[:,1]\nhex=plt.hexbin(x, y, C=airbnb_gpd['logDistSubway'].values,cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nplt.colorbar(hex,fraction=0.03,pad=0.04).set_label('logDistSubway',size=13)\n\n# Plot the city limits\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1,alpha=0.5)\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\n\nxmin, ymin, xmax, ymax = neighbor.total_bounds\nax.set_xlim(xmin, xmax)\nax.set_ylim(ymin, ymax)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/subway',bbox_inches='tight')\n\n\n\n\n\n# Plot all features in the same figure\nfig, axs = plt.subplots(ncols=2,nrows=3, figsize=(20,25))\n\n# logDistCrime\nax=axs[0][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['logDistCrime'].values,\n             cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('logDistCrime',size=18)\nax.set_axis_off()\n\n# logDistDirty\nax=axs[0][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['logDistDirty'].values,\n             cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('logDistDirty',size=18)\nax.set_axis_off()\n\n# logDistNoise\nax=axs[1][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['logDistNoise'].values,\n             cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('logDistNoise',size=18)\nax.set_axis_off()\n\n# logDistUni\nax=axs[1][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['logDistUni'].values,\n             cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('logDistUni',size=18)\nax.set_axis_off()\n\n# logDistAttr\nax=axs[2][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['logDistAttr'].values,\n             cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('logDistAttr',size=18)\nax.set_axis_off()\n\n# logDistSubway\nax=axs[2][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['logDistSubway'].values,\n             cmap=plt.cm.YlGnBu_r,gridsize=80,alpha=0.8)\nneighbor.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, url=ctx.providers.Stamen.TonerLite)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('logDistSubway',size=18)\nax.set_axis_off()\n\nplt.savefig('./diagram/features',bbox_inches='tight')\n\n\n\n\n\n\nAdd the lagprice variable\n\n# Add the lagged sales variable\nnbrs = NearestNeighbors(n_neighbors=5)\nnbrs.fit(airbnbXY)\npriceDists, priceIndices = nbrs.kneighbors(airbnbXY)\n\n# the sales for the stations from original data frame\nprice = airbnb_gpd['price'].values\n\n# get the trips for the 5 nearest neighbors (ignoring first match)\nneighboring_price =  price[priceIndices[:,1:]]\n\n# add to features\nairbnb_gpd['LaggedPrice'] = neighboring_price.mean(axis=1)\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nname\ndescription\nhost_id\nhost_since\nhost_response_rate\nhost_identity_verified\nhost_response_time\ninstant_bookable\nneighbourhood_group\nneighbourhood\nlatitude\nlongitude\nroom_type\naccommodates\nbathrooms\nbedrooms\nbeds\nprice\nguests_included\nminimum_nights\navailability_30\nnumber_of_reviews\nreview_scores_rating\nlast_review\nreviews_per_month\ncancellation_policy\nhost_year\nprice_per_person\ncount\nyield\nyield_type\ncoor\nlogDistCrime\nlogDistDirty\nlogDistNoise\nlogDistUni\nlogDistAttr\nlogDistSubway\nLaggedPrice\n\n\n\n\n23052\n19520573\nLuxury House in Safe Area, 30 Min to Time Square\nOUR PLACE IS GOOD FOR COUPLES, SOLO ADVENTURER...\n117673528\n2017-02-22\n100.0\nt\nwithin an hour\nt\nQueens\nForest Hills\n40.71249\n-73.85021\nPrivate room\n3\n2.0\n2.0\n2.0\n900\n3\n1\n10\n142\n98.0\n2019-09-02\n5.48\nmoderate\n2017\n300.000000\n1\n63129.600\nhigh\nPOINT (-8220967.77217632 4970026.052125105)\n2.060782\n2.222232\n2.049483\n3.118921\n3.904160\n3.174705\n66.25\n\n\n40240\n33467371\nPrivate, Beautiful Upper Eastside Townhome\nWelcome to The Yews. A private, quiet, over-si...\n683230\n2011-06-09\n100.0\nt\nwithin a few hours\nt\nManhattan\nUpper East Side\n40.76725\n-73.95864\nPrivate room\n16\n4.5\n6.0\n9.0\n950\n8\n3\n2\n21\n100.0\n2019-09-09\n4.34\nmoderate\n2011\n59.375000\n1\n52774.400\nhigh\nPOINT (-8233038.144563035 4978071.47079969)\n1.823720\n1.876374\n0.977596\n2.396151\n3.073523\n2.363442\n145.75\n\n\n41213\n34156010\nAmazing Luxury Apt in the middle of Manhattan\nI do not provide luggage storage as its Manhat...\n257677041\n2019-04-23\n100.0\nf\nwithin an hour\nt\nManhattan\nKips Bay\n40.74210\n-73.97404\nEntire home/apt\n9\n2.0\n3.0\n4.0\n539\n1\n1\n4\n30\n95.0\n2019-09-05\n7.50\nstrict_14_with_grace_period\n2019\n59.888889\n1\n51744.000\nhigh\nPOINT (-8234752.46472125 4974375.573860295)\n1.862929\n2.446754\n1.832042\n3.032535\n2.973833\n3.030360\n278.50\n\n\n42753\n35154411\nAffordable Suite Steps from Central Park\nThe Manhattan Club is the perfect combination ...\n231281049\n2018-12-18\n100.0\nf\nwithin an hour\nt\nManhattan\nMidtown\n40.76593\n-73.98087\nHotel room\n3\n1.0\n1.0\n2.0\n399\n2\n1\n26\n29\n92.0\n2019-09-07\n9.78\nmoderate\n2018\n133.000000\n1\n49948.416\nhigh\nPOINT (-8235512.776843368 4977877.456547405)\n0.936126\n2.133499\n0.783409\n2.935673\n2.551740\n2.078842\n247.00\n\n\n39323\n32668712\nBB+B Brooklyn Brick & Brownstone/ Treetop ter...\nWelcome to Bed-Stuy! Your group will love sta...\n521964\n2011-04-19\n100.0\nt\nwithin an hour\nf\nBrooklyn\nBedford-Stuyvesant\n40.68472\n-73.94180\nEntire home/apt\n10\n2.0\n5.0\n5.0\n650\n4\n1\n8\n36\n100.0\n2019-09-09\n5.74\nstrict_14_with_grace_period\n2011\n65.000000\n1\n47756.800\nhigh\nPOINT (-8231163.524338076 4965948.572119144)\n1.797041\n1.754282\n1.852523\n2.913817\n3.426471\n2.856677\n177.25\n\n\n\n\n\n\n\n\n\n\n4.3 Correlation Analysis\n\nimport seaborn as sns\n\nfeature_cols = [\n     'host_year',\n     'host_response_rate',\n     'accommodates',\n     'bathrooms',\n     'bedrooms',\n     'guests_included',\n     'beds',\n     'review_scores_rating',\n     'reviews_per_month',\n     'logDistCrime',\n     'logDistNoise',\n     'logDistDirty',\n     'logDistUni',\n     'logDistSubway',\n     'logDistAttr',\n     'LaggedPrice',\n     'price'\n     ]\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,8))\n\n# Compute the correlation matrix\ncorr=airbnb_gpd[feature_cols].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(10,230,as_cmap=True)\n\nheatmap=sns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, linewidths=.5, cbar_kws={\"shrink\": .5});\nfigure = heatmap.get_figure() \nfigure.savefig(\"./diagram/corr.png\",bbox_inches='tight')\n\n\n\n\n\n\n4.4 Model Building\n\ncols_price=[\n     #'host_year',\n     #'host_response_rate',\n     'host_identity_verified',\n     'instant_bookable',\n     'neighbourhood',\n     'room_type',\n     'accommodates',\n     'bathrooms',\n     'bedrooms',\n     'guests_included',\n     'beds',\n     'review_scores_rating',\n     'reviews_per_month',\n     'cancellation_policy',\n     'logDistCrime',\n     'logDistNoise',\n     'logDistDirty',\n     'logDistSubway',\n     'logDistAttr',\n     'logDistUni',\n     'LaggedPrice',\n     'price',\n     'coor']\n\nprice=airbnb_gpd[cols_price].dropna()\nlen(price)\n\n26624\n\n\n\n# Use a 70/30% training/test split\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\ntrain_set, test_set = train_test_split(price, test_size=0.3, random_state=42)\n\n# the target labels\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Set up a pipeline that includes both numerical columns and categorical columns\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# Numerical columns\nnum_cols = [\n     'accommodates',\n     'bathrooms',\n     'bedrooms',\n     'guests_included',\n     'beds',\n     'review_scores_rating',\n     'reviews_per_month',\n     'logDistCrime',\n     'logDistNoise',\n     'logDistDirty',\n     'logDistSubway',\n     'logDistAttr',\n     'logDistUni',\n     'LaggedPrice'\n]\n# Categorical columns\ncat_cols = [ 'host_identity_verified',\n             'instant_bookable',\n             'neighbourhood',\n             'room_type',\n             'cancellation_policy'\n           ]\n\n# Set up the column transformer with two transformers\n# Scale the numerical columns and one-hot \npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n#Initialize the pipeline\nregressor = make_pipeline(\n    preprocessor, RandomForestRegressor(n_estimators=10, random_state=42)\n)"
  },
  {
    "objectID": "analysis/section_2.html#data-exploratory",
    "href": "analysis/section_2.html#data-exploratory",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "Firstly, we analyze the distribution of Airbnb prices via two histograms of Prices & log-transformed prices and a Quantile-Quantile. Through all these three plots, we get that while most prices are clustered at a lower range, there is significant variation and potentially many outliers on the higher end. To avoid unaccuracy of price predicting, we will delete some outliers and NA values before the next feature engineering section.\n\nAgain, we plot spatial distribution of Airbnb price in the form of both points and neighbourhood. A high spatial autocorrelation phenomenon can be easily caught above, which will help us do a better feature selection in the next step."
  },
  {
    "objectID": "analysis/section_2.html#feature-engineering",
    "href": "analysis/section_2.html#feature-engineering",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "After filtering all NA values, we get a nice distribution of features above via missingno package.\n\n\n\nSince Airbnb price will not only affected by propeties itself, it can also affected by nearby neighborhood properties. We select the following six factors for our feature preparation:\n\n\nCrime\n\n\n311\n\n\nCivic Art Collection\n\n\nRecreation and Parks Properties\n\n\nBicycle Parking\n\n\nRestaurant\n\n\nFor each feature collect process, we go through these 3 steps:\n\n\nGet data during URL\n\n\nExtract ‘Latitude’ and ‘Longitude’ from the original dataset\n\n\nConvert the dataset into geodataframe\n\n\n\n\n\nTo get a better details spatail learning, we add KNN method of six features via the following 6 steps\n\nStep1: Extract x/y from crime\nStep2: Initialize the algorithm\nStep3: Fit the algorithm on the “neighbors” dataset\nStep4: Get distances for airbnb to\nStep5: Average distance to neighbors\nStep6: Set zero distances to be small, but nonzero"
  },
  {
    "objectID": "analysis/section_2.html#correlation-analysis",
    "href": "analysis/section_2.html#correlation-analysis",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "Have both Airbnb property feature and nearby neighbourhood feature prepared, we did a correlation analysis as above. It seems crime , 311 call, and art data has strong correlations while other features not, which can be a good indicator for future model iteration."
  },
  {
    "objectID": "analysis/section_2.html#model-building",
    "href": "analysis/section_2.html#model-building",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "Airbnb, a revolutionary platform in the hospitality industry, was founded by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk in 2008. It has redefined the way people travel by allowing homeowners to rent out their spaces to travelers, providing a unique and personalized lodging experience. Airbnb’s service extends beyond just providing accommodation; it offers a gateway for people to explore new locations with a local’s perspective."
  },
  {
    "objectID": "analysis/section_2.html#predict",
    "href": "analysis/section_2.html#predict",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "Airbnb, a revolutionary platform in the hospitality industry, was founded by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk in 2008. It has redefined the way people travel by allowing homeowners to rent out their spaces to travelers, providing a unique and personalized lodging experience. Airbnb’s service extends beyond just providing accommodation; it offers a gateway for people to explore new locations with a local’s perspective."
  },
  {
    "objectID": "analysis/section_1.html#data-exploratory",
    "href": "analysis/section_1.html#data-exploratory",
    "title": "Fairbnb",
    "section": "2.1 Data Exploratory",
    "text": "2.1 Data Exploratory\n\n# ==&gt; 1.0 Convert the airbnb data into geodataframe\nfrom shapely.geometry import Point\n\nairbnb[\"coordinate\"]=list(zip(airbnb[\"longitude\"],airbnb[\"latitude\"]))\nairbnb[\"coordinate\"]=airbnb[\"coordinate\"].apply(Point)\nairbnb_gpd=gpd.GeoDataFrame(airbnb,geometry=\"coordinate\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\nairbnb_gpd.head()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n\n\n\n\n\n\n\n\n# ==&gt; Clean the airbnb_gpd data\nimport seaborn as sns\nimport statsmodels\nimport statsmodels.api as sm\nimport scipy.stats as stats\n\nfig, axes = plt.subplots(1,3, figsize=(21,6))\n# \nchart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#990000\")\nchart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#990000\")\naxes[1].set_xlabel('log(1+price)')\nsm.qqplot(np.log1p(airbnb_gpd['price']), stats.norm, fit=True, line='45',color=\"#990000\",alpha=0.5,ax=axes[2])\n\nfigure = chart.get_figure() \nfigure.savefig(\"./diagram/price_histogram.png\",bbox_inches='tight')\n\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_1960/2470584149.py:9: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  chart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#990000\")\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_1960/2470584149.py:10: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  chart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#990000\")\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/statsmodels/graphics/gofplots.py:1045: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"b\" (-&gt; color=(0.0, 0.0, 1.0, 1)). The keyword argument will take precedence.\n  ax.plot(x, y, fmt, **plot_style)\n\n\n\n\n\n\nairbnb_gpd = airbnb_gpd [(np.log1p(airbnb_gpd ['price']) &lt; 8) & (np.log1p(airbnb_gpd ['price']) &gt;3)]\nairbnb_gpd=airbnb_gpd.dropna()\n\n\nlen(airbnb_gpd)\n\n5054\n\n\n\nimport contextily as ctx\n\n# create the axes\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# plot a random sample of potholes\nairbnb_gpd.plot(ax=ax, \n                marker='.', \n                column=\"price\" ,\n                cmap=\"GnBu\",\n                alpha=0.5,\n                legend=True,\n                legend_kwds=dict(loc='upper left'),\n                scheme=\"Quantiles\",\n                k=5) \n\n# add the Neighbor boundary\nnhood.plot(ax=ax, edgecolor='white', linewidth=0.5, facecolor='none')\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\n\n#CartoDB.Positron\n# remove axis lines\nax.set_title(\"Price Distribution of Airbnb in SF (Quantiles: k = 5)\",fontsize=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_points',bbox_inches='tight')\n\n\n\n\n\n# spatial join\nairbnb_nhood=gpd.sjoin(airbnb_gpd,nhood,op=\"within\",how=\"right\")\nairbnb_nhood.reset_index().head()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/IPython/core/interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nindex\nindex_left\nid\nnhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\nneighbourhood\ngeometry\n\n\n\n\n0\n0\n518.0\n2.254431e+06\nSeacliff\n100.0\n98.0\nt\n37.77641\n-122.50991\n535.0\n8.0\nf\nEntire home/apt\n4.0\n51.0\n0.0\n4.90\n0.45\n2.0\n1.0\n1125.0\n2014.0\n211.0\n66.875000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n1\n0\n1048.0\n8.352275e+06\nSeacliff\n100.0\n98.0\nt\n37.78006\n-122.50905\n134.0\n2.0\nt\nPrivate room\n1.0\n718.0\n5.0\n4.94\n7.41\n2.0\n1.0\n1125.0\n2014.0\n112.0\n67.000000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n2\n0\n6146.0\n7.689811e+17\nSeacliff\n100.0\n100.0\nt\n37.78247\n-122.49269\n107.0\n3.0\nf\nEntire home/apt\n2.0\n45.0\n5.0\n4.93\n5.23\n1.0\n1.0\n28.0\n2022.0\n122.0\n35.666667\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n3\n0\n1844.0\n1.958800e+07\nSeacliff\n100.0\n100.0\nt\n37.78449\n-122.48855\n429.0\n5.0\nf\nEntire home/apt\n3.0\n24.0\n0.0\n4.96\n0.34\n18.0\n3.0\n21.0\n2011.0\n138.0\n85.800000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n4\n0\n1610.0\n1.657052e+07\nSeacliff\n100.0\n100.0\nt\n37.78732\n-122.49336\n154.0\n2.0\nf\nPrivate room\n1.0\n148.0\n3.0\n4.88\n1.86\n1.0\n2.0\n14.0\n2014.0\n108.0\n77.000000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n\n\n\n\n\n\n# calculate the airbnb count by neighborhood\ngroup=airbnb.groupby([\"neighbourhood\"])[\"price\"].mean()\ngroup=pd.DataFrame(group).reset_index()\n\ngroup=nhood.merge(group,on=\"neighbourhood\")\ngroup=group.rename(columns={0:\"count\"})\n\n\n# Needed to line up the colorbar properly\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Create the figure\nfig, ax = plt.subplots(figsize=(10, 10),facecolor=\"white\")\n\n# Plot\ngroup.plot( ax=ax,\n    column=\"price\",\n    edgecolor=\"white\",\n    legend=True,\n    legend_kwds=dict(loc='upper left'),\n    cmap=\"GnBu\",\n    scheme=\"Quantiles\",\n    k=5)\n\n# Get the limits of the GeoDataFrame\nxmin, ymin, xmax, ymax = group.total_bounds\n\n# plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, SF (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_average_nhood',bbox_inches='tight')\n\n\n\n\n\n# Plot two columns\nfig, axs = plt.subplots(ncols=2, figsize=(20,10), facecolor=\"white\")\n\n# Predicted values\nairbnb_gpd.plot(ax=axs[0], \n                column='price', \n                marker='.',\n                cmap=\"GnBu\",\n                alpha=0.5,\n                legend=True,\n                legend_kwds=dict(loc='upper left'),\n                scheme=\"Quantiles\",\n                k=5)\nnhood.plot(ax=axs[0], edgecolor='white', linewidth=0.5, facecolor='none')\nctx.add_basemap(ax=axs[0], crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[0].set_title(\"Airbnb Price Distribution by Points in SF \",size=12)\n\n\n# Actual values\ngroup.plot(ax=axs[1],\n           column=\"price\",\n           edgecolor=\"white\",\n           alpha=0.8,\n           legend=True,\n           legend_kwds=dict(loc='upper left'),\n           cmap=\"GnBu\",\n           scheme=\"Quantiles\",\n           k=5)\nnhood.plot(ax=axs[1], edgecolor='white', linewidth=0.5, facecolor='none')\nctx.add_basemap(ax=axs[1], crs=group.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[1].set_title(\"Airbnb Average Price Distribution by Neighborhood in SF\",size=12)\n\n\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, SF (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_average_nhood',bbox_inches='tight')\n\n\n\n\n\nairbnb_gpd\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.770280\n-122.433170\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n370.25\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.744740\n-122.420890\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n104.75\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.765550\n-122.452130\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n79.75\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.775640\n-122.436420\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n222.00\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.760300\n-122.421970\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n167.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n7316\n954536562110561560\nOuter Richmond\n100.0\n100.0\nt\n37.775050\n-122.504760\n156\n2\nt\nEntire home/apt\n1.0\n1\n1\n5.00\n1.00\n2\n2\n365\n2022\n126\n78.000000\n1\nPOINT (-13637167.503 4547696.480)\n2.752892\n2.585617\n2.806563\n2.993813\n2.780875\n2.818899\n179.75\n\n\n7325\n956723436929813205\nWest of Twin Peaks\n100.0\n100.0\nt\n37.739010\n-122.459720\n85\n2\nf\nPrivate room\n1.0\n2\n2\n5.00\n2.00\n1\n1\n365\n2013\n121\n42.500000\n1\nPOINT (-13632153.673 4542622.003)\n3.034106\n2.961032\n2.807492\n2.937599\n2.885993\n2.931688\n217.50\n\n\n7335\n958209683596711862\nWestern Addition\n96.0\n100.0\nt\n37.775320\n-122.426232\n349\n8\nf\nEntire home/apt\n4.0\n1\n1\n5.00\n1.00\n1\n2\n29\n2023\n123\n43.625000\n1\nPOINT (-13628425.786 4547734.488)\n2.325797\n2.315855\n2.334511\n2.415255\n2.192144\n2.163095\n277.00\n\n\n7361\n963333324421869755\nParkside\n100.0\n96.0\nt\n37.744915\n-122.470770\n292\n6\nf\nEntire home/apt\n3.0\n1\n1\n5.00\n1.00\n2\n2\n29\n2014\n113\n48.666667\n1\nPOINT (-13633383.793 4543453.325)\n2.934890\n2.919877\n2.865255\n2.899035\n2.871728\n2.872753\n195.25\n\n\n7366\n964458312280841640\nFinancial District\n100.0\n97.0\nt\n37.788338\n-122.393760\n315\n4\nf\nEntire home/apt\n1.0\n1\n1\n5.00\n1.00\n1\n2\n365\n2023\n112\n78.750000\n1\nPOINT (-13624811.028 4549568.113)\n2.644253\n1.843581\n2.715202\n2.947282\n2.466224\n2.395720\n182.00\n\n\n\n\n5153 rows × 31 columns"
  },
  {
    "objectID": "analysis/section_1.html#feature-engineering",
    "href": "analysis/section_1.html#feature-engineering",
    "title": "Fairbnb",
    "section": "2.2 Feature Engineering",
    "text": "2.2 Feature Engineering\n\n2.2.1 Current Feature Investigation\n\n# ==&gt; Firstly, we investigate distribution of each feature\n\nimport missingno as msno\nmsno.bar(airbnb_gpd[airbnb.columns])\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n2.2.2 Feature Collect\nData Source: https://www.sf.gov/departments/city-administrator/datasf\nAdd the following XX datasets: - Crime - 311 - Civic Art Collection - Recreation and Parks Properties - Bicycle Parking - Restaurant\n\nimport requests\n\n\n# ==&gt; 1.0 Add Crime data\n# Get data during URL\nurl_crime = \"https://data.sfgov.org/resource/tmnf-yvry.json?$query=SELECT%20pdid%2C%20incidntnum%2C%20incident_code%2C%20category%2C%20descript%2C%20dayofweek%2C%20date%2C%20time%2C%20pddistrict%2C%20resolution%2C%20address%2C%20x%2C%20y%2C%20location%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_crime)\ndata = response.json()\ncrime = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['y', 'x']\nnew_cols = ['Latitude', 'Longitude']\ncrime = crime[old_cols].copy()\ncrime.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\ncrime[[\"Latitude\",\"Longitude\"]] = crime[[\"Latitude\",\"Longitude\"]].astype(float)\ncrime[\"geometry\"]=list(zip(crime[\"Longitude\"],crime[\"Latitude\"]))\ncrime[\"geometry\"]=crime[\"geometry\"].apply(Point)\ncrime=gpd.GeoDataFrame(crime,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 2.0 Add 311 data\n# Get data during URL\nurl_311 = \"https://data.sfgov.org/resource/vw6y-z8j6.json?$query=SELECT%20service_request_id%2C%20requested_datetime%2C%20closed_date%2C%20updated_datetime%2C%20status_description%2C%20status_notes%2C%20agency_responsible%2C%20service_name%2C%20service_subtype%2C%20service_details%2C%20address%2C%20street%2C%20supervisor_district%2C%20neighborhoods_sffind_boundaries%2C%20police_district%2C%20lat%2C%20long%2C%20point%2C%20source%2C%20media_url%2C%20bos_2012%20ORDER%20BY%20service_request_id%20DESC\"\nresponse = requests.get(url_311)\ndata = response.json()\ndata_311 = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['lat', 'long']\nnew_cols = ['Latitude', 'Longitude']\ndata_311 = data_311[old_cols].copy()\ndata_311.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\ndata_311[[\"Latitude\",\"Longitude\"]] = data_311[[\"Latitude\",\"Longitude\"]].astype(float)\ndata_311[\"geometry\"]=list(zip(data_311[\"Longitude\"],data_311[\"Latitude\"]))\ndata_311[\"geometry\"]=data_311[\"geometry\"].apply(Point)\ndata_311=gpd.GeoDataFrame(data_311,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 3.0 Add Civic Art Collection data\n# Get data during URL\nurl_art = \"https://data.sfgov.org/resource/r7bn-7v9c.json?$query=SELECT%20creation_date%2C%20accession_number%2C%20artist%2C%20credit_line%2C%20display_title%2C%20display_dimensions%2C%20medium%2C%20media_support%2C%20facility%2C%20current_location%2C%20location_description%2C%20street_address_or_intersection%2C%20zip_code%2C%20latitude%2C%20longitude%2C%20number_of_districts%2C%20cultural_districts%2C%20supervisor_district%2C%20the_geom%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_art)\ndata = response.json()\nart = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['latitude', 'longitude']\nnew_cols = ['Latitude', 'Longitude']\nart = art[old_cols].copy()\nart.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nart[[\"Latitude\",\"Longitude\"]] = art[[\"Latitude\",\"Longitude\"]].astype(float)\nart[\"geometry\"]=list(zip(art[\"Longitude\"],art[\"Latitude\"]))\nart[\"geometry\"]=art[\"geometry\"].apply(Point)\nart=gpd.GeoDataFrame(art,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 4.0 Add Recreation and Parks Properties data\n# Get data during URL\nurl_park = \"https://data.sfgov.org/resource/gtr9-ntp6.json\"\nresponse = requests.get(url_park)\ndata = response.json()\npark = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['latitude', 'longitude']\nnew_cols = ['Latitude', 'Longitude']\npark = park[old_cols].copy()\npark.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\npark[[\"Latitude\",\"Longitude\"]] = park[[\"Latitude\",\"Longitude\"]].astype(float)\npark[\"geometry\"]=list(zip(park[\"Longitude\"],park[\"Latitude\"]))\npark[\"geometry\"]=park[\"geometry\"].apply(Point)\npark=gpd.GeoDataFrame(park,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 5.0 Add Bicycle Parking data\n# Get data during URL\nurl_bike = \"https://data.sfgov.org/resource/hn4j-6fx5.json?$query=SELECT%20objectid%2C%20address%2C%20location%2C%20street%2C%20placement%2C%20racks%2C%20spaces%2C%20globalid%2C%20install_yr%2C%20install_mo%2C%20lat%2C%20lon%2C%20shape%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_bike)\ndata = response.json()\nbike = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['lat', 'lon']\nnew_cols = ['Latitude', 'Longitude']\nbike = bike[old_cols].copy()\nbike.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nbike[[\"Latitude\",\"Longitude\"]] = bike[[\"Latitude\",\"Longitude\"]].astype(float)\nbike[\"geometry\"]=list(zip(bike[\"Longitude\"],bike[\"Latitude\"]))\nbike[\"geometry\"]=bike[\"geometry\"].apply(Point)\nbike=gpd.GeoDataFrame(bike,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 6.0 Add Restaurant data\n# Get data during URL\nurl_school = \"https://data.sfgov.org/resource/pyih-qa8i.json\"\nresponse = requests.get(url_school)\ndata = response.json()\nresta = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['business_latitude', 'business_longitude']\nnew_cols = ['Latitude', 'Longitude']\nresta = resta[old_cols].copy()\nresta.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nresta[[\"Latitude\",\"Longitude\"]] = resta[[\"Latitude\",\"Longitude\"]].astype(float)\nresta[\"geometry\"]=list(zip(resta[\"Longitude\"],resta[\"Latitude\"]))\nresta[\"geometry\"]=resta[\"geometry\"].apply(Point)\nresta=gpd.GeoDataFrame(resta,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\n90.000000\n-120.500000\nPOINT (-13413998.641 242528680.944)\n\n\n1\n37.770767\n-122.421595\nPOINT (-13627909.564 4547093.357)\n\n\n2\n37.769868\n-122.422367\nPOINT (-13627995.602 4546966.729)\n\n\n3\n37.745745\n-122.452717\nPOINT (-13631374.069 4543570.132)\n\n\n4\n37.712164\n-122.448127\nPOINT (-13630863.178 4538843.604)\n\n\n\n\n\n\n\n\n\n2.2.3 Feature Add\n\nfrom sklearn.neighbors import NearestNeighbors\n\n# define a function to extract x/y from dataset\ndef get_xy_from_geometry(df):\n    \"\"\"\n    Return a numpy array with two columns, where the \n    first holds the `x` geometry coordinate and the second \n    column holds the `y` geometry coordinate\n    \"\"\"\n    x = df.geometry.x\n    y = df.geometry.y\n    \n    return np.column_stack((x, y)) \n\n# Extract x/y from airbnb\nairbnbXY=get_xy_from_geometry(airbnb_gpd)\n\n\n# ==&gt; 1.0 KNN method of six features via the following 6 steps\n# Step1: Extract x/y from crime\n# Step2: Initialize the algorithm\n# Step3: Fit the algorithm on the \"neighbors\" dataset\n# Step4: Get distances for airbnb to \n# Step5: Average distance to neighbors\n# Step6: Set zero distances to be small, but nonzero\n\n# 1.1 KNN of crime\ncrimeXY=get_xy_from_geometry(crime) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(crimeXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_crime = criDists.mean(axis=1)\navgCriDist_crime[avgCriDist_crime==0] = 1e-5 \n\n# 1.2 KNN of 311\ndata_311XY=get_xy_from_geometry(data_311) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(data_311XY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_311 = criDists.mean(axis=1)\navgCriDist_311[avgCriDist_311==0] = 1e-5 \n\n# 1.3 KNN of art\nartXY=get_xy_from_geometry(art) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(artXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_art = criDists.mean(axis=1)\navgCriDist_art[avgCriDist_art==0] = 1e-5 \n\n# 1.4 KNN of park\nparkXY=get_xy_from_geometry(park) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(parkXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_park = criDists.mean(axis=1)\navgCriDist_park[avgCriDist_park==0] = 1e-5\n\n# 1.5 KNN of bike\nbikeXY=get_xy_from_geometry(bike) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(bikeXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_bike = criDists.mean(axis=1)\navgCriDist_bike[avgCriDist_bike==0] = 1e-5\n\n# 1.6 KNN of resta\nrestaXY=get_xy_from_geometry(resta) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(restaXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_resta = criDists.mean(axis=1)\navgCriDist_resta[avgCriDist_resta==0] = 1e-5\n\n\n# ==&gt; 2.0 Calculate log of distances of six features\nairbnb_gpd['log_crime'] = np.log10(avgCriDist_crime)\nairbnb_gpd['log_311'] = np.log10(avgCriDist_311)\nairbnb_gpd['log_art'] = np.log10(avgCriDist_art)\nairbnb_gpd['log_park'] = np.log10(avgCriDist_park)\nairbnb_gpd['log_bike'] = np.log10(avgCriDist_bike)\nairbnb_gpd['log_resta'] = np.log10(avgCriDist_resta)\n\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n\n\n\n\n\n\n\n\n# ==&gt; 3.0 Plot all six features in the same figure\nfig, axs = plt.subplots(ncols=2,nrows=3, figsize=(20,25))\nimport matplotlib.colors as mcolors\ncolors = [(0.0, \"red\"), (0.5, \"blue\"), (1.0, \"yellow\")]\ncustom_cmap = mcolors.LinearSegmentedColormap.from_list(\"custom_colormap\", colors, N=256)\n\n\n# 3.1 log_crime\nax=axs[0][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_crime'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_crime',size=18)\nax.set_axis_off()\n\n# 3.2 log_311\nax=axs[0][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_311'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_311',size=18)\nax.set_axis_off()\n\n# 3.3 log_art\nax=axs[1][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_art'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_art',size=18)\nax.set_axis_off()\n\n# 3.4 log_park\nax=axs[1][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_park'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_park',size=18)\nax.set_axis_off()\n\n# 3.5 log_bike\nax=axs[2][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_bike'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_bike',size=18)\nax.set_axis_off()\n\n# 3.6 log_resta\nax=axs[2][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_resta'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_resta',size=18)\nax.set_axis_off()\n\nplt.savefig('./diagram/features_collected',bbox_inches='tight')\n\n\n\n\n\n# ==&gt; 4.0 Add the lagged sales variable\n\nnbrs = NearestNeighbors(n_neighbors=5)\nnbrs.fit(airbnbXY)\npriceDists, priceIndices = nbrs.kneighbors(airbnbXY)\n\n# the sales for the stations from original data frame\nprice = airbnb_gpd['price'].values\n\n# get the trips for the 5 nearest neighbors (ignoring first match)\nneighboring_price =  price[priceIndices[:,1:]]\n\n# add to features\nairbnb_gpd['LaggedPrice'] = neighboring_price.mean(axis=1)\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n370.25\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n104.75\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n79.75\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n222.00\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n167.00"
  },
  {
    "objectID": "analysis/section_1.html#correlation-analysis",
    "href": "analysis/section_1.html#correlation-analysis",
    "title": "Fairbnb",
    "section": "2.3 Correlation Analysis",
    "text": "2.3 Correlation Analysis\n\nimport seaborn as sns\nvalue = bool(True)\n\nfeature_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'price_per_person'\n     ]\n\n# Initialize the figure and axes\nfx, ax = plt.subplots(figsize=(15, 8))\n\n# Compute the correlation matrix\ncorr = airbnb_gpd[feature_cols].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=bool)  # Use bool directly instead of np.bool\nmask[np.triu_indices_from(mask)] = True\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(10, 230, as_cmap=True)\n\nheatmap = sns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, linewidths=.5, cbar_kws={\"shrink\": .5})\nfigure = heatmap.get_figure() \nfigure.savefig(\"./diagram/correlation.png\", bbox_inches='tight')"
  },
  {
    "objectID": "analysis/section_1.html#model-building",
    "href": "analysis/section_1.html#model-building",
    "title": "Fairbnb",
    "section": "2.4 Model Building",
    "text": "2.4 Model Building\n\ncols_price=[\n     'host_year',  \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'host_identity_verified',\n     'instant_bookable',\n     'neighbourhood',\n     'room_type',\n     'coordinate'\n     ]\n\nprice=airbnb_gpd[cols_price].dropna()\n\n\n# Use a 70/30% training/test split\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\ntrain_set, test_set = train_test_split(price, test_size=0.3, random_state=42)\n\n# the target labels\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Set up a pipeline that includes both numerical columns and categorical columns\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# Numerical columns\nnum_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice'\n]\n# Categorical columns\ncat_cols = [ 'host_identity_verified',\n             'instant_bookable',\n             'neighbourhood',\n             'room_type'\n           ]\n\n\n# Set up the column transformer with two transformers\n# Scale the numerical columns and one-hot \npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n#Initialize the pipeline\nregressor = make_pipeline(\n    preprocessor, RandomForestRegressor(n_estimators=10, random_state=42)\n)\n\n\n# Evaluate the score on the test set using the best_params_ \nregressor = make_pipeline(preprocessor, RandomForestRegressor(n_estimators=100,max_depth=13,random_state=42))\n\n# Fit the training set\nregressor.fit(train_set, y_train);\n\n#  the test score\nprint(f\"Testing Score = {regressor.score(test_set, y_test)}\")\n\nTesting Score = 0.34280431620306995"
  },
  {
    "objectID": "analysis/section_1.html#predict",
    "href": "analysis/section_1.html#predict",
    "title": "Fairbnb",
    "section": "2.6 Predict",
    "text": "2.6 Predict\n\nimport hvplot.pandas\n\ndef plot_feature_importances(regr, num_cols, preprocessor, top=20, **kwargs):\n    \"\"\"\n    Utility function to plot the feature importances from the input\n    random forest regressor\n    \"\"\"\n    # The one-hot step\n    ohe = preprocessor.named_transformers_[\"cat\"]\n\n    # One column for each category type!\n    ohe_cols = ohe.get_feature_names_out()\n\n    # Full list of columns is numerical + one-hot\n    features = num_cols + list(ohe_cols)\n\n    # The regressor\n    regressor = regr[\"randomforestregressor\"]\n\n    # Create the dataframe with importances\n    importance = pd.DataFrame(\n        {\"Feature\": features, \"Importance\": regressor.feature_importances_}\n    )\n\n    # Sort importance in descending order and get the top\n    importance = importance.sort_values(\"Importance\", ascending=False).iloc[:top]\n\n    # Plot\n    return importance.hvplot.barh(x=\"Feature\", y=\"Importance\",line_color=\"white\",color=\"#71c9ce\", flip_yaxis=True, **kwargs)\n\nimp=plot_feature_importances(regressor, num_cols, preprocessor, top=30, height=500)\nhvplot.save(imp, './diagram/importance_bar.html')\nimp\n\n\n\n\n\n  \n\n\n\n\n\n# Predictions for log of total trip counts\nlog_predictions = regressor.predict(test_set)\n\n# Convert the predicted test values from log\ntest_set['prediction'] = np.exp(log_predictions)\ntest_set['percent_error']=(test_set['prediction']-test_set['price'])/test_set['prediction']\ntest_set['abs_percent_error']=abs(test_set['percent_error'])\n\n\n# calculate the airbnb count by neighborhood\nabs_nei=test_set.groupby([\"neighbourhood\"])[\"abs_percent_error\"].mean()\nabs_nei=pd.DataFrame(abs_nei).reset_index()\n\nabs_nei=nhood.merge(abs_nei,on=\"neighbourhood\")\n\n\ntest_set\n\n\n\n\n\n\n\n\nhost_year\nhost_response_rate\naccommodates\nbeds\nnumber_of_reviews\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nlast_review_days\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\nprice\nhost_identity_verified\ninstant_bookable\nneighbourhood\nroom_type\ncoordinate\nprediction\npercent_error\nabs_percent_error\n\n\n\n\n5972\n2020\n100.0\n4\n2.0\n2\n5.00\n0.19\n14\n2\n340\n2.270763\n2.064503\n2.231732\n2.565864\n2.460853\n2.479059\n150.75\n131\nt\nf\nDowntown/Civic Center\nEntire home/apt\nPOINT (-13627872.325 4548347.160)\n215.618750\n0.392446\n0.392446\n\n\n620\n2014\n100.0\n6\n3.0\n39\n4.89\n0.35\n1\n2\n340\n2.829116\n2.932763\n2.940149\n2.848138\n3.032383\n3.220961\n353.50\n621\nt\nf\nTwin Peaks\nEntire home/apt\nPOINT (-13630795.575 4543836.893)\n72.403538\n-7.576929\n7.576929\n\n\n4261\n2020\n100.0\n2\n1.0\n13\n5.00\n0.43\n4\n30\n201\n2.572000\n2.459310\n2.951267\n2.838103\n2.635427\n2.576596\n231.50\n200\nt\nf\nPacific Heights\nEntire home/apt\nPOINT (-13629672.362 4549835.991)\n132.159749\n-0.513320\n0.513320\n\n\n3719\n2020\n100.0\n6\n3.0\n8\n5.00\n1.83\n2\n3\n121\n2.313734\n2.781310\n2.458128\n2.729949\n2.369446\n2.568670\n298.00\n675\nf\nf\nMission\nEntire home/apt\nPOINT (-13626655.603 4545177.236)\n343.257873\n-0.966452\n0.966452\n\n\n5336\n2017\n100.0\n6\n3.0\n1\n5.00\n0.06\n8\n30\n588\n2.772270\n3.272024\n3.248074\n3.079585\n3.237465\n3.353485\n100.00\n194\nt\nt\nBayview\nEntire home/apt\nPOINT (-13622344.200 4541276.358)\n63.277373\n-2.065867\n2.065867\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3944\n2012\n100.0\n1\n1.0\n7\n4.71\n0.24\n23\n30\n202\n2.472840\n2.399109\n2.745379\n2.608093\n2.462304\n2.346706\n136.50\n74\nt\nt\nWestern Addition\nPrivate room\nPOINT (-13628797.390 4547535.928)\n65.688293\n-0.126533\n0.126533\n\n\n1316\n2013\n100.0\n5\n5.0\n121\n4.88\n1.35\n7\n30\n256\n2.115881\n2.584117\n2.403650\n2.645915\n2.202797\n2.473800\n97.00\n500\nt\nf\nMission\nEntire home/apt\nPOINT (-13627127.598 4545440.539)\n219.570470\n-1.277173\n1.277173\n\n\n6262\n2022\n100.0\n8\n4.0\n2\n5.00\n0.28\n2\n30\n246\n2.668124\n2.671466\n2.704201\n2.753143\n2.675993\n2.598566\n258.75\n169\nt\nf\nCastro/Upper Market\nEntire home/apt\nPOINT (-13629693.780 4545162.509)\n224.136678\n0.245996\n0.245996\n\n\n3351\n2016\n100.0\n2\n1.0\n4\n4.75\n0.09\n48\n2\n234\n2.274353\n1.881382\n2.490948\n2.568636\n2.560734\n2.114605\n120.00\n95\nt\nt\nChinatown\nEntire home/apt\nPOINT (-13626337.230 4550081.099)\n96.565609\n0.016213\n0.016213\n\n\n2438\n2018\n100.0\n4\n2.0\n116\n4.81\n1.83\n3\n1\n114\n2.737564\n2.743015\n3.124985\n3.067772\n2.918207\n2.698198\n88.75\n139\nt\nt\nParkside\nEntire home/apt\nPOINT (-13635497.711 4543339.939)\n139.328114\n0.002355\n0.002355\n\n\n\n\n1546 rows × 26 columns\n\n\n\n\n# Plot two columns\nimport contextily as ctx\nfig, axs = plt.subplots(ncols=2, figsize=(20,10), facecolor=\"white\")\n\n\n# Predicted values\ntest_set.plot(ax=axs[0], column='percent_error', marker='.',cmap=\"GnBu\",alpha=0.5,\n            legend=True,legend_kwds=dict(loc='upper left'),scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[0], crs=test_set.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[0].set_title(\"Distribution of Percent Error\",size=25)\n\n\n# Actual values\nabs_nei.plot(ax=axs[1],column=\"abs_percent_error\",edgecolor=\"white\",alpha=0.8,\n              legend=True,legend_kwds=dict(loc='upper left'),cmap=\"YlGnBu\",scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[1], crs=test_set.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[1].set_title(\"Mean Absolute Percent Error by Neighbourhood\",size=25)\n\n\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\nplt.savefig('./diagram/model_validation.png',bbox_inches='tight')"
  },
  {
    "objectID": "analysis/section_1.html",
    "href": "analysis/section_1.html",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Initially, we imported both Airbnb data and neighborhood data for San Francisco from InsideAirbnb. During this process, we obtained Airbnb data comprising 7,418 rows and 75 columns, and neighborhood data consisting of 36 rows and 3 columns.\n\n\n\nSince the raw Airbnb dataset has too many features that we do not need. I filtered out 22 features in the following 7 categories:\n\nindex :‘id’, ‘neighbourhood_cleansed’,\nhost info :‘host_since’, ‘host_response_rate’, ‘host_acceptance_rate’, ‘host_identity_verified’,\nlocation info :‘latitude’, ‘longitude’,\nroom info : ‘room_type’, ‘beds’,\nreviews info : ‘number_of_reviews’, ‘number_of_reviews_l30d’, ‘review_scores_rating’, ‘last_review’, ‘reviews_per_month’,\ncore info that users mainly make decision on : ‘price’, ‘accommodates’, ‘instant_bookable’,\nother : ‘calculated_host_listings_count’, ‘minimum_nights’, ‘maximum_nights’\n\nAfter removing all rows with missing data from the dataset, I perform additional feature transformations to improve its distribution. For instance, I convert the ‘host_since’ column from a date format into a numeric value by calculating the difference between the current date and the ‘host_since’ date. Additionally, I convert the values within the ‘host_response_rate’ and ‘host_acceptance_rate’ columns from percentages to numeric formats. To better understand the price sensitivity, I calculate the price per person by dividing the “accommodates” value by the “price.”\n\n\n\n\nFirstly, I explore general relationship between price and count in San Fransciso area. As we can see from the graph above, the majority of the listings are clustered at the lower end of the price spectrum, with a peak occurring just around the $100 mark. The number of listings decreases as the price increases, with very few listings priced above $600. Without surprises, affordable listings are more prevalent in San Francisco’s Airbnb market, with luxury or higher-priced accommodations being much less common.\n\nNext, we investigate the Airbnb host count distribution by room type and host year (the year that the host started the Airbnb). From the graph, we can observe that the count of hosts for entire homes/apartments saw a sharp increase around 2010, peaking around 2013, followed by a decline and then somewhat leveling off. The trend for private rooms shows a gradual increase with some fluctuations but does not reach the peak of entire homes/apartments. Shared rooms and hotel rooms have comparatively low host counts throughout the years, with shared rooms showing a slight increase over time and hotel rooms remaining relatively flat and close to zero.\nWe can get that entire homes/apartments have been the most popular type of accommodation among Airbnb hosts in this period, while hotel rooms have been the least popular.\n\nTo better understand spread and central tendencies of Airbnb prices in San Francisco according to the type of rooms, I plot a box graph above. From the graph, it’s evident that Entire homes/apartments have the highest median price, as well as the widest range of prices, indicating a large variability in how entire homes/apartments are priced. The median price for Private rooms is significantly lower than for Entire homes/apartments, with a smaller interquartile range, suggesting less variability in pricing. Shared rooms have the lowest median price and the smallest interquartile range, indicating a narrow band of prices for these listings. At last, hotel rooms have a similar median price to private rooms but show less variability and fewer outliers than entire homes/apartments.\n\nWhat about the effect from reviews? This time, I add numbers of reviews as a factor to investigate its effect for price by room type in scatter plot. From the distribution, it seems that entire homes/apartments are the most numerous and also show a wide range of prices and review counts. Private rooms are numerous as well, but generally have lower prices than entire homes/apartments. Shared rooms and hotel rooms are less frequent and tend to cluster at lower review counts and prices. Obviously, according to this graph，listings with a higher number of reviews do not necessarily charge higher prices. we will investigate more on quality of review instead of quantity in later section.\n\n\n\n\nSince location also plays an important role during Airbnb’s users’ decision process, this time we explore spatial distribution. Via the points accumulated above, we can clearly see that Airbnb is a widely used service in San Francisco, with listings spread across the city, rather than concentrated in a single area.\n\nThis way we explore the distribution by mean of each neighbourhood, similar to the distribution shown in the previous plot, almost every neighborhood has an Airbnb presence, and the differences in quantity are relatively small."
  },
  {
    "objectID": "analysis/section_2.html",
    "href": "analysis/section_2.html",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "To predict Airbnb Price, we will go through the following 5 parts:\n\nData Exploratory\nFeature Engineering\nFeature Collect\nModel Building\nPredict\n\n\n\n\nFirstly, we analyze the distribution of Airbnb prices via two histograms of Prices & log-transformed prices and a Quantile-Quantile. Through all these three plots, we get that while most prices are clustered at a lower range, there is significant variation and potentially many outliers on the higher end. To avoid unaccuracy of price predicting, we will delete some outliers and NA values before the next feature engineering section.\n\nAgain, we plot spatial distribution of Airbnb price in the form of both points and neighbourhood. A high spatial autocorrelation phenomenon can be easily caught above, which will help us do a better feature selection in the next step.\n\n\n\n\n\n\nAfter filtering all NA values, we get a nice distribution of features above via missingno package.\n\n\n\nSince Airbnb price will not only affected by propeties itself, it can also affected by nearby neighborhood properties. We select the following six factors for our feature preparation:\n\n\nCrime\n\n\n311\n\n\nCivic Art Collection\n\n\nRecreation and Parks Properties\n\n\nBicycle Parking\n\n\nRestaurant\n\n\nFor each feature collect process, we go through these 3 steps:\n\n\nGet data during URL\n\n\nExtract ‘Latitude’ and ‘Longitude’ from the original dataset\n\n\nConvert the dataset into geodataframe\n\n\n\n\n\nTo get a better details spatail learning, we add KNN method of six features via the following 6 steps\n\nStep1: Extract x/y from crime\nStep2: Initialize the algorithm\nStep3: Fit the algorithm on the “neighbors” dataset\nStep4: Get distances for airbnb to\nStep5: Average distance to neighbors\nStep6: Set zero distances to be small, but nonzero\n\n\n\n\n\n\n\nHave both Airbnb property feature and nearby neighbourhood feature prepared, we did a correlation analysis as above. It seems crime , 311 call, and art data has strong correlations while other features not, which can be a good indicator for future model iteration.\n\n\n\nDuring model fit process, we choose randomforest regression model and mainly go through the following steps:\n\n\nSplit data by 70% for training set and 30% for test set.\n\n\nset “price” as the target labels for both train and test sets\n\n\nSet up a pipeline that includes both numerical columns and categorical columns\n\n\nInitialize the pipeline\n\n\nFit the model with training set\n\n\nNext, We got the following testing score by implement the baseline model on test set.\nTesting Score = 0.34280431620306995\nThe Score is moderate.\nFor a better model iteration, we need to know more about the feature importance, as we can see from the plot below, the top 5 important features are:\n\n\naccommodates\n\n\nbeds\n\n\nLaggedPrice\n\n\nminimum_nights\n\n\nlog_crime\n\n\n\n\n\n\nFor model evaluation steps, we calculated the predicted price, percent error as well as absolute percent error for each observation. To better understand the spatial autocorrelation, we plotted both the spatial distribution of the percent error and the mean absolute percet error by neighborhood in test set.\n\nFrom the plot above, we can see that the errors of prediction Airbnb price do have few spatial cluster, which means the effects of spatial autocorrelation still exist, which is in line with the observations we made in the previous correlation analysis stage.\nIn conclusion, although the model itself still has improvement space, we have identified the flaws and the direction for iteration. After removing some interrelated features and adding more features, our model can better assist users in predicting house prices, while also helping hosts make better adjustments and plans for their properties."
  },
  {
    "objectID": "index.html#hello-and-welcome",
    "href": "index.html#hello-and-welcome",
    "title": "Trrendy | Airbnb Price Predicter",
    "section": "",
    "text": "I’m Watson Van Archer, a dedicated student currently enrolled in the Master of Urban Spatial Analytics (MUSA) program at the University of Pennsylvania.\nOver the past four months, my journey in the world of geospatial has been nothing short of exhilarating. I’ve delved deep into various topics like API integration, web scraping, and the fascinating realm of machine learning. Each of these areas has not only piqued my interest but also significantly enhanced my skill set.\nThis website marks a personal milestone for me—it’s the first I’ve built independently. It serves as a testament to the knowledge and experience I’ve gained and a canvas where I bring my learning to life.\nI owe a tremendous amount of gratitude to Professor Nick Hand, who teaches MUSA 5500. His rigorous Python study materials are unparalleled, and they’ve played a crucial role in shaping my understanding, especially in the geospatial field. Professor Hand’s guidance has been a beacon, illuminating the path in my educational journey.\nThrough this website, I aim to showcase my projects, share insights, and connect with others who share a passion for technology and urban spatial analysis. Whether you’re a fellow student, a professional in the field, or just curious about the intersection of technology and urban studies, I hope you find something here that inspires you."
  },
  {
    "objectID": "analysis/code.html",
    "href": "analysis/code.html",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "",
    "text": "# import libraries\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport geopandas as gpd\n\n\n# basic setting\npd.set_option('display.max_columns', None)"
  },
  {
    "objectID": "analysis/code.html#data-exploratory",
    "href": "analysis/code.html#data-exploratory",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "2.1 Data Exploratory",
    "text": "2.1 Data Exploratory\n\n# ==&gt; 1.0 Convert the airbnb data into geodataframe\nfrom shapely.geometry import Point\n\nairbnb[\"coordinate\"]=list(zip(airbnb[\"longitude\"],airbnb[\"latitude\"]))\nairbnb[\"coordinate\"]=airbnb[\"coordinate\"].apply(Point)\nairbnb_gpd=gpd.GeoDataFrame(airbnb,geometry=\"coordinate\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857)\nairbnb_gpd.head()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n\n\n\n\n\n\n\n\n# ==&gt; Clean the airbnb_gpd data\nimport seaborn as sns\nimport statsmodels\nimport statsmodels.api as sm\nimport scipy.stats as stats\n\nfig, axes = plt.subplots(1,3, figsize=(21,6))\n# \nchart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#990000\")\nchart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#990000\")\naxes[1].set_xlabel('log(1+price)')\nsm.qqplot(np.log1p(airbnb_gpd['price']), stats.norm, fit=True, line='45',color=\"#990000\",alpha=0.5,ax=axes[2])\n\nfigure = chart.get_figure() \nfigure.savefig(\"./diagram/price_histogram.png\",bbox_inches='tight')\n\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_1960/2470584149.py:9: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  chart=sns.distplot(airbnb_gpd['price'], ax=axes[0],color=\"#990000\")\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_1960/2470584149.py:10: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  chart=sns.distplot(np.log1p(airbnb_gpd['price']), ax=axes[1],color=\"#990000\")\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/statsmodels/graphics/gofplots.py:1045: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"b\" (-&gt; color=(0.0, 0.0, 1.0, 1)). The keyword argument will take precedence.\n  ax.plot(x, y, fmt, **plot_style)\n\n\n\n\n\n\nairbnb_gpd = airbnb_gpd [(np.log1p(airbnb_gpd ['price']) &lt; 8) & (np.log1p(airbnb_gpd ['price']) &gt;3)]\nairbnb_gpd=airbnb_gpd.dropna()\n\n\nlen(airbnb_gpd)\n\n5054\n\n\n\nimport contextily as ctx\n\n# create the axes\nfig, ax = plt.subplots(figsize=(10, 10))\n\n# plot a random sample of potholes\nairbnb_gpd.plot(ax=ax, \n                marker='.', \n                column=\"price\" ,\n                cmap=\"GnBu\",\n                alpha=0.5,\n                legend=True,\n                legend_kwds=dict(loc='upper left'),\n                scheme=\"Quantiles\",\n                k=5) \n\n# add the Neighbor boundary\nnhood.plot(ax=ax, edgecolor='white', linewidth=0.5, facecolor='none')\n\n# NEW: plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\n\n#CartoDB.Positron\n# remove axis lines\nax.set_title(\"Price Distribution of Airbnb in SF (Quantiles: k = 5)\",fontsize=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_points',bbox_inches='tight')\n\n\n\n\n\n# spatial join\nairbnb_nhood=gpd.sjoin(airbnb_gpd,nhood,op=\"within\",how=\"right\")\nairbnb_nhood.reset_index().head()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/IPython/core/interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\nindex\nindex_left\nid\nnhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\nneighbourhood\ngeometry\n\n\n\n\n0\n0\n518.0\n2.254431e+06\nSeacliff\n100.0\n98.0\nt\n37.77641\n-122.50991\n535.0\n8.0\nf\nEntire home/apt\n4.0\n51.0\n0.0\n4.90\n0.45\n2.0\n1.0\n1125.0\n2014.0\n211.0\n66.875000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n1\n0\n1048.0\n8.352275e+06\nSeacliff\n100.0\n98.0\nt\n37.78006\n-122.50905\n134.0\n2.0\nt\nPrivate room\n1.0\n718.0\n5.0\n4.94\n7.41\n2.0\n1.0\n1125.0\n2014.0\n112.0\n67.000000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n2\n0\n6146.0\n7.689811e+17\nSeacliff\n100.0\n100.0\nt\n37.78247\n-122.49269\n107.0\n3.0\nf\nEntire home/apt\n2.0\n45.0\n5.0\n4.93\n5.23\n1.0\n1.0\n28.0\n2022.0\n122.0\n35.666667\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n3\n0\n1844.0\n1.958800e+07\nSeacliff\n100.0\n100.0\nt\n37.78449\n-122.48855\n429.0\n5.0\nf\nEntire home/apt\n3.0\n24.0\n0.0\n4.96\n0.34\n18.0\n3.0\n21.0\n2011.0\n138.0\n85.800000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n4\n0\n1610.0\n1.657052e+07\nSeacliff\n100.0\n100.0\nt\n37.78732\n-122.49336\n154.0\n2.0\nf\nPrivate room\n1.0\n148.0\n3.0\n4.88\n1.86\n1.0\n2.0\n14.0\n2014.0\n108.0\n77.000000\n1.0\nSeacliff\nMULTIPOLYGON (((-13634866.529 4549507.923, -13...\n\n\n\n\n\n\n\n\n# calculate the airbnb count by neighborhood\ngroup=airbnb.groupby([\"neighbourhood\"])[\"price\"].mean()\ngroup=pd.DataFrame(group).reset_index()\n\ngroup=nhood.merge(group,on=\"neighbourhood\")\ngroup=group.rename(columns={0:\"count\"})\n\n\n# Needed to line up the colorbar properly\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\n\n# Create the figure\nfig, ax = plt.subplots(figsize=(10, 10),facecolor=\"white\")\n\n# Plot\ngroup.plot( ax=ax,\n    column=\"price\",\n    edgecolor=\"white\",\n    legend=True,\n    legend_kwds=dict(loc='upper left'),\n    cmap=\"GnBu\",\n    scheme=\"Quantiles\",\n    k=5)\n\n# Get the limits of the GeoDataFrame\nxmin, ymin, xmax, ymax = group.total_bounds\n\n# plot the basemap underneath\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, SF (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_average_nhood',bbox_inches='tight')\n\n\n\n\n\n# Plot two columns\nfig, axs = plt.subplots(ncols=2, figsize=(20,10), facecolor=\"white\")\n\n# Predicted values\nairbnb_gpd.plot(ax=axs[0], \n                column='price', \n                marker='.',\n                cmap=\"GnBu\",\n                alpha=0.5,\n                legend=True,\n                legend_kwds=dict(loc='upper left'),\n                scheme=\"Quantiles\",\n                k=5)\nnhood.plot(ax=axs[0], edgecolor='white', linewidth=0.5, facecolor='none')\nctx.add_basemap(ax=axs[0], crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[0].set_title(\"Airbnb Price Distribution by Points in SF \",size=12)\n\n\n# Actual values\ngroup.plot(ax=axs[1],\n           column=\"price\",\n           edgecolor=\"white\",\n           alpha=0.8,\n           legend=True,\n           legend_kwds=dict(loc='upper left'),\n           cmap=\"GnBu\",\n           scheme=\"Quantiles\",\n           k=5)\nnhood.plot(ax=axs[1], edgecolor='white', linewidth=0.5, facecolor='none')\nctx.add_basemap(ax=axs[1], crs=group.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[1].set_title(\"Airbnb Average Price Distribution by Neighborhood in SF\",size=12)\n\n\n\n# Format\nax.set_title(\"Average Airbnb Price by neighborhood, SF (Quantiles: k = 5)\",size=15)\nax.set_axis_off()\nax.set_aspect(\"equal\")\nplt.savefig('./diagram/detail/price_average_nhood',bbox_inches='tight')\n\n\n\n\n\nairbnb_gpd\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.770280\n-122.433170\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n370.25\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.744740\n-122.420890\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n104.75\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.765550\n-122.452130\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n79.75\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.775640\n-122.436420\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n222.00\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.760300\n-122.421970\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n167.00\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n7316\n954536562110561560\nOuter Richmond\n100.0\n100.0\nt\n37.775050\n-122.504760\n156\n2\nt\nEntire home/apt\n1.0\n1\n1\n5.00\n1.00\n2\n2\n365\n2022\n126\n78.000000\n1\nPOINT (-13637167.503 4547696.480)\n2.752892\n2.585617\n2.806563\n2.993813\n2.780875\n2.818899\n179.75\n\n\n7325\n956723436929813205\nWest of Twin Peaks\n100.0\n100.0\nt\n37.739010\n-122.459720\n85\n2\nf\nPrivate room\n1.0\n2\n2\n5.00\n2.00\n1\n1\n365\n2013\n121\n42.500000\n1\nPOINT (-13632153.673 4542622.003)\n3.034106\n2.961032\n2.807492\n2.937599\n2.885993\n2.931688\n217.50\n\n\n7335\n958209683596711862\nWestern Addition\n96.0\n100.0\nt\n37.775320\n-122.426232\n349\n8\nf\nEntire home/apt\n4.0\n1\n1\n5.00\n1.00\n1\n2\n29\n2023\n123\n43.625000\n1\nPOINT (-13628425.786 4547734.488)\n2.325797\n2.315855\n2.334511\n2.415255\n2.192144\n2.163095\n277.00\n\n\n7361\n963333324421869755\nParkside\n100.0\n96.0\nt\n37.744915\n-122.470770\n292\n6\nf\nEntire home/apt\n3.0\n1\n1\n5.00\n1.00\n2\n2\n29\n2014\n113\n48.666667\n1\nPOINT (-13633383.793 4543453.325)\n2.934890\n2.919877\n2.865255\n2.899035\n2.871728\n2.872753\n195.25\n\n\n7366\n964458312280841640\nFinancial District\n100.0\n97.0\nt\n37.788338\n-122.393760\n315\n4\nf\nEntire home/apt\n1.0\n1\n1\n5.00\n1.00\n1\n2\n365\n2023\n112\n78.750000\n1\nPOINT (-13624811.028 4549568.113)\n2.644253\n1.843581\n2.715202\n2.947282\n2.466224\n2.395720\n182.00\n\n\n\n\n5153 rows × 31 columns"
  },
  {
    "objectID": "analysis/code.html#feature-engineering",
    "href": "analysis/code.html#feature-engineering",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "2.2 Feature Engineering",
    "text": "2.2 Feature Engineering\n\n2.2.1 Current Feature Investigation\n\n# ==&gt; Firstly, we investigate distribution of each feature\n\nimport missingno as msno\nmsno.bar(airbnb_gpd[airbnb.columns])\n\n&lt;Axes: &gt;\n\n\n\n\n\n\n\n2.2.2 Feature Collect\nData Source: https://www.sf.gov/departments/city-administrator/datasf\nAdd the following XX datasets: - Crime - 311 - Civic Art Collection - Recreation and Parks Properties - Bicycle Parking - Restaurant\n\nimport requests\n\n\n# ==&gt; 1.0 Add Crime data\n# Get data during URL\nurl_crime = \"https://data.sfgov.org/resource/tmnf-yvry.json?$query=SELECT%20pdid%2C%20incidntnum%2C%20incident_code%2C%20category%2C%20descript%2C%20dayofweek%2C%20date%2C%20time%2C%20pddistrict%2C%20resolution%2C%20address%2C%20x%2C%20y%2C%20location%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_crime)\ndata = response.json()\ncrime = pd.DataFrame(data)\n# \nold_cols = ['y', 'x']\nnew_cols = ['Latitude', 'Longitude']\ncrime = crime[old_cols].copy()\ncrime.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\ncrime[[\"Latitude\",\"Longitude\"]] = crime[[\"Latitude\",\"Longitude\"]].astype(float)\ncrime[\"geometry\"]=list(zip(crime[\"Longitude\"],crime[\"Latitude\"]))\ncrime[\"geometry\"]=crime[\"geometry\"].apply(Point)\ncrime=gpd.GeoDataFrame(crime,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 2.0 Add 311 data\n# Get data during URL\nurl_311 = \"https://data.sfgov.org/resource/vw6y-z8j6.json?$query=SELECT%20service_request_id%2C%20requested_datetime%2C%20closed_date%2C%20updated_datetime%2C%20status_description%2C%20status_notes%2C%20agency_responsible%2C%20service_name%2C%20service_subtype%2C%20service_details%2C%20address%2C%20street%2C%20supervisor_district%2C%20neighborhoods_sffind_boundaries%2C%20police_district%2C%20lat%2C%20long%2C%20point%2C%20source%2C%20media_url%2C%20bos_2012%20ORDER%20BY%20service_request_id%20DESC\"\nresponse = requests.get(url_311)\ndata = response.json()\ndata_311 = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['lat', 'long']\nnew_cols = ['Latitude', 'Longitude']\ndata_311 = data_311[old_cols].copy()\ndata_311.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\ndata_311[[\"Latitude\",\"Longitude\"]] = data_311[[\"Latitude\",\"Longitude\"]].astype(float)\ndata_311[\"geometry\"]=list(zip(data_311[\"Longitude\"],data_311[\"Latitude\"]))\ndata_311[\"geometry\"]=data_311[\"geometry\"].apply(Point)\ndata_311=gpd.GeoDataFrame(data_311,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 3.0 Add Civic Art Collection data\n# Get data during URL\nurl_art = \"https://data.sfgov.org/resource/r7bn-7v9c.json?$query=SELECT%20creation_date%2C%20accession_number%2C%20artist%2C%20credit_line%2C%20display_title%2C%20display_dimensions%2C%20medium%2C%20media_support%2C%20facility%2C%20current_location%2C%20location_description%2C%20street_address_or_intersection%2C%20zip_code%2C%20latitude%2C%20longitude%2C%20number_of_districts%2C%20cultural_districts%2C%20supervisor_district%2C%20the_geom%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_art)\ndata = response.json()\nart = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['latitude', 'longitude']\nnew_cols = ['Latitude', 'Longitude']\nart = art[old_cols].copy()\nart.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nart[[\"Latitude\",\"Longitude\"]] = art[[\"Latitude\",\"Longitude\"]].astype(float)\nart[\"geometry\"]=list(zip(art[\"Longitude\"],art[\"Latitude\"]))\nart[\"geometry\"]=art[\"geometry\"].apply(Point)\nart=gpd.GeoDataFrame(art,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 4.0 Add Recreation and Parks Properties data\n# Get data during URL\nurl_park = \"https://data.sfgov.org/resource/gtr9-ntp6.json\"\nresponse = requests.get(url_park)\ndata = response.json()\npark = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['latitude', 'longitude']\nnew_cols = ['Latitude', 'Longitude']\npark = park[old_cols].copy()\npark.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\npark[[\"Latitude\",\"Longitude\"]] = park[[\"Latitude\",\"Longitude\"]].astype(float)\npark[\"geometry\"]=list(zip(park[\"Longitude\"],park[\"Latitude\"]))\npark[\"geometry\"]=park[\"geometry\"].apply(Point)\npark=gpd.GeoDataFrame(park,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 5.0 Add Bicycle Parking data\n# Get data during URL\nurl_bike = \"https://data.sfgov.org/resource/hn4j-6fx5.json?$query=SELECT%20objectid%2C%20address%2C%20location%2C%20street%2C%20placement%2C%20racks%2C%20spaces%2C%20globalid%2C%20install_yr%2C%20install_mo%2C%20lat%2C%20lon%2C%20shape%20ORDER%20BY%20%3Aid%20ASC\"\nresponse = requests.get(url_bike)\ndata = response.json()\nbike = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['lat', 'lon']\nnew_cols = ['Latitude', 'Longitude']\nbike = bike[old_cols].copy()\nbike.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nbike[[\"Latitude\",\"Longitude\"]] = bike[[\"Latitude\",\"Longitude\"]].astype(float)\nbike[\"geometry\"]=list(zip(bike[\"Longitude\"],bike[\"Latitude\"]))\nbike[\"geometry\"]=bike[\"geometry\"].apply(Point)\nbike=gpd.GeoDataFrame(bike,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n\n# ==&gt; 6.0 Add Restaurant data\n# Get data during URL\nurl_school = \"https://data.sfgov.org/resource/pyih-qa8i.json\"\nresponse = requests.get(url_school)\ndata = response.json()\nresta = pd.DataFrame(data)\n# Extract 'Latitude' and  'Longitude' from the original dataset\nold_cols = ['business_latitude', 'business_longitude']\nnew_cols = ['Latitude', 'Longitude']\nresta = resta[old_cols].copy()\nresta.rename(columns=dict(zip(old_cols, new_cols)), inplace=True)\n# Convert the dataset into geodataframe\nresta[[\"Latitude\",\"Longitude\"]] = resta[[\"Latitude\",\"Longitude\"]].astype(float)\nresta[\"geometry\"]=list(zip(resta[\"Longitude\"],resta[\"Latitude\"]))\nresta[\"geometry\"]=resta[\"geometry\"].apply(Point)\nresta=gpd.GeoDataFrame(resta,geometry=\"geometry\",crs={'init': 'epsg:4326'}).to_crs(epsg=3857).dropna()\n\n/Users/watson/mambaforge/envs/musa-550-fall-2023/lib/python3.10/site-packages/pyproj/crs/crs.py:141: FutureWarning: '+init=&lt;authority&gt;:&lt;code&gt;' syntax is deprecated. '&lt;authority&gt;:&lt;code&gt;' is the preferred initialization method. When making the change, be mindful of axis order changes: https://pyproj4.github.io/pyproj/stable/gotchas.html#axis-order-changes-in-proj-6\n  in_crs_string = _prepare_from_proj_string(in_crs_string)\n\n\n\n\n\n\n\n\n\nLatitude\nLongitude\ngeometry\n\n\n\n\n0\n90.000000\n-120.500000\nPOINT (-13413998.641 242528680.944)\n\n\n1\n37.770767\n-122.421595\nPOINT (-13627909.564 4547093.357)\n\n\n2\n37.769868\n-122.422367\nPOINT (-13627995.602 4546966.729)\n\n\n3\n37.745745\n-122.452717\nPOINT (-13631374.069 4543570.132)\n\n\n4\n37.712164\n-122.448127\nPOINT (-13630863.178 4538843.604)\n\n\n\n\n\n\n\n\n\n2.2.3 Feature Add\n\nfrom sklearn.neighbors import NearestNeighbors\n\n# define a function to extract x/y from dataset\ndef get_xy_from_geometry(df):\n    \"\"\"\n    Return a numpy array with two columns, where the \n    first holds the `x` geometry coordinate and the second \n    column holds the `y` geometry coordinate\n    \"\"\"\n    x = df.geometry.x\n    y = df.geometry.y\n    \n    return np.column_stack((x, y)) \n\n# Extract x/y from airbnb\nairbnbXY=get_xy_from_geometry(airbnb_gpd)\n\n\n# ==&gt; 1.0 KNN method of six features via the following 6 steps\n# Step1: Extract x/y from crime\n# Step2: Initialize the algorithm\n# Step3: Fit the algorithm on the \"neighbors\" dataset\n# Step4: Get distances for airbnb to \n# Step5: Average distance to neighbors\n# Step6: Set zero distances to be small, but nonzero\n\n# 1.1 KNN of crime\ncrimeXY=get_xy_from_geometry(crime) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(crimeXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_crime = criDists.mean(axis=1)\navgCriDist_crime[avgCriDist_crime==0] = 1e-5 \n\n# 1.2 KNN of 311\ndata_311XY=get_xy_from_geometry(data_311) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(data_311XY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_311 = criDists.mean(axis=1)\navgCriDist_311[avgCriDist_311==0] = 1e-5 \n\n# 1.3 KNN of art\nartXY=get_xy_from_geometry(art) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(artXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_art = criDists.mean(axis=1)\navgCriDist_art[avgCriDist_art==0] = 1e-5 \n\n# 1.4 KNN of park\nparkXY=get_xy_from_geometry(park) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(parkXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_park = criDists.mean(axis=1)\navgCriDist_park[avgCriDist_park==0] = 1e-5\n\n# 1.5 KNN of bike\nbikeXY=get_xy_from_geometry(bike) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(bikeXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_bike = criDists.mean(axis=1)\navgCriDist_bike[avgCriDist_bike==0] = 1e-5\n\n# 1.6 KNN of resta\nrestaXY=get_xy_from_geometry(resta) \nnbrs = NearestNeighbors(n_neighbors=5) \nnbrs.fit(restaXY) \ncriDists, criIndices = nbrs.kneighbors(airbnbXY) \navgCriDist_resta = criDists.mean(axis=1)\navgCriDist_resta[avgCriDist_resta==0] = 1e-5\n\n\n# ==&gt; 2.0 Calculate log of distances of six features\nairbnb_gpd['log_crime'] = np.log10(avgCriDist_crime)\nairbnb_gpd['log_311'] = np.log10(avgCriDist_311)\nairbnb_gpd['log_art'] = np.log10(avgCriDist_art)\nairbnb_gpd['log_park'] = np.log10(avgCriDist_park)\nairbnb_gpd['log_bike'] = np.log10(avgCriDist_bike)\nairbnb_gpd['log_resta'] = np.log10(avgCriDist_resta)\n\n\nairbnb_gpd.head()\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n\n\n\n\n\n\n\n\n# ==&gt; 3.0 Plot all six features in the same figure\nfig, axs = plt.subplots(ncols=2,nrows=3, figsize=(20,25))\nimport matplotlib.colors as mcolors\ncolors = [(0.0, \"red\"), (0.5, \"blue\"), (1.0, \"yellow\")]\ncustom_cmap = mcolors.LinearSegmentedColormap.from_list(\"custom_colormap\", colors, N=256)\n\n\n# 3.1 log_crime\nax=axs[0][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_crime'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_crime',size=18)\nax.set_axis_off()\n\n# 3.2 log_311\nax=axs[0][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_311'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_311',size=18)\nax.set_axis_off()\n\n# 3.3 log_art\nax=axs[1][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_art'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_art',size=18)\nax.set_axis_off()\n\n# 3.4 log_park\nax=axs[1][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_park'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_park',size=18)\nax.set_axis_off()\n\n# 3.5 log_bike\nax=axs[2][0]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_bike'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_bike',size=18)\nax.set_axis_off()\n\n# 3.6 log_resta\nax=axs[2][1]\nhb=ax.hexbin(airbnbXY[:,0], airbnbXY[:,1], C=airbnb_gpd['log_resta'].values,\n             cmap=custom_cmap,gridsize=80,alpha=0.8)\nnhood.plot(ax=ax, facecolor='none', edgecolor='white', linewidth=1)\nctx.add_basemap(ax=ax, crs=airbnb_gpd.crs, source=ctx.providers.CartoDB.DarkMatter)\nplt.colorbar(hb,ax=ax,fraction=0.03,pad=0.04).set_label('log_resta',size=18)\nax.set_axis_off()\n\nplt.savefig('./diagram/features_collected',bbox_inches='tight')\n\n\n\n\n\n# ==&gt; 4.0 Add the lagged sales variable\n\nnbrs = NearestNeighbors(n_neighbors=5)\nnbrs.fit(airbnbXY)\npriceDists, priceIndices = nbrs.kneighbors(airbnbXY)\n\n# the sales for the stations from original data frame\nprice = airbnb_gpd['price'].values\n\n# get the trips for the 5 nearest neighbors (ignoring first match)\nneighboring_price =  price[priceIndices[:,1:]]\n\n# add to features\nairbnb_gpd['LaggedPrice'] = neighboring_price.mean(axis=1)\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\ncoordinate\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\nPOINT (-13629198.141 4547024.716)\n2.438247\n2.473138\n2.626526\n2.793330\n2.350033\n2.371349\n370.25\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\nPOINT (-13627831.137 4543428.629)\n2.386006\n2.695961\n2.157961\n2.722494\n2.092105\n1.958029\n104.75\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\nPOINT (-13631308.758 4546358.628)\n2.584913\n2.408406\n2.950024\n2.848271\n2.450163\n2.683513\n79.75\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\nPOINT (-13629559.929 4547779.573)\n2.416063\n2.463375\n2.907497\n2.852972\n2.242407\n2.565325\n222.00\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1\nPOINT (-13627951.362 4545619.363)\n2.365501\n2.327283\n2.605696\n2.718618\n2.174633\n2.350898\n167.00"
  },
  {
    "objectID": "analysis/code.html#correlation-analysis",
    "href": "analysis/code.html#correlation-analysis",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "2.3 Correlation Analysis",
    "text": "2.3 Correlation Analysis\n\nimport seaborn as sns\nvalue = bool(True)\n\nfeature_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'price_per_person'\n     ]\n\n# Initialize the figure and axes\nfx, ax = plt.subplots(figsize=(15, 8))\n\n# Compute the correlation matrix\ncorr = airbnb_gpd[feature_cols].corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=bool)  # Use bool directly instead of np.bool\nmask[np.triu_indices_from(mask)] = True\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(10, 230, as_cmap=True)\n\nheatmap = sns.heatmap(corr, mask=mask, cmap=cmap, vmin=-1, vmax=1, linewidths=.5, cbar_kws={\"shrink\": .5})\nfigure = heatmap.get_figure() \nfigure.savefig(\"./diagram/correlation.png\", bbox_inches='tight')"
  },
  {
    "objectID": "analysis/code.html#model-building",
    "href": "analysis/code.html#model-building",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "2.4 Model Building",
    "text": "2.4 Model Building\n\ncols_price=[\n     'host_year',  \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'host_identity_verified',\n     'instant_bookable',\n     'neighbourhood',\n     'room_type',\n     'coordinate'\n     ]\n\nprice=airbnb_gpd[cols_price].dropna()\n\n\n# Use a 70/30% training/test split\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\ntrain_set, test_set = train_test_split(price, test_size=0.3, random_state=42)\n\n# the target labels\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Set up a pipeline that includes both numerical columns and categorical columns\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# Numerical columns\nnum_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice'\n]\n# Categorical columns\ncat_cols = [ 'host_identity_verified',\n             'instant_bookable',\n             'neighbourhood',\n             'room_type'\n           ]\n\n\n# Set up the column transformer with two transformers\n# Scale the numerical columns and one-hot \npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n#Initialize the pipeline\nregressor = make_pipeline(\n    preprocessor, RandomForestRegressor(n_estimators=10, random_state=42)\n)\n\n\n# Evaluate the score on the test set using the best_params_ \nregressor = make_pipeline(preprocessor, RandomForestRegressor(n_estimators=100,max_depth=13,random_state=42))\n\n# Fit the training set\nregressor.fit(train_set, y_train);\n\n#  the test score\nprint(f\"Testing Score = {regressor.score(test_set, y_test)}\")\n\nTesting Score = 0.34280431620306995"
  },
  {
    "objectID": "analysis/code.html#predict",
    "href": "analysis/code.html#predict",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "2.5 Predict",
    "text": "2.5 Predict\n\nimport hvplot.pandas\n\ndef plot_feature_importances(regr, num_cols, preprocessor, top=20, **kwargs):\n    \"\"\"\n    Utility function to plot the feature importances from the input\n    random forest regressor\n    \"\"\"\n    # The one-hot step\n    ohe = preprocessor.named_transformers_[\"cat\"]\n\n    # One column for each category type!\n    ohe_cols = ohe.get_feature_names_out()\n\n    # Full list of columns is numerical + one-hot\n    features = num_cols + list(ohe_cols)\n\n    # The regressor\n    regressor = regr[\"randomforestregressor\"]\n\n    # Create the dataframe with importances\n    importance = pd.DataFrame(\n        {\"Feature\": features, \"Importance\": regressor.feature_importances_}\n    )\n\n    # Sort importance in descending order and get the top\n    importance = importance.sort_values(\"Importance\", ascending=False).iloc[:top]\n\n    # Plot\n    return importance.hvplot.barh(x=\"Feature\", y=\"Importance\",line_color=\"white\",color=\"#71c9ce\", flip_yaxis=True, **kwargs)\n\nimp=plot_feature_importances(regressor, num_cols, preprocessor, top=30, height=500)\nhvplot.save(imp, './diagram/importance_bar.html')\nimp\n\n\n\n\n\n  \n\n\n\n\n\n# Predictions for log of total trip counts\nlog_predictions = regressor.predict(test_set)\n\n# Convert the predicted test values from log\ntest_set['prediction'] = np.exp(log_predictions)\ntest_set['percent_error']=(test_set['prediction']-test_set['price'])/test_set['prediction']\ntest_set['abs_percent_error']=abs(test_set['percent_error'])\n\n\n# calculate the airbnb count by neighborhood\nabs_nei=test_set.groupby([\"neighbourhood\"])[\"abs_percent_error\"].mean()\nabs_nei=pd.DataFrame(abs_nei).reset_index()\n\nabs_nei=nhood.merge(abs_nei,on=\"neighbourhood\")\n\n\ntest_set\n\n\n\n\n\n\n\n\nhost_year\nhost_response_rate\naccommodates\nbeds\nnumber_of_reviews\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nlast_review_days\nlog_crime\nlog_311\nlog_art\nlog_park\nlog_bike\nlog_resta\nLaggedPrice\nprice\nhost_identity_verified\ninstant_bookable\nneighbourhood\nroom_type\ncoordinate\nprediction\npercent_error\nabs_percent_error\n\n\n\n\n5972\n2020\n100.0\n4\n2.0\n2\n5.00\n0.19\n14\n2\n340\n2.270763\n2.064503\n2.231732\n2.565864\n2.460853\n2.479059\n150.75\n131\nt\nf\nDowntown/Civic Center\nEntire home/apt\nPOINT (-13627872.325 4548347.160)\n215.618750\n0.392446\n0.392446\n\n\n620\n2014\n100.0\n6\n3.0\n39\n4.89\n0.35\n1\n2\n340\n2.829116\n2.932763\n2.940149\n2.848138\n3.032383\n3.220961\n353.50\n621\nt\nf\nTwin Peaks\nEntire home/apt\nPOINT (-13630795.575 4543836.893)\n72.403538\n-7.576929\n7.576929\n\n\n4261\n2020\n100.0\n2\n1.0\n13\n5.00\n0.43\n4\n30\n201\n2.572000\n2.459310\n2.951267\n2.838103\n2.635427\n2.576596\n231.50\n200\nt\nf\nPacific Heights\nEntire home/apt\nPOINT (-13629672.362 4549835.991)\n132.159749\n-0.513320\n0.513320\n\n\n3719\n2020\n100.0\n6\n3.0\n8\n5.00\n1.83\n2\n3\n121\n2.313734\n2.781310\n2.458128\n2.729949\n2.369446\n2.568670\n298.00\n675\nf\nf\nMission\nEntire home/apt\nPOINT (-13626655.603 4545177.236)\n343.257873\n-0.966452\n0.966452\n\n\n5336\n2017\n100.0\n6\n3.0\n1\n5.00\n0.06\n8\n30\n588\n2.772270\n3.272024\n3.248074\n3.079585\n3.237465\n3.353485\n100.00\n194\nt\nt\nBayview\nEntire home/apt\nPOINT (-13622344.200 4541276.358)\n63.277373\n-2.065867\n2.065867\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3944\n2012\n100.0\n1\n1.0\n7\n4.71\n0.24\n23\n30\n202\n2.472840\n2.399109\n2.745379\n2.608093\n2.462304\n2.346706\n136.50\n74\nt\nt\nWestern Addition\nPrivate room\nPOINT (-13628797.390 4547535.928)\n65.688293\n-0.126533\n0.126533\n\n\n1316\n2013\n100.0\n5\n5.0\n121\n4.88\n1.35\n7\n30\n256\n2.115881\n2.584117\n2.403650\n2.645915\n2.202797\n2.473800\n97.00\n500\nt\nf\nMission\nEntire home/apt\nPOINT (-13627127.598 4545440.539)\n219.570470\n-1.277173\n1.277173\n\n\n6262\n2022\n100.0\n8\n4.0\n2\n5.00\n0.28\n2\n30\n246\n2.668124\n2.671466\n2.704201\n2.753143\n2.675993\n2.598566\n258.75\n169\nt\nf\nCastro/Upper Market\nEntire home/apt\nPOINT (-13629693.780 4545162.509)\n224.136678\n0.245996\n0.245996\n\n\n3351\n2016\n100.0\n2\n1.0\n4\n4.75\n0.09\n48\n2\n234\n2.274353\n1.881382\n2.490948\n2.568636\n2.560734\n2.114605\n120.00\n95\nt\nt\nChinatown\nEntire home/apt\nPOINT (-13626337.230 4550081.099)\n96.565609\n0.016213\n0.016213\n\n\n2438\n2018\n100.0\n4\n2.0\n116\n4.81\n1.83\n3\n1\n114\n2.737564\n2.743015\n3.124985\n3.067772\n2.918207\n2.698198\n88.75\n139\nt\nt\nParkside\nEntire home/apt\nPOINT (-13635497.711 4543339.939)\n139.328114\n0.002355\n0.002355\n\n\n\n\n1546 rows × 26 columns\n\n\n\n\n# Plot two columns\nimport contextily as ctx\nfig, axs = plt.subplots(ncols=2, figsize=(20,10), facecolor=\"white\")\n\n\n# Predicted values\ntest_set.plot(ax=axs[0], column='percent_error', marker='.',cmap=\"GnBu\",alpha=0.5,\n            legend=True,legend_kwds=dict(loc='upper left'),scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[0], crs=test_set.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[0].set_title(\"Distribution of Percent Error\",size=25)\n\n\n# Actual values\nabs_nei.plot(ax=axs[1],column=\"abs_percent_error\",edgecolor=\"white\",alpha=0.8,\n              legend=True,legend_kwds=dict(loc='upper left'),cmap=\"YlGnBu\",scheme=\"Quantiles\",k=5)\nctx.add_basemap(ax=axs[1], crs=test_set.crs, source=ctx.providers.CartoDB.DarkMatter)\naxs[1].set_title(\"Mean Absolute Percent Error by Neighbourhood\",size=25)\n\n\n\naxs[0].set_axis_off()\naxs[1].set_axis_off()\nplt.savefig('./diagram/model_validation.png',bbox_inches='tight')"
  },
  {
    "objectID": "analysis/section_2.html#section",
    "href": "analysis/section_2.html#section",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "Airbnb, a revolutionary platform in the hospitality industry, was founded by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk in 2008. It has redefined the way people travel by allowing homeowners to rent out their spaces to travelers, providing a unique and personalized lodging experience. Airbnb’s service extends beyond just providing accommodation; it offers a gateway for people to explore new locations with a local’s perspective.\nDespite its success, Airbnb faces certain challenges that impact both hosts and users. Many hosts struggle with understanding detailed feedback from guests. While they receive reviews, these often lack depth in terms of common themes or specific indicators that could guide service improvement.On the other side, users face a lack of transparency in pricing. While they can see the current price set by hosts, they have no reference point to understand if this price is reasonable based on historical data and market trends.\nThis project aims to address these challenges by leveraging the power of data analysis. By analyzing historical Airbnb records, this project will uncover both tabular and spatial distributions of Airbnb activities. This insight will empower hosts with a deeper understanding of how their service is being utilized and guide their business strategies for future expansion.A key component of this project is to develop a predictive pricing model. This will offer users a reference price, helping them make more informed decisions when choosing accommodations. The model will consider various factors, including historical pricing trends, to provide a realistic price estimate.\nIn this project, we delve into the world of Airbnb in San Francisco, using comprehensive datasets from two key sources: InsideAirbnb and San Francisco Open Data. These datasets provide a rich foundation for the analysis, offering in-depth insights into the local Airbnb market. The project is structured into Three main parts, each focusing on a different aspect of Airbnb’s presence in San Francisco.\n\nExplore distribution of Airbnb data in San Francisco: The first part is dedicated to exploring the distribution of Airbnb listings across the city. This involves examining various factors such as geographical spread, type of listings, and occupancy trends, offering a detailed overview of the Airbnb landscape in San Francisco.\nPredict Airbnb Price in San Francisco: The second part of the project is centered around predicting Airbnb prices in the city. By employing advanced data analysis and predictive modeling techniques, we aim to provide both hosts and guests with valuable insights into pricing trends. This not only helps guests in making informed booking decisions but also assists hosts in setting competitive and fair prices for their listings. Together, these parts form a comprehensive study, aiming to enhance the understanding of the Airbnb market in San Francisco and contribute to a more informed and efficient marketplace.\nFuture UI design: The final and equally crucial part of the project revolves around future user interface (UI) design. We plan to develop a user-friendly and intuitive tool that simplifies access to our findings and insights. This tool will not only visually represent data distributions and price predictions but will also be designed with the end-user in mind, ensuring ease of navigation and interaction."
  },
  {
    "objectID": "analysis/section_1.html#section",
    "href": "analysis/section_1.html#section",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Airbnb, a revolutionary platform in the hospitality industry, was founded by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk in 2008. It has redefined the way people travel by allowing homeowners to rent out their spaces to travelers, providing a unique and personalized lodging experience. Airbnb’s service extends beyond just providing accommodation; it offers a gateway for people to explore new locations with a local’s perspective.\nDespite its success, Airbnb faces certain challenges that impact both hosts and users. Many hosts struggle with understanding detailed feedback from guests. While they receive reviews, these often lack depth in terms of common themes or specific indicators that could guide service improvement.On the other side, users face a lack of transparency in pricing. While they can see the current price set by hosts, they have no reference point to understand if this price is reasonable based on historical data and market trends.\nThis project aims to address these challenges by leveraging the power of data analysis. By analyzing historical Airbnb records, this project will uncover both tabular and spatial distributions of Airbnb activities. This insight will empower hosts with a deeper understanding of how their service is being utilized and guide their business strategies for future expansion.A key component of this project is to develop a predictive pricing model. This will offer users a reference price, helping them make more informed decisions when choosing accommodations. The model will consider various factors, including historical pricing trends, to provide a realistic price estimate.\nIn this project, we delve into the world of Airbnb in San Francisco, using comprehensive datasets from two key sources: InsideAirbnb and San Francisco Open Data. These datasets provide a rich foundation for the analysis, offering in-depth insights into the local Airbnb market. The project is structured into Three main parts, each focusing on a different aspect of Airbnb’s presence in San Francisco.\n\nExplore distribution of Airbnb data in San Francisco: The first part is dedicated to exploring the distribution of Airbnb listings across the city. This involves examining various factors such as geographical spread, type of listings, and occupancy trends, offering a detailed overview of the Airbnb landscape in San Francisco.\nPredict Airbnb Price in San Francisco: The second part of the project is centered around predicting Airbnb prices in the city. By employing advanced data analysis and predictive modeling techniques, we aim to provide both hosts and guests with valuable insights into pricing trends. This not only helps guests in making informed booking decisions but also assists hosts in setting competitive and fair prices for their listings. Together, these parts form a comprehensive study, aiming to enhance the understanding of the Airbnb market in San Francisco and contribute to a more informed and efficient marketplace.\nFuture UI design: The final and equally crucial part of the project revolves around future user interface (UI) design. We plan to develop a user-friendly and intuitive tool that simplifies access to our findings and insights. This tool will not only visually represent data distributions and price predictions but will also be designed with the end-user in mind, ensuring ease of navigation and interaction."
  },
  {
    "objectID": "analysis/section_1.html#data-collection",
    "href": "analysis/section_1.html#data-collection",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Initially, we imported both Airbnb data and neighborhood data for San Francisco from InsideAirbnb. During this process, we obtained Airbnb data comprising 7,418 rows and 75 columns, and neighborhood data consisting of 36 rows and 3 columns."
  },
  {
    "objectID": "analysis/section_1.html#data-collection-1",
    "href": "analysis/section_1.html#data-collection-1",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Airbnb, a revolutionary platform in the hospitality industry, was founded by Brian Chesky, Joe Gebbia, and Nathan Blecharczyk in 2008. It has redefined the way people travel by allowing homeowners to rent out their spaces to travelers, providing a unique and personalized lodging experience. Airbnb’s service extends beyond just providing accommodation; it offers a gateway for people to explore new locations with a local’s perspective."
  },
  {
    "objectID": "analysis/section_1.html#table-distribution-of-san-franscisco-airbnb-data",
    "href": "analysis/section_1.html#table-distribution-of-san-franscisco-airbnb-data",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Firstly, I explore general relationship between price and count in San Fransciso area. As we can see from the graph above, the majority of the listings are clustered at the lower end of the price spectrum, with a peak occurring just around the $100 mark. The number of listings decreases as the price increases, with very few listings priced above $600. Without surprises, affordable listings are more prevalent in San Francisco’s Airbnb market, with luxury or higher-priced accommodations being much less common.\n\nNext, we investigate the Airbnb host count distribution by room type and host year (the year that the host started the Airbnb). From the graph, we can observe that the count of hosts for entire homes/apartments saw a sharp increase around 2010, peaking around 2013, followed by a decline and then somewhat leveling off. The trend for private rooms shows a gradual increase with some fluctuations but does not reach the peak of entire homes/apartments. Shared rooms and hotel rooms have comparatively low host counts throughout the years, with shared rooms showing a slight increase over time and hotel rooms remaining relatively flat and close to zero.\nWe can get that entire homes/apartments have been the most popular type of accommodation among Airbnb hosts in this period, while hotel rooms have been the least popular.\n\nTo better understand spread and central tendencies of Airbnb prices in San Francisco according to the type of rooms, I plot a box graph above. From the graph, it’s evident that Entire homes/apartments have the highest median price, as well as the widest range of prices, indicating a large variability in how entire homes/apartments are priced. The median price for Private rooms is significantly lower than for Entire homes/apartments, with a smaller interquartile range, suggesting less variability in pricing. Shared rooms have the lowest median price and the smallest interquartile range, indicating a narrow band of prices for these listings. At last, hotel rooms have a similar median price to private rooms but show less variability and fewer outliers than entire homes/apartments.\n\nWhat about the effect from reviews? This time, I add numbers of reviews as a factor to investigate its effect for price by room type in scatter plot. From the distribution, it seems that entire homes/apartments are the most numerous and also show a wide range of prices and review counts. Private rooms are numerous as well, but generally have lower prices than entire homes/apartments. Shared rooms and hotel rooms are less frequent and tend to cluster at lower review counts and prices. Obviously, according to this graph，listings with a higher number of reviews do not necessarily charge higher prices. we will investigate more on quality of review instead of quantity in later section."
  },
  {
    "objectID": "analysis/code.html#data-collection",
    "href": "analysis/code.html#data-collection",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "1.1 Data Collection",
    "text": "1.1 Data Collection\nFirstly, load both aribnb data and neighbourhood data in San Franscisco from InsideAirbnb. In this step, we got Airbnb data containing 7418 rows × 75 columns, while neighbour data containing 36 rows x 3 columns\n\n# collect airbnb data\nurl_airbnb = \"http://data.insideairbnb.com/united-states/ca/san-francisco/2023-09-02/data/listings.csv.gz\"\nairbnb_raw = pd.read_csv(url_airbnb, compression='gzip')\n\n\n# collect neighborhood data\n\nurl_nhood = 'http://data.insideairbnb.com/united-states/ca/san-francisco/2023-09-02/visualisations/neighbourhoods.geojson'\nnhood = gpd.read_file(url_nhood).to_crs(epsg=3857).drop('neighbourhood_group',axis=1)\n\n\nlen(nhood)\n\n37"
  },
  {
    "objectID": "analysis/code.html#data-cleaning-formatting-and-transformation",
    "href": "analysis/code.html#data-cleaning-formatting-and-transformation",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "1.2 Data cleaning, formatting and transformation",
    "text": "1.2 Data cleaning, formatting and transformation\nSince the raw Airbnb dataset has too many features that we do not need. I filtered out 22 features in the following 7 categories: - 1. index ‘id’, ‘neighbourhood_cleansed’, - 2. host info ‘host_since’, ‘host_response_rate’, ‘host_acceptance_rate’, ‘host_identity_verified’, - 3. location info ‘latitude’, ‘longitude’, - 4. room info ‘room_type’, ‘beds’, - 5. reviews info ‘number_of_reviews’, ‘number_of_reviews_l30d’, ‘review_scores_rating’, ‘last_review’, ‘reviews_per_month’, - 6. core info that users mainly make decision on ‘price’, ‘accommodates’, ‘instant_bookable’, - 7. other ‘calculated_host_listings_count’, ‘minimum_nights’, ‘maximum_nights’\n\n# ==&gt; Data Cleaning | filter 7 categories and 22 in total columns\ncolumns=[\n # 1 index\n 'id',\n 'neighbourhood_cleansed',\n # 2 host info\n 'host_since', # can translate to years\n 'host_response_rate',\n 'host_acceptance_rate',\n 'host_identity_verified',\n # 3 location info\n 'latitude',\n 'longitude',\n # 4 core info that users mainly make decision on\n 'price',\n 'accommodates',\n 'instant_bookable',\n # 5 room info\n 'room_type',\n 'beds',\n # 6 reviews info\n 'number_of_reviews',\n 'number_of_reviews_l30d',\n 'review_scores_rating',\n 'last_review',\n 'reviews_per_month',\n # 7 other info\n 'calculated_host_listings_count',\n 'minimum_nights',\n 'maximum_nights']\n\nairbnb=pd.DataFrame(airbnb_raw, columns=columns)\n\n\n# ==&gt; Data Cleaning |filter NA rows\n\n# Print columns with missing values\nmissing_values = airbnb.isna().sum()\nprint(missing_values[missing_values &gt; 0])\n\n# delete NA\nairbnb=airbnb.dropna(subset=[\"host_response_rate\",\n                             \"host_acceptance_rate\",\n                             \"beds\",\n                             \"reviews_per_month\",\n                             \"last_review\",\n                             \"review_scores_rating\"])\n\nlen(airbnb)\n\nhost_response_rate      1038\nhost_acceptance_rate     865\nbeds                     100\nreview_scores_rating    1437\nlast_review             1437\nreviews_per_month       1437\ndtype: int64\n\n\n5153\n\n\nAfter removing all rows with missing data from the dataset, I perform additional feature transformations to improve its distribution. For instance, I convert the ‘host_since’ column from a date format into a numeric value by calculating the difference between the current date and the ‘host_since’ date. Additionally, I convert the values within the ‘host_response_rate’ and ‘host_acceptance_rate’ columns from percentages to numeric formats. To better understand the price sensitivity, I calculate the price per person by dividing the “accommodates” value by the “price.”\n\n# ==&gt; Data Formatting\n\n# 1.0 rename neighbourhood related column\nairbnb=airbnb.rename(columns={\"neighbourhood_cleansed\":\"neighbourhood\"})\n\n# 2.0 transform 'host_since' into datatime year\nreference_date = pd.Timestamp('2023-12-18')\nairbnb['host_year'] = pd.DatetimeIndex(airbnb['host_since']).year\nairbnb.drop(columns=['host_since'], inplace=True)\n\n# 3.0 transform 'last_review' into numeric values indicates days since last review\nairbnb['last_review'] = pd.to_datetime(airbnb['last_review'])\nairbnb['last_review_days'] = (reference_date - airbnb['last_review']).dt.days\nairbnb.drop(columns=['last_review'], inplace=True)\n\n# 4.0 transform 'price' into numeric column\nairbnb['price'] = airbnb['price'].str.extract('(\\d+)', expand=False)\nairbnb['price'] = airbnb['price'].astype(int)\n\n# 5.0 transform 'host_response_rate' and 'host_acceptance_rate' into numeric column\nairbnb['host_response_rate']= airbnb['host_response_rate'].str.extract('(\\d+)', expand=False)\nairbnb['host_response_rate'] = airbnb['host_response_rate'].astype(float)\n\nairbnb['host_acceptance_rate']= airbnb['host_acceptance_rate'].str.extract('(\\d+)', expand=False)\nairbnb['host_acceptance_rate'] = airbnb['host_acceptance_rate'].astype(float)\n\n# 6.0 convert the data type\nairbnb['reviews_per_month'] = airbnb['reviews_per_month'].astype(float)\nairbnb['accommodates'] = airbnb['accommodates'].astype(int)\n\n# 7.0 calculate price per person \nairbnb['price_per_person']=airbnb[\"price\"]/airbnb[\"accommodates\"]\n\n# 8.0 add the count field\nairbnb[\"count\"]=1\n\nairbnb.head()\n\n\n\n\n\n\n\n\nid\nneighbourhood\nhost_response_rate\nhost_acceptance_rate\nhost_identity_verified\nlatitude\nlongitude\nprice\naccommodates\ninstant_bookable\nroom_type\nbeds\nnumber_of_reviews\nnumber_of_reviews_l30d\nreview_scores_rating\nreviews_per_month\ncalculated_host_listings_count\nminimum_nights\nmaximum_nights\nhost_year\nlast_review_days\nprice_per_person\ncount\n\n\n\n\n0\n958\nWestern Addition\n100.0\n100.0\nt\n37.77028\n-122.43317\n187\n3\nf\nEntire home/apt\n2.0\n405\n1\n4.87\n2.36\n1\n2\n30\n2008\n133\n62.333333\n1\n\n\n1\n5858\nBernal Heights\n80.0\n71.0\nt\n37.74474\n-122.42089\n235\n4\nf\nEntire home/apt\n2.0\n111\n0\n4.88\n0.64\n1\n30\n60\n2009\n2325\n58.750000\n1\n\n\n2\n8142\nHaight Ashbury\n100.0\n88.0\nt\n37.76555\n-122.45213\n56\n1\nf\nPrivate room\n1.0\n10\n0\n4.70\n0.09\n15\n32\n90\n2009\n141\n56.000000\n1\n\n\n3\n8339\nWestern Addition\n100.0\n0.0\nt\n37.77564\n-122.43642\n480\n2\nf\nEntire home/apt\n1.0\n28\n0\n4.87\n0.16\n2\n5\n91\n2009\n1634\n240.000000\n1\n\n\n4\n8739\nMission\n100.0\n96.0\nt\n37.76030\n-122.42197\n122\n3\nf\nPrivate room\n1.0\n792\n5\n4.92\n4.62\n2\n1\n26\n2009\n119\n40.666667\n1"
  },
  {
    "objectID": "analysis/code.html#table-distribution-of-san-franscisco-airbnb-data",
    "href": "analysis/code.html#table-distribution-of-san-franscisco-airbnb-data",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "1.3 Table Distribution of San Franscisco Airbnb Data",
    "text": "1.3 Table Distribution of San Franscisco Airbnb Data\n\nimport seaborn as sns\n\n\n# Firstly, we investage the relationship between `host_year` and `room_type` via `counts`\n\n\n# ==&gt; 1.0 Data Wrangling\n\n# group by the \"host_year\" and \"room_type\" columns and calculates the size (count) of each group \ngroup_year=airbnb.groupby([\"host_year\",\"room_type\"]).size() \n# convert the series into a DataFrame\ngroupyear=pd.DataFrame(group_year)\n# rename the column name\ngroupyear=groupyear.rename(columns={0:\"count\"})\n# reset the index ( grouped dataframe usually will have a multi-level index which is inconvenient\ngroupyear=groupyear.reset_index()\n\n\n# ==&gt; 2.0 plot setting\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,6))\n\n# Set the gtid style and font size\nsns.set(style='darkgrid',font_scale=1.5)\n\n# Set the color map\ncolor_map = {\"Entire home/apt\": \"red\", \"Private room\": \"black\", \"Shared room\":\"blue\", \"Hotel room\":\"yellow\"}\ncolors = [color_map[room_type] for room_type in airbnb[\"room_type\"]]\nstyle = dict(palette=color_map)\n\n# Plot the line\nax = sns.lineplot(x='host_year',y='count',hue=\"room_type\",markers=True,data=groupyear,**style)\n\n# Add a legend and informative axis label\nax.legend(ncol=1, loc=\"upper right\", frameon=True)\nax.set(ylabel=\"count\",xlabel=\"host_year\")\n\n# Add a title\nax.set_title(\"Distribution of Hoster Count by Different Room Types and Host Year\")\nsns.despine(left=False, bottom=False)\n\n\n# ==&gt; 3.0 save plot\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/host_year_count.png\",bbox_inches='tight')\n\n\n\n\nFirstly, we investigate the Airbnb host count distribution by room type and host year (the year that the host started the Airbnb). From the graph, we can observe that the count of hosts for entire homes/apartments saw a sharp increase around 2010, peaking around 2013, followed by a decline and then somewhat leveling off. The trend for private rooms shows a gradual increase with some fluctuations but does not reach the peak of entire homes/apartments. Shared rooms and hotel rooms have comparatively low host counts throughout the years, with shared rooms showing a slight increase over time and hotel rooms remaining relatively flat and close to zero.\nWe can get that entire homes/apartments have been the most popular type of accommodation among Airbnb hosts in this period, while hotel rooms have been the least popular.\n\n# Secondly, we investigate the distribution of price\n\n# ==&gt; 1.0 plot setting\n\n# Initialize the figure and axes\nfx,ax=plt.subplots(figsize=(15,6))\n# Set the gtid style and font size\nsns.set(style='darkgrid',font_scale=1.2)\n# Plot the histogram\nsns.distplot(airbnb[\"price\"],color=\"#990000\")\n# Set the axis label\nax.set(ylabel=\"count\",xlabel=\"price\")\n# Add a title\nax.set_title(\"Distribution of Airbnb Price in San Franscisco \")\nsns.despine(left=False, bottom=False)\n\n\n# ==&gt; 2.0 plot setting\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/distribution_price.png\",bbox_inches='tight')\n\n/var/folders/48/lbx6gdh15879t7nnkfxf04z00000gn/T/ipykernel_36709/3167881669.py:10: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(airbnb[\"price\"],color=\"#990000\")\n\n\n\n\n\nNext, I explore general relationship between price and count in San Fransciso area. As we can see from the graph above, the majority of the listings are clustered at the lower end of the price spectrum, with a peak occurring just around the $100 mark. The number of listings decreases as the price increases, with very few listings priced above $600. Without surprises, affordable listings are more prevalent in San Francisco’s Airbnb market, with luxury or higher-priced accommodations being much less common.\n\n# Thirdly, we investigate the distribution of price by roomtype\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the Seaborn style and font size\nsns.set(style='darkgrid', font_scale=1.2)\n\n# Create a boxplot\nsns.boxplot(x=\"room_type\", y=\"price\", data=airbnb, color=\"#990000\", fliersize=1, linewidth=1, ax=ax)\n\n# Set labels for y-axis and x-axis\nax.set(ylabel=\"Price\", xlabel=\"Room Type\")\n\n# Add a title\nplt.title(\"Distribution of Airbnb price by Room Type in San Franscisco\")\n\n# Show the plot\nplt.show()\n\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/distribution_price_byroomtype.png\",bbox_inches='tight')\n\n\n\n\n\n# Create a figure and axis object\nfig, ax = plt.subplots(figsize=(10, 6))\n\n# Set the Seaborn style and font size\nsns.set(style='darkgrid', font_scale=0.8)\n\n# Define your color mapping dictionary\ncolor_map = {\"Entire home/apt\": \"#FF5733\", \"Private room\": \"#000000\", \"Shared room\":\"#4287f5\", \"Hotel room\":\"#FFC300\"}\n\n# Define style parameters\nstyle = dict(palette=color_map, edgecolor=\"none\", alpha=0.5)\n\n# Plot the points using sns.scatterplot\nsns.scatterplot(x=\"number_of_reviews\", y=\"price\", hue=\"room_type\", data=airbnb, ax=ax, **style)\n\n# Add a legend and informative axis labels\nax.legend(ncol=1, loc=\"upper right\", frameon=True)\nax.set(ylabel=\"Price\", xlabel=\"Number of Reviews\")\n\n# Show the plot\nplt.show()\n\nfigure = ax.get_figure() \nfigure.savefig(\"./diagram/distribution_price_byreviews.png\",bbox_inches='tight')"
  },
  {
    "objectID": "analysis/code.html#spatial-distribution-of-san-franscisco-airbnb-data",
    "href": "analysis/code.html#spatial-distribution-of-san-franscisco-airbnb-data",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "1.4 Spatial Distribution of San Franscisco Airbnb Data",
    "text": "1.4 Spatial Distribution of San Franscisco Airbnb Data\n\n# define basemap in folium\nimport folium\nfrom folium.plugins import HeatMap\n\ndef generateBaseMap_black(default_location=[37.7749, -122.4194], default_zoom_start=10):\n    base_map = folium.Map(location=default_location, \n                          control_scale=True, \n                          zoom_start=default_zoom_start,\n                          tiles='CartoDB dark_matter',\n                          attr=\"default\")\n    return base_map\n\n\n# plot the locations of Airbnb\nbase_map=generateBaseMap_black()\n\nair_point = folium.map.FeatureGroup()\nfor lat, lng, in zip(airbnb.latitude, airbnb.longitude):\n    air_point.add_child(\n        folium.CircleMarker(\n            [lat, lng],\n            radius=1, # define how big the circle markers to be\n            color=\"none\",\n            fill=True,\n            fill_color='#339999',\n            fill_opacity=0.4\n        )\n    )\n    \nfolium_overview=base_map.add_child(air_point)\nfolium_overview.save(\"./diagram/spatial_distribution.html\")\n\n\n# calculate the airbnb count by neighborhood\nnhood_count=airbnb.groupby([\"nhood\"])[\"count\"].sum()\nnhood_count=pd.DataFrame(nhood_count).reset_index()\nnhood_count.head()\n\n\n\n\n\n\n\n\nnhood\ncount\n\n\n\n\n0\nBayview\n131\n\n\n1\nBernal Heights\n244\n\n\n2\nCastro/Upper Market\n231\n\n\n3\nChinatown\n84\n\n\n4\nCrocker Amazon\n38\n\n\n\n\n\n\n\n\n# visualize the airbnb count by neighbourhood\nbase_map=generateBaseMap_black()\n\nnei_geo=f'{url_nhood}'\nfolium.Choropleth(\n    geo_data=nei_geo,\n    data=nhood_count,\n    columns=['nhood','count'],\n    key_on='feature.properties.neighbourhood',\n    fill_color='GnBu',\n    fill_opacity=0.8,\n    line_color=\"#339999\",\n    line_opacity=1,\n    highlight=True,\n    legend_name='Airbnb Count by neighbourhood'\n).add_to(base_map)\n\nbase_map.save(\"./diagram/spatial_distribution_bynhood.html\")"
  },
  {
    "objectID": "analysis/section_3.html",
    "href": "analysis/section_3.html",
    "title": "3. UI Design",
    "section": "",
    "text": "Airbnb’s existing filter system is complex and underused. Furthermore, it lacks a clear price reference, making it challenging for users to assess room options effectively.\n\n\n\n\nOur solution enhances the Airbnb experience. Users typically follow a simple process: log in, search, and decide. Trrendy, as an Airbnb plugin, adds two crucial steps: input information into our tool and compare prices. This approach ensures more informed decisions.\n\n\n\n We propose adding an input window to Airbnb’s interface, allowing users to specify criteria like mood, budget, and location. This feature aims to replace the less efficient existing filter system.\n\nOur interface will also display suggested prices next to Airbnb’s listings, using red and green color codes. Red indicates a price higher than our suggestion, with the intensity indicating the premium. Green suggests a lower price, offering potential savings.\n\nMoreover, Trrendy will also provide direct recommendations on whether a listed price is excessively high or exceptionally low, aiding users in making better decisions."
  },
  {
    "objectID": "analysis/section_3.html#current-user-interface",
    "href": "analysis/section_3.html#current-user-interface",
    "title": "3. UI Design",
    "section": "",
    "text": "Airbnb’s existing filter system is complex and underused. Furthermore, it lacks a clear price reference, making it challenging for users to assess room options effectively."
  },
  {
    "objectID": "analysis/section_3.html#our-solution",
    "href": "analysis/section_3.html#our-solution",
    "title": "3. UI Design",
    "section": "",
    "text": "Our solution enhances the Airbnb experience. Users typically follow a simple process: log in, search, and decide. Trrendy, as an Airbnb plugin, adds two crucial steps: input information into our tool and compare prices. This approach ensures more informed decisions."
  },
  {
    "objectID": "analysis/section_1.html#spatial-distribution-of-san-franscisco-airbnb-data",
    "href": "analysis/section_1.html#spatial-distribution-of-san-franscisco-airbnb-data",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Since location also plays an important role during Airbnb’s users’ decision process, this time we explore spatial distribution. Via the points accumulated above, we can clearly see that Airbnb is a widely used service in San Francisco, with listings spread across the city, rather than concentrated in a single area.\n\nThis way we explore the distribution by mean of each neighbourhood, similar to the distribution shown in the previous plot, almost every neighborhood has an Airbnb presence, and the differences in quantity are relatively small."
  },
  {
    "objectID": "analysis/section_1.html#data-cleaning-formatting-and-transformation",
    "href": "analysis/section_1.html#data-cleaning-formatting-and-transformation",
    "title": "1. Explore Data Distribution",
    "section": "",
    "text": "Since the raw Airbnb dataset has too many features that we do not need. I filtered out 22 features in the following 7 categories:\n\nindex :‘id’, ‘neighbourhood_cleansed’,\nhost info :‘host_since’, ‘host_response_rate’, ‘host_acceptance_rate’, ‘host_identity_verified’,\nlocation info :‘latitude’, ‘longitude’,\nroom info : ‘room_type’, ‘beds’,\nreviews info : ‘number_of_reviews’, ‘number_of_reviews_l30d’, ‘review_scores_rating’, ‘last_review’, ‘reviews_per_month’,\ncore info that users mainly make decision on : ‘price’, ‘accommodates’, ‘instant_bookable’,\nother : ‘calculated_host_listings_count’, ‘minimum_nights’, ‘maximum_nights’\n\nAfter removing all rows with missing data from the dataset, I perform additional feature transformations to improve its distribution. For instance, I convert the ‘host_since’ column from a date format into a numeric value by calculating the difference between the current date and the ‘host_since’ date. Additionally, I convert the values within the ‘host_response_rate’ and ‘host_acceptance_rate’ columns from percentages to numeric formats. To better understand the price sensitivity, I calculate the price per person by dividing the “accommodates” value by the “price.”"
  },
  {
    "objectID": "analysis/section_2.html#model-fit",
    "href": "analysis/section_2.html#model-fit",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "During model fit process, we choose randomforest regression model and mainly go through the following steps:\n\n\nSplit data by 70% for training set and 30% for test set.\n\n\nset “price” as the target labels for both train and test sets\n\n\nSet up a pipeline that includes both numerical columns and categorical columns\n\n\nInitialize the pipeline\n\n\nFit the model with training set\n\n\nNext, We got the following testing score by implement the baseline model on test set.\nTesting Score = 0.34280431620306995\nThe Score is moderate.\nFor a better model iteration, we need to know more about the feature importance, as we can see from the plot below, the top 5 important features are:\n\n\naccommodates\n\n\nbeds\n\n\nLaggedPrice\n\n\nminimum_nights\n\n\nlog_crime"
  },
  {
    "objectID": "analysis/code.html#model-fit",
    "href": "analysis/code.html#model-fit",
    "title": "Section 1. Analyze Airbnb Data of San Franscisco",
    "section": "2.4 Model Fit",
    "text": "2.4 Model Fit\n\ncols_price=[\n     'host_year',  \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice',\n     'price',\n     'host_identity_verified',\n     'instant_bookable',\n     'neighbourhood',\n     'room_type',\n     'coordinate'\n     ]\n\nprice=airbnb_gpd[cols_price].dropna()\n\n\n# Use a 70/30% training/test split\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\n\ntrain_set, test_set = train_test_split(price, test_size=0.3, random_state=42)\n\n# the target labels\ny_train = np.log(train_set[\"price\"])\ny_test = np.log(test_set[\"price\"])\n\n\n# Set up a pipeline that includes both numerical columns and categorical columns\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor\n\n\n# Numerical columns\nnum_cols = [\n     'host_year', \n     'host_response_rate',\n     'accommodates',\n     'beds',\n     'number_of_reviews',\n     'review_scores_rating',\n     'reviews_per_month',\n     'calculated_host_listings_count',\n     'minimum_nights',\n     'last_review_days',\n     'log_crime',\n     'log_311',\n     'log_art',\n     'log_park',\n     'log_bike',\n     'log_resta',\n     'LaggedPrice'\n]\n# Categorical columns\ncat_cols = [ 'host_identity_verified',\n             'instant_bookable',\n             'neighbourhood',\n             'room_type'\n           ]\n\n\n# Set up the column transformer with two transformers\n# Scale the numerical columns and one-hot \npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"num\", StandardScaler(), num_cols),\n        (\"cat\", OneHotEncoder(handle_unknown=\"ignore\"), cat_cols),\n    ]\n)\n\n#Initialize the pipeline\nregressor = make_pipeline(\n    preprocessor, RandomForestRegressor(n_estimators=10, random_state=42)\n)\n\n\n# Evaluate the score on the test set using the best_params_ \nregressor = make_pipeline(preprocessor, RandomForestRegressor(n_estimators=100,max_depth=13,random_state=42))\n\n# Fit the training set\nregressor.fit(train_set, y_train);\n\n#  the test score\nprint(f\"Testing Score = {regressor.score(test_set, y_test)}\")\n\nTesting Score = 0.34280431620306995"
  },
  {
    "objectID": "analysis/section_2.html#model-evaluation",
    "href": "analysis/section_2.html#model-evaluation",
    "title": "2. Predict Airbnb Price",
    "section": "",
    "text": "For model evaluation steps, we calculated the predicted price, percent error as well as absolute percent error for each observation. To better understand the spatial autocorrelation, we plotted both the spatial distribution of the percent error and the mean absolute percet error by neighborhood in test set.\n\nFrom the plot above, we can see that the errors of prediction Airbnb price do have few spatial cluster, which means the effects of spatial autocorrelation still exist, which is in line with the observations we made in the previous correlation analysis stage.\nIn conclusion, although the model itself still has improvement space, we have identified the flaws and the direction for iteration. After removing some interrelated features and adding more features, our model can better assist users in predicting house prices, while also helping hosts make better adjustments and plans for their properties."
  },
  {
    "objectID": "analysis/section_3.html#future-user-interface",
    "href": "analysis/section_3.html#future-user-interface",
    "title": "3. UI Design",
    "section": "",
    "text": "We propose adding an input window to Airbnb’s interface, allowing users to specify criteria like mood, budget, and location. This feature aims to replace the less efficient existing filter system.\n\nOur interface will also display suggested prices next to Airbnb’s listings, using red and green color codes. Red indicates a price higher than our suggestion, with the intensity indicating the premium. Green suggests a lower price, offering potential savings.\n\nMoreover, Trrendy will also provide direct recommendations on whether a listed price is excessively high or exceptionally low, aiding users in making better decisions."
  }
]